/*
// Copyright 2006 The Regents of the University of California.
// All rights reserved.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
// This work was produced at the University of California, Lawrence
// Livermore National Laboratory (UC LLNL) under contract no.
// W-7405-ENG-48 (Contract 48) between the U.S. Department of Energy
// (DOE) and the Regents of the University of California (University)
// for the operation of UC LLNL.  The rights of the Federal Government are
// reserved under Contract 48 subject to the restrictions agreed upon by
// the DOE and University as allowed under DOE Acquisition Letter 97-1.
//
// Benjamin T. Grover and Walter Nissen

This file contains the structures and accessor functions for the lightweight mesh
topology that will be used to construct the mesh.
*/

#ifndef __CMG_MESH_TOPOLOGY_H__
#define __CMG_MESH_TOPOLOGY_H__

#include "cmgConstants.h"
#include "dataTypes.h"

struct _MeshEdge;
struct _MeshFace;

/*!\file
  The cmg generates and keeps track of the mesh via a light weight topology
  architecture.  The topology items all have the id generated by their
  ijk location.  Therefore if there are gaps in the topology of the mesh
  there will be gaps in the ids of the topology objects.  When actual
  mesh objects are generated, ie nodes, edges, faces and zones, then the
  id's are continuious and there are no gaps.
*/

/*!
  Mesh Topology Vertex, has a one to one correspondance with a mesh node.

*/
typedef struct MeshVertex
{
  int i;
  int j;
  int k;
  int nodeId;
  
} MeshVertex;

typedef struct MeshEdge
{
  int i;
  int j;
  int k;
  int meshVertexIds[2];
  int baseNodeId;
  int numNodes;
  int baseEdgeId;
  int numEdges;

    /*alignment =0 if aligned with i,
      alignment = 1 if aligned with j,
      alignment =2 if aligned with k
    */
  
  int alignment;
  
  
} MeshEdge;

typedef struct MeshFace
{
  int i;
  int j;
  int k;
  int meshEdgeIds[4];
  int baseNodeId;
  int numNodes;
  int baseEdgeId;
  int numEdges;
  int baseFaceId;
  int numFaces;
    /*alignment =0 if normal is in i direction
      alignment =1 if normal is in j direction
      alignment =2 if normal is in k direction
    */
  int alignment;
  
} MeshFace;

/*Individual block that will be assigned to a domain, it will have
  its IJK in global sms space and also it's base offset.
*/

typedef struct MeshCell
{
  int baseZoneId;
  int numZones;
  int numStructuredZones;
  int baseNodeId;
  int numNodes;
  int numStructuredNodes;
  int baseFaceId;
  int numFaces;
  int baseEdgeId;
  int numEdges;
    /*i,i+1,j,j+1,k,k+1*/
  int meshFaceIds[6];
  int i;
  int j;
  int k;

  int numberSubdivisions;
  int *subdivisionIds;
  
  
  
} MeshCell;

void MeshFacePrint (const MeshFace *this);
void MeshEdgePrint( const MeshEdge *this);
void MeshCellPrint( const MeshCell *this);
void MeshVertexPrint( const MeshVertex *this);



/*This will store all the cells in the model*/
typedef struct
{
  MeshCell cellList[CMG_MAX_BLOCK_DEFINITIONS];
  int numCells; 
} MeshCellContainer;

typedef struct
{
  MeshFace faceList[CMG_MAX_FACE_DEFINITIONS];
  int numFaces;
} MeshFaceContainer;

typedef struct
{
  MeshEdge edgeList[CMG_MAX_EDGE_DEFINITIONS];
  int numEdges;
} MeshEdgeContainer;

typedef struct
{
  MeshVertex vertexList[CMG_MAX_VERTEX_DEFINITIONS];
  int numVertices;
  
} MeshVertexContainer;







/*topology creation functions*/
void createMeshTopology( );
void createMeshCell( int i, int j, int k);
void createMeshCellVertices( int i, int j, int k);
void createMeshCellEdges( int i, int j, int k);
void createMeshCellFaces( int i, int j, int k);

/*Container functions*/
void MeshVertexContainerPrint( const MeshVertexContainer *this);
void MeshEdgeContainerPrint( const MeshEdgeContainer *this);
void MeshFaceContainerPrint( const MeshFaceContainer *this);
void MeshCellContainerPrint( const MeshCellContainer *this);


void MeshVertexInit( MeshVertex *this);
void MeshEdgeInit( MeshEdge *this);
void MeshFaceInit( MeshFace *this);
void MeshCellInit( MeshCell *this);


void MeshVertexContainerInit( MeshVertexContainer *this);
void MeshEdgeContainerInit( MeshEdgeContainer *this);
void MeshFaceContainerInit( MeshFaceContainer *this);
void MeshCellContainerInit( MeshCellContainer *this);

/*Toplogy query functions*/

/*The getAll flag, if set to 1 will return all nodes, on that
  entity and below, not just the nodes owned by that entity*/
int getMeshCellNodeSetSize( int cellId ,int getAll);
int getMeshCellFaceSetListSize( int faceId , int getAll);
int getMeshCellEdgeSetListSize( int edgeId ,int getAll);


void getMeshCellNodeSet( int cellId, int *nodeList ,int getAll);
void getMeshCellFaceNodeSet( int faceId, int *nodeList,int getAll );
void getMeshCellEdgeNodeSet( int edgeId, int *nodeList, int getAll );
int getMeshCellVertexNode( int vertexId );

#ifdef USE_MPI
int numDomainNodes( );
void getDomainNodes(int *nodeList);
#endif

/*given the sms input calculate the maximum number of each type*/
int getMaxEdges( );
int getMaxVertices( );
int getMaxFaces( );
int getMaxCells( );

/*get given id's from the ijk and alignment information(if applicable)*/
int getVertexId(int i, int j, int k);
int getEdgeId( int i, int j, int k, int alignment);
int getFaceId( int i, int j, int k, int alignment);
int getCellId(int i, int j, int k);

int getVertices(Range iRange, Range jRange, Range kRange,
                int **vertexList);
int getEdges(Range iRange, Range jRange, Range kRange,
             int **edgeList);
int getFaces(Range iRange, Range jRange, Range kRange,
             int **faceList);
int getCells(Range iRange, Range jRange, Range kRange,
             int **cellList);

/*More query functions*/
void getMeshFaceFaces(MeshFace face, int *faces);
void getCellNeighbors(MeshCell cell, int* faceNeighbors,
                      int *edgeNeighbors,int *vertexNeighbors);

void getSendReceiveTopologyEntitiesSize(int *facesSize, int *edgesSize, int *verticesSize,
                                        int domainId, int send);
void getSendReceiveTopologyEntities( int *faces, int *edges, int *vertices, int domainId, int send);

int getMeshCellVertexOwner(int vertexId);
int getMeshCellEdgeOwner(int edgeId);
int getMeshCellFaceOwner(int faceId);

void getMeshCellsFromVertex(int *cellIds, int vertexId);
void getMeshCellsFromEdge(int *cellIds, int edgeId);
void getMeshCellsFromFace(int *cellIds, int faceId);




                 
    
#endif
