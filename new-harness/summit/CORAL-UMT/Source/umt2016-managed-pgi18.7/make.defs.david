CWD             = $(shell pwd)

USE_FAKE_CMG    = off
OPT             = on
DEBUG           = off
USE_HPM         = off
USE_GPROF       = off
USE_TAU         = off
USE_TAU_PDT     = off
USE_OPENMP      = on
STATIC_LINK     = on
#CFLAGS_CMG      = -DCMGDEBUG
CFLAGS_CMG      = 

ifeq ($(USE_FAKE_CMG),on)
  CFLAGS_CMG    += -DCMG_FAKE 
else
  LIBS 		+=
endif

#------------------------------------------------ IBM ----------------------------------------------------------
#MPI_HOME=/opt/ibm/spectrum_mpi
MPI_HOME=${OLCF_SPECTRUM_MPI_ROOT}

# dd2 witherspoon nodes do not have spectrum mpi yet:
#MPI_HOME=/shared/comms/openmpi-2.0.1/gnu

#CUDA_HOME=/usr/local/cuda-9.1
CUDA_HOME=${OLCF_CUDA_ROOT}
#CUDA_HOME=/opt/pgi/linuxpower/2017/cuda/9.0
#PGI_VERSION=16.10
#PGI_VERSION=17.5
PGI_VERSION=17.9
PGI_HOME = ${OLCF_PGI_ROOT}


# kepler version:
#COMPUTE_CAPABILITY=35
# pascal version:
COMPUTE_CAPABILITY=60
# volta version:
#COMPUTE_CAPABILITY=70

CFLAGS_CMG     += 

OPENMPC_FLAGS    = -fopenmp
OPENMPF_FLAGS    = -mp

# ibm timers:
FLIBS = ../ibmtimers/libtimers.a


FLIBS += -L$(PGI_HOME)/linuxpower/$(PGI_VERSION)/lib -L$(CUDA_HOME)/lib64 -lpgf90rtl -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl \
       -lpgftnrtl -lpgkomp -lpgompstub -lpgc -lrt -ldl -lpthread -lm -lmass \
       -lcudapgi -lcudafor -lcudart -lcudaforblas

FLIBS += -lmass_simdp8
#FLIBS += -lmass_simdp9

CLIBS = -L$(CUDA_HOME)/lib64

CPPFLAGS += -DLINUX -DLinux -DUSE_MPI -DOMPI_SKIP_MPICXX $(GPROF_FLAGS) 
CPPFFLAGS = -DLINUX,-DLinux,-Dmpi,-DMPI,-DUSE_MPI,-DOMPI_SKIP_MPICXX 

# MPI Definitions
MPI_INC_PATH    = -I/$(MPI_HOME)/include

MPI_LIB_PATH    = 

#MPI_LIBS        = -lmpi_mpifh 
# New spectrum MPI requires
MPI_LIBS        = -lmpi_ibm_mpifh 


LIBS 	       += $(MPI_LIBS) -lnvToolsExt
LIBPATH 	= 
INCPATH 	= $(MPI_INC_PATH) -I$(CUDA_HOME)/include

CXX		= mpicxx
CC		= mpicc
F90             = pgf90
FPP             = pgf90

#F90FLAGS_OPT    =  -Mcuda=cc3+,nordc,maxregcount:64,ptxinfo -O2 -Kpic $(OPENMPF_FLAGS)
#F90FLAGS_OPT    =  -g -Mcuda=cc35,nordc,maxregcount:64,ptxinfo,loadcache:L1 -fast -Mfprelaxed -O3 -Kpic $(OPENMPF_FLAGS)

# Munixlogical makes pgf90 use 0 for false instead of 0xff.

F90FLAGS_OPT    = -g -Mcuda=cc$(COMPUTE_CAPABILITY),nordc,maxregcount:64,ptxinfo,loadcache:L1 -fast -Mfprelaxed -O3 -Kpic $(OPENMPF_FLAGS) -Munixlogical CUDAROOT=$(CUDA_HOME)

#F90FLAGS_OPT    =  -Mcuda=cc35,nordc,maxregcount:64,ptxinfo -g -fast -O2 -Kpic $(OPENMPF_FLAGS)
CXXFLAGS_OPT	=  -g -O2 -fpic $(OPENMPC_FLAGS)
CFLAGS_OPT	=  -g -O2 -fpic $(OPENMPC_FLAGS)



LD              = $(CXX)
LIB_EXT         = so
LDFLAGS         =  -shared -fpic 

LINK            = $(CXX)
LINKFLAGS       = $(CXXFLAGS) -lomp -g -Wl,-rpath=$(PGI_HOME)/linuxpower/$(PGI_VERSION)/lib:$(CUDA_HOME)/lib64 #CUDAROOT=$(CUDA_HOME) \
		

#
# These PLATFORM_*_EXTRAS flags are to add additional paths/libs for building 
# libInfrastructure.so, libTetonUtils.so and _TetonTest.so
#
# If linker generally needs lib paths..
#PLATFORM_LIBPATH_EXTRAS = -L/usr/local/tools/icc-11.1.073/lib/intel64/
PLATFORM_LIBPATH_EXTRAS = 

# Extra lib paths / libs for libInfrastructure.[a,so]
PLATFORM_Infrastructure_EXTRAS = $(OPENMPC_FLAGS) $(MPI_LIB_PATH) $(MPI_LIBS) 

# Extra lib paths / libs for libTetonUtils.[a,so]
PLATFORM_TetonUtils_EXTRAS = 

# Extra lib paths / libs for SuOlsonTest
PLATFORM_EXE_EXTRAS = $(OPENMPC_FLAGS) -L../CMG_CLEAN/src -Wl,-rpath,$(CWD)/../CMG_CLEAN/src \
	-L../cmg2Kull/sources -Wl,-rpath,$(CWD)/../cmg2Kull/sources\
	-L../Teton -Wl,-rpath,$(CWD)/../Teton 

# Extra lib paths / libs for _TetonTest.so
PLATFORM_TetonTest_EXTRAS = $(OPENMPC_FLAGS) $(MPI_LIB_PATH) -L$(CWD)/../CMG_CLEAN/src -Wl,-rpath,$(CWD)/../CMG_CLEAN/src \
	-L$(CWD)/../cmg2Kull/sources -Wl,-rpath,$(CWD)/../cmg2Kull/sources \
	-L$(CWD)/../Teton -Wl,-rpath,$(CWD)/../Teton \
	-L$(CWD)/../Install/lib -Wl,-rpath,$(CWD)/../Install/lib \
	-lm -lpthread -lutil -ldl $(FLIBS)

%.o: %.F90
	$(F90) $(CPPFFLAGS) $(F90FLAGS) -c $*.F90 -o $@

#------------------------------------------------ END ----------------------------------------------------------


CXXFLAGS = $(CFLAGS_CMG) $(INCPATH)
CFLAGS = $(CFLAGS_CMG) $(INCPATH)
F90FLAGS = $(INCPATH)

ifeq ($(OPT),on)
  CXXFLAGS += $(CXXFLAGS_OPT) 
  CFLAGS += $(CFLAGS_OPT) 
  F90FLAGS += $(F90FLAGS_OPT) 
endif

ifeq ($(DEBUG),on)
  CXXFLAGS += $(CXXFLAGS_DEBUG) 
  CFLAGS += $(CFLAGS_DEBUG) 
  F90FLAGS += $(F90FLAGS_DEBUG) 
endif

%.o : %.cc
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $< -o $@

%.d: %.cc
	g++ -c $(CFLAGS_CMG) $(CPPFLAGS) $(INCPATH) $< -MM -MF $@
	#$(CXX) -c $(CFLAGS_CMG) $(CPPFLAGS) $(INCPATH) $< -MM -MF $@

%.o : %.cu
	nvcc --maxrregcount=64 -gencode=arch=compute_$(COMPUTE_CAPABILITY),code=sm_$(COMPUTE_CAPABILITY) --resource-usage -Xptxas -v -O3 -c $< -o $@



