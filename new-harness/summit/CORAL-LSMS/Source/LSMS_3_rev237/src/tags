!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	Madelung/bessj.f	/^1     k=(int(abs(x))+2)\/4+1$/;"	l	subroutine:bessj	file:
1	Madelung/pqintg_c.f	/^ 1          continue$/;"	l	subroutine:pqintg	file:
1	Misc/bsstep.f	/^    1 continue$/;"	l	subroutine:bsstep	file:
1	Misc/gauleg.f	/^1       continue                             ! return here for Newton refinement$/;"	l	subroutine:gauleg	file:
1	Misc/ricbes.f	/^1     k=(int(0.75*(abs(dreal(x))+abs(dimag(x))))+2)\/4+1$/;"	l	subroutine:ricbes	file:
1	Misc/zsphbesj.f	/^    1 k=ishft(int(0.75d0*(abs(dreal(x))+abs(dimag(x))))+2,-2)$/;"	l	subroutine:zsphbesj	file:
1	SingleSite/clebsch.f	/^    1 continue$/;"	l	subroutine:clebsch	file:
1	SingleSite/spzwafu.f	/^    1 continue$/;"	l	subroutine:spzwafu	file:
1	VORPOL/setup_boundary.f	/^ 1    continue$/;"	l	subroutine:setup_boundary	file:
10	Core/outws_c.f	/^ 10   if( imm .eq. 1 ) go to 40$/;"	l	subroutine:outws	file:
10	Core/srcore.f	/^   10 isrch=isrch+1$/;"	l	subroutine:srcore	file:
10	Misc/fstop.f	/^ 10   continue$/;"	l	subroutine:fstop	file:
10	Misc/rwave.f	/^   10   continue$/;"	l	subroutine:rwave	file:
10	Misc/ylag.f	/^   10 if (ind.gt.0) go to 40$/;"	l	function:ylag	file:
10	MultipleScattering/find_sym.f	/^ 10   continue$/;"	l	subroutine:find_sym	file:
10	MultipleScattering/wasinv_p.f	/^ 10     IF (ALG.EQ.1) THEN$/;"	l	subroutine:WASINV_p	file:
10	MultipleScattering/zaxpby.f	/^ 10         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
10	MultipleScattering/zmar1.f	/^ 10   info(1) = 0$/;"	l	subroutine:Zmar1	file:
10	MultipleScattering/zrandn.f	/^ 10      CONTINUE$/;"	l	subroutine:ZRANDN	file:
10	MultipleScattering/zucpx.f	/^ 10   IERR = 0$/;"	l	subroutine:ZUCPX	file:
10	MultipleScattering/zuqmx.f	/^ 10   IERR = 0$/;"	l	subroutine:ZUQMX	file:
10	MultipleScattering/zutfx.f	/^ 10   IERR = 0$/;"	l	subroutine:ZUTFX	file:
10	Potential/alpha2_c.f	/^  10  continue$/;"	l	function:alpha2	file:
10	RadialGrid/single_pot_read.f	/^ 10   continue$/;"	l	subroutine:single_pot_read	file:
10	SingleSite/dirmag1-op.f	/^   10   q(n+1)=q1  $/;"	l	subroutine:dirmago1op	file:
10	SingleSite/dirmag1-op.f	/^   10   q(n-1)=q1  $/;"	l	subroutine:dirmagi1op	file:
10	SingleSite/dirmag2-op.f	/^   10   q1(n+1)=q11$/;"	l	subroutine:dirmago2op	file:
10	SingleSite/dirmag2-op.f	/^   10   q1(n-1)=q11$/;"	l	subroutine:dirmagi2op	file:
10	VORPOL/polyhedron.f	/^10       continue $/;"	l	subroutine:polyhedron	file:
10	VORPOL/sort.f	/^10    continue$/;"	l	subroutine:sort	file:
10	VORPOL/sortidx.f	/^10    continue$/;"	l	subroutine:sortidx	file:
100	Misc/ylag.f	/^  100    continue$/;"	l	function:ylag	file:
100	MultipleScattering/zaxpby.f	/^ 100        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
100	SingleSite/clebsch.f	/^  100 continue$/;"	l	subroutine:ruthi	file:
100	VORPOL/setup_boundary.f	/^ 100        continue$/;"	l	subroutine:setup_boundary	file:
1000	Misc/constraint.f	/^ 1000 if (istop.eq.sname) then$/;"	l	subroutine:constraint	file:
105	Misc/ylag.f	/^  105 continue$/;"	l	function:ylag	file:
11	Misc/mmid.f	/^   11 continue$/;"	l	subroutine:mmid	file:
11	MultipleScattering/find_sym.f	/^ 11     idcol(i)=i$/;"	l	subroutine:find_sym	file:
110	Core/outws_c.f	/^ 110  en=1.2d+00*en$/;"	l	subroutine:outws	file:
110	Misc/ylag.f	/^  110 continue$/;"	l	function:ylag	file:
110	MultipleScattering/zaxpby.f	/^ 110        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
110	VORPOL/setup_boundary.f	/^ 110     continue$/;"	l	subroutine:setup_boundary	file:
12	Misc/mmid.f	/^   12 continue$/;"	l	subroutine:mmid	file:
120	Core/se.f	/^  120 continue$/;"	l	subroutine:se	file:
120	MultipleScattering/zaxpby.f	/^ 120        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
13	Misc/mmid.f	/^   13 continue$/;"	l	subroutine:mmid	file:
130	Core/se.f	/^  130 continue$/;"	l	subroutine:se	file:
130	Misc/ylag.f	/^  130 ylag=y(j)$/;"	l	function:ylag	file:
130	MultipleScattering/zaxpby.f	/^ 130        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
14	Misc/mmid.f	/^   14 continue$/;"	l	subroutine:mmid	file:
140	Core/se.f	/^  140 format(' classical turning point reached in outwards integration'\/$/;"	l	subroutine:se	file:
140	MultipleScattering/zaxpby.f	/^ 140        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
145	Core/se.f	/^  145 continue$/;"	l	subroutine:se	file:
15	SingleSite/dirmag1-op.f	/^   15     p0=p1   $/;"	l	subroutine:dirmagi1op	file:
15	SingleSite/dirmag1-op.f	/^   15     p0=p1   $/;"	l	subroutine:dirmago1op	file:
15	SingleSite/dirmag2-op.f	/^   15     p10=p11$/;"	l	subroutine:dirmagi2op	file:
15	SingleSite/dirmag2-op.f	/^   15     p10=p11$/;"	l	subroutine:dirmago2op	file:
150	MultipleScattering/zaxpby.f	/^ 150        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
150	SingleSite/clebsch.f	/^  150 do 170 j=i,norder$/;"	l	subroutine:ruthi	file:
160	Core/se.f	/^  160 format(' unable to start inwards integration'\/$/;"	l	subroutine:se	file:
160	MultipleScattering/zaxpby.f	/^ 160        CONTINUE$/;"	l	subroutine:ZAXPBY	file:
170	Core/se.f	/^  170 format('SE: core e =',f10.4,' k = ',i2\/' slope (in)  = ',e12.5\/$/;"	l	subroutine:se	file:
170	SingleSite/clebsch.f	/^  170 continue$/;"	l	subroutine:ruthi	file:
199	Madelung/getgijmad.f	/^199      continue$/;"	l	subroutine:getgijmad	file:
2	Core/deepst_c.f	/^  2   continue$/;"	l	subroutine:deepst	file:
2	Core/semcst_c.f	/^ 2    continue$/;"	l	subroutine:semcst	file:
2	SingleSite/clebsch.f	/^    2       continue$/;"	l	subroutine:clebsch	file:
2	SingleSite/spzwafu.f	/^    2 continue$/;"	l	subroutine:spzwafu	file:
20	Core/inws_c.f	/^ 20   continue$/;"	l	subroutine:inws	file:
20	Core/srcore.f	/^   20 isrch=isrch+1$/;"	l	subroutine:srcore	file:
20	Misc/ylag.f	/^   20    continue$/;"	l	function:ylag	file:
20	MultipleScattering/find_sym.f	/^ 20       continue$/;"	l	subroutine:find_sym	file:
20	MultipleScattering/wasinv.f	/^ 20      CALL Zcopy (NLEN,work(1,1),1,vecs(1,j,1),1)$/;"	l	subroutine:WASINV	file:
20	MultipleScattering/wasinv_p.f	/^ 20      CALL Zcopy (NLEN,work(1,1),1,VECS(1,J),1)$/;"	l	subroutine:WASINV_p	file:
20	MultipleScattering/zaxpby.f	/^ 20         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
20	MultipleScattering/zmar1.f	/^ 20   continue$/;"	l	subroutine:Zmar1	file:
20	MultipleScattering/zrandn.f	/^ 20      IMAX = (IM-1) * 2 + 1$/;"	l	subroutine:ZRANDN	file:
20	MultipleScattering/zucpx.f	/^ 20   IF (ENN.EQ.DZERO) THEN$/;"	l	subroutine:ZUCPX	file:
20	MultipleScattering/zuqmx.f	/^ 20   IVNM1 = IVN$/;"	l	subroutine:ZUQMX	file:
20	MultipleScattering/zutfx.f	/^ 20   ZTMP = ZDOTU(NLEN,VECS(1,3),1,VECS(1,5),1)$/;"	l	subroutine:ZUTFX	file:
20	Potential/alpha2_c.f	/^  20  continue$/;"	l	function:alpha2	file:
20	VORPOL/sort.f	/^20      if(j.le.ir)then$/;"	l	subroutine:sort	file:
20	VORPOL/sortidx.f	/^20       if (j.le.ir)then$/;"	l	subroutine:sortidx	file:
200	Misc/zsphbes.f	/^200   write(6,*)'error bessel: zero argument.'$/;"	l	subroutine:zsphbes	file:
200	Misc/zsphbesjh.f	/^200   write(6,*)'error bessel: zero argument.'$/;"	l	subroutine:zsphbesjh	file:
200	SingleSite/clebsch.f	/^  200 ii=j$/;"	l	subroutine:ruthi	file:
200	SingleSite/single_site_tmat.f	/^  200   format(4d20.12)$/;"	l	subroutine:single_site_tmat	file:
25	MultipleScattering/zmar1.f	/^ 25   INFO(2) = 1$/;"	l	subroutine:Zmar1	file:
3	Madelung/getgijmad.f	/^  3         continue$/;"	l	subroutine:getgijmad	file:
3	SingleSite/clebsch.f	/^    3 continue$/;"	l	subroutine:clebsch	file:
3	SingleSite/spzwafu.f	/^    3 stop ' spzwafu: my is out of range!'$/;"	l	subroutine:spzwafu	file:
30	Core/invals_c.f	/^ 30   dm=m+gam$/;"	l	subroutine:invals	file:
30	Core/outws_c.f	/^ 30   if( invp .gt. ipdeq ) go to 40$/;"	l	subroutine:outws	file:
30	Misc/rwave.f	/^   30   continue$/;"	l	subroutine:rwave	file:
30	Misc/ylag.f	/^   30 ind=j$/;"	l	function:ylag	file:
30	MultipleScattering/wasinv.f	/^ 30   continue$/;"	l	subroutine:WASINV	file:
30	MultipleScattering/wasinv_p.f	/^ 30   CONTINUE$/;"	l	subroutine:WASINV_p	file:
30	MultipleScattering/zaxpby.f	/^ 30         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
30	MultipleScattering/zmar1.f	/^ 30   continue$/;"	l	subroutine:Zmar1	file:
30	MultipleScattering/zrandn.f	/^ 30      CONTINUE$/;"	l	subroutine:ZRANDN	file:
30	MultipleScattering/zucpx.f	/^ 30   ENN = SCPN * SCQN * ZDOTU(NLEN,VECS(1,8),1,VECS(1,6),1)$/;"	l	subroutine:ZUCPX	file:
30	MultipleScattering/zuqmx.f	/^ 30   RETLBL = 0$/;"	l	subroutine:ZUQMX	file:
30	MultipleScattering/zutfx.f	/^ 30   CALL ZAXPBY (NLEN,VECS(1,4),BETA,VECS(1,4),ZONE,VECS(1,9))$/;"	l	subroutine:ZUTFX	file:
30	Potential/alpha2_c.f	/^  30  continue$/;"	l	function:alpha2	file:
40	Core/outws_c.f	/^ 40   continue$/;"	l	subroutine:outws	file:
40	Core/se.f	/^   40 continue$/;"	l	subroutine:se	file:
40	Misc/ylag.f	/^   40 if (ind.le.1) iex=-1$/;"	l	function:ylag	file:
40	MultipleScattering/zaxpby.f	/^ 40         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
40	MultipleScattering/zrandn.f	/^ 40   CONTINUE$/;"	l	subroutine:ZRANDN	file:
40	MultipleScattering/zucpx.f	/^ 40   LNN = ENN \/ DNN$/;"	l	subroutine:ZUCPX	file:
40	MultipleScattering/zuqmx.f	/^ 40   RETLBL = 0$/;"	l	subroutine:ZUQMX	file:
40	MultipleScattering/zutfx.f	/^ 40   CALL ZAXPBY (NLEN,VECS(1,9),ZONE,VECS(1,2),-ZONE,VECS(1,9))$/;"	l	subroutine:ZUTFX	file:
40	SingleSite/dirmag2-op.f	/^   40 continue$/;"	l	subroutine:dirmagi2op	file:
40	SingleSite/dirmag2-op.f	/^   40 continue$/;"	l	subroutine:dirmago2op	file:
45	Core/se.f	/^   45 continue$/;"	l	subroutine:se	file:
5	Core/deepst_c.f	/^  5   enew=en+de$/;"	l	subroutine:deepst	file:
5	Core/srcore.f	/^    5 isrch=isrch+1$/;"	l	subroutine:srcore	file:
50	Core/se.f	/^   50 continue$/;"	l	subroutine:se	file:
50	MultipleScattering/zaxpby.f	/^ 50         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
50	MultipleScattering/zucpx.f	/^ 50   CALL ZAXPBY (NLEN,VECS(1,6),ZONE,VECS(1,2),-ZONE,VECS(1,6))$/;"	l	subroutine:ZUCPX	file:
50	MultipleScattering/zuqmx.f	/^ 50   RHNM1  = CSIN * DN * OMGN \/ DNM1$/;"	l	subroutine:ZUQMX	file:
50	MultipleScattering/zutfx.f	/^ 50   IF (VF.NE.0) WRITE (VF,'(2I8,2E11.4)') N, 2*N-1, UNRM, RESN$/;"	l	subroutine:ZUTFX	file:
50	SingleSite/dirmag2-op.f	/^   50 continue$/;"	l	subroutine:dirmagi2op	file:
50	SingleSite/dirmag2-op.f	/^   50 continue$/;"	l	subroutine:dirmago2op	file:
500	SingleSite/clebsch.f	/^  500 stop$/;"	l	subroutine:ruthi	file:
6	Core/deepst_c.f	/^  6   en=enew$/;"	l	subroutine:deepst	file:
6	Core/semcst_c.f	/^  6   continue$/;"	l	subroutine:semcst	file:
60	Core/srcore.f	/^   60 write (6,70) ecore,epl,emn$/;"	l	subroutine:srcore	file:
60	MultipleScattering/zaxpby.f	/^ 60         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
60	MultipleScattering/zucpx.f	/^ 60   IF (VF.NE.0) WRITE (VF,'(I8,2E11.4)') N, UNRM, RESN$/;"	l	subroutine:ZUCPX	file:
60	MultipleScattering/zuqmx.f	/^ 60   RETLBL = 0$/;"	l	subroutine:ZUQMX	file:
60	MultipleScattering/zutfx.f	/^ 60   CALL ZAXPY (NLEN,-ALPHA,VECS(1,8),1,VECS(1,5),1)$/;"	l	subroutine:ZUTFX	file:
7	Core/deepst_c.f	/^  7   continue$/;"	l	subroutine:deepst	file:
7	Core/semcst_c.f	/^  7   continue$/;"	l	subroutine:semcst	file:
70	Core/outws_c.f	/^ 70   continue$/;"	l	subroutine:outws	file:
70	Core/se.f	/^   70 continue$/;"	l	subroutine:se	file:
70	Core/srcore.f	/^   70 format('No zero found for core state near energy ',3f11.5)$/;"	l	subroutine:srcore	file:
70	Misc/ylag.f	/^   70 inl=imax-n$/;"	l	function:ylag	file:
70	Misc/zsphbesj.f	/^70       aj=(2*l+1)-x2\/aj$/;"	l	subroutine:zsphbesj	file:
70	MultipleScattering/zaxpby.f	/^ 70         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
70	MultipleScattering/zucpx.f	/^ 70   NLIM = N$/;"	l	subroutine:ZUCPX	file:
70	MultipleScattering/zuqmx.f	/^ 70   IF (VF.NE.0) WRITE (VF,'(I8,2E11.4)') N, UNRM, RESN$/;"	l	subroutine:ZUQMX	file:
70	MultipleScattering/zutfx.f	/^ 70   CALL ZAXPBY (NLEN,VECS(1,9),ZONE,VECS(1,2),-ZONE,VECS(1,9))$/;"	l	subroutine:ZUTFX	file:
710	Misc/zsphbesj.f	/^710       bj(l)=bscrat(l)*x1$/;"	l	subroutine:zsphbesj	file:
720	Misc/zsphbesj.f	/^720      bscrat(l-1)=(2*l+1)*bj(l)-bscrat(l+1)$/;"	l	subroutine:zsphbesj	file:
722	Misc/zsphbesj.f	/^722      bj(l)=aj*bj(l)$/;"	l	subroutine:zsphbesj	file:
8	Core/semcst_c.f	/^  8   continue$/;"	l	subroutine:semcst	file:
80	Core/outws_c.f	/^ 80   if( (k*dk*rf(1)) .lt. zero ) go to 70$/;"	l	subroutine:outws	file:
80	Misc/ylag.f	/^   80 dif=abs(xi-x(inl+1))$/;"	l	function:ylag	file:
80	MultipleScattering/zaxpby.f	/^ 80         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
80	MultipleScattering/zuqmx.f	/^ 80   ZLIM = N$/;"	l	subroutine:ZUQMX	file:
80	MultipleScattering/zutfx.f	/^ 80   IF (VF.NE.0) WRITE (VF,'(2I8,2E11.4)') N, 2*N, UNRM, RESN$/;"	l	subroutine:ZUTFX	file:
90	MultipleScattering/zaxpby.f	/^ 90         CONTINUE$/;"	l	subroutine:ZAXPBY	file:
90	MultipleScattering/zutfx.f	/^ 90   NLIM = N$/;"	l	subroutine:ZUTFX	file:
AngularMomentumIndices	Misc/Indices.hpp	/^class AngularMomentumIndices {$/;"	c
Atom	RadialGrid/Atom.hpp	/^  inline Atom(int iprpts, int ipcore)$/;"	f	class:Atom
Atom	RadialGrid/Atom.hpp	/^typedef class Atom : public RadialPotential {$/;"	c
AtomData	SingleSite/AtomData.hpp	/^  AtomData() {reset();}$/;"	f	class:AtomData
AtomData	SingleSite/AtomData.hpp	/^class AtomData {$/;"	c
AtomData	Test/buildKKRMatrixTest/TestStructures.hpp	/^class AtomData {$/;"	c
AtomType	Main/SystemParameters.hpp	/^  AtomType() : pot_in_idx(-1), store_id(-1) {}$/;"	f	class:AtomType
AtomType	Main/SystemParameters.hpp	/^class AtomType {$/;"	c
BINOMIAL_HPP	Misc/Gaunt.hpp	2;"	d
BINOMIAL_HPP	Misc/Gaunt_gmp.hpp	2;"	d
BKKRM_TEST_STRUCTURES_HPP	Test/buildKKRMatrixTest/TestStructures.hpp	2;"	d
BUILDKKRMATRIX_GPU_H	Accelerator/buildKKRMatrix_gpu.hpp	4;"	d
CALCULATEEVEC_HPP	Main/calculateEvec.hpp	2;"	d
CALCULATE_CHARGES_HPP	Potential/calculateChargesPotential.hpp	2;"	d
CALCULATE_TOTAL_ENERGY_HPP	TotalEnergy/calculateTotalEnergy.hpp	2;"	d
CHECK_CONSISTENCY_H	Main/checkConsistency.hpp	2;"	d
COEFICIENTS	Test/buildKKRMatrixTest/Makefile	/^COEFICIENTS = cgaunt_c.o ifacts_c.o gauleg.o plglmax.o fstop.o zeroout.o \\$/;"	m
CUBLAS_ALLOC	Accelerator/fortran.c	/^int CUBLAS_ALLOC (const int *n, const int *elemSize, devptr_t *devicePtr)$/;"	f
CUBLAS_ALLOC	Accelerator/fortran_common.h	238;"	d
CUBLAS_ALLOC	Accelerator/fortran_common.h	73;"	d
CUBLAS_CAXPY	Accelerator/fortran.c	/^void CUBLAS_CAXPY (const int *n, const cuComplex *alpha, $/;"	f
CUBLAS_CAXPY	Accelerator/fortran_common.h	259;"	d
CUBLAS_CAXPY	Accelerator/fortran_common.h	94;"	d
CUBLAS_CAXPY	Accelerator/fortran_thunking.c	/^void CUBLAS_CAXPY (const int *n, const cuComplex *alpha, const cuComplex *x, $/;"	f
CUBLAS_CCOPY	Accelerator/fortran.c	/^void CUBLAS_CCOPY (const int *n, const devptr_t *devPtrx, const int *incx,$/;"	f
CUBLAS_CCOPY	Accelerator/fortran_common.h	260;"	d
CUBLAS_CCOPY	Accelerator/fortran_common.h	95;"	d
CUBLAS_CCOPY	Accelerator/fortran_thunking.c	/^void CUBLAS_CCOPY (const int *n, const cuComplex *x, const int *incx, $/;"	f
CUBLAS_CDOTC	Accelerator/fortran.c	/^cuComplex CUBLAS_CDOTC ( const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_CDOTC	Accelerator/fortran.c	/^void CUBLAS_CDOTC (cuComplex *retVal, const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_CDOTC	Accelerator/fortran_common.h	104;"	d
CUBLAS_CDOTC	Accelerator/fortran_common.h	271;"	d
CUBLAS_CDOTC	Accelerator/fortran_thunking.c	/^cuComplex CUBLAS_CDOTC ( const int *n, const cuComplex *x, $/;"	f
CUBLAS_CDOTC	Accelerator/fortran_thunking.c	/^void CUBLAS_CDOTC (cuComplex *retVal, const int *n, const cuComplex *x, $/;"	f
CUBLAS_CDOTU	Accelerator/fortran.c	/^cuComplex CUBLAS_CDOTU ( const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_CDOTU	Accelerator/fortran.c	/^void CUBLAS_CDOTU (cuComplex *retVal, const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_CDOTU	Accelerator/fortran_common.h	103;"	d
CUBLAS_CDOTU	Accelerator/fortran_common.h	270;"	d
CUBLAS_CDOTU	Accelerator/fortran_thunking.c	/^cuComplex CUBLAS_CDOTU ( const int *n, const cuComplex *x, $/;"	f
CUBLAS_CDOTU	Accelerator/fortran_thunking.c	/^void CUBLAS_CDOTU (cuComplex *retVal, const int *n, const cuComplex *x, $/;"	f
CUBLAS_CGBMV	Accelerator/fortran.c	/^void CUBLAS_CGBMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_CGBMV	Accelerator/fortran_common.h	200;"	d
CUBLAS_CGBMV	Accelerator/fortran_common.h	366;"	d
CUBLAS_CGBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CGBMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_CGEMM	Accelerator/fortran.c	/^void CUBLAS_CGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_CGEMM	Accelerator/fortran_common.h	130;"	d
CUBLAS_CGEMM	Accelerator/fortran_common.h	297;"	d
CUBLAS_CGEMM	Accelerator/fortran_thunking.c	/^void CUBLAS_CGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_CGEMV	Accelerator/fortran.c	/^void CUBLAS_CGEMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_CGEMV	Accelerator/fortran_common.h	199;"	d
CUBLAS_CGEMV	Accelerator/fortran_common.h	365;"	d
CUBLAS_CGEMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CGEMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_CGERC	Accelerator/fortran.c	/^void CUBLAS_CGERC (const int *m, const int *n, const cuComplex *alpha, $/;"	f
CUBLAS_CGERC	Accelerator/fortran_common.h	209;"	d
CUBLAS_CGERC	Accelerator/fortran_common.h	375;"	d
CUBLAS_CGERC	Accelerator/fortran_thunking.c	/^void CUBLAS_CGERC (const int *m, const int *n, const cuComplex *alpha, $/;"	f
CUBLAS_CGERU	Accelerator/fortran.c	/^void CUBLAS_CGERU (const int *m, const int *n, const cuComplex *alpha, $/;"	f
CUBLAS_CGERU	Accelerator/fortran_common.h	210;"	d
CUBLAS_CGERU	Accelerator/fortran_common.h	376;"	d
CUBLAS_CGERU	Accelerator/fortran_thunking.c	/^void CUBLAS_CGERU (const int *m, const int *n, const cuComplex *alpha, $/;"	f
CUBLAS_CHBMV	Accelerator/fortran.c	/^void CUBLAS_CHBMV (const char *uplo, const int *n, const int *k,$/;"	f
CUBLAS_CHBMV	Accelerator/fortran_common.h	202;"	d
CUBLAS_CHBMV	Accelerator/fortran_common.h	368;"	d
CUBLAS_CHBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CHBMV (const char *uplo, const int *n, const int *k, $/;"	f
CUBLAS_CHEMM	Accelerator/fortran.c	/^void CUBLAS_CHEMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_CHEMM	Accelerator/fortran_common.h	131;"	d
CUBLAS_CHEMM	Accelerator/fortran_common.h	298;"	d
CUBLAS_CHEMM	Accelerator/fortran_thunking.c	/^void CUBLAS_CHEMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_CHEMV	Accelerator/fortran.c	/^void CUBLAS_CHEMV (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHEMV	Accelerator/fortran_common.h	201;"	d
CUBLAS_CHEMV	Accelerator/fortran_common.h	367;"	d
CUBLAS_CHEMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CHEMV (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHER	Accelerator/fortran.c	/^void CUBLAS_CHER (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_CHER	Accelerator/fortran_common.h	213;"	d
CUBLAS_CHER	Accelerator/fortran_thunking.c	/^void CUBLAS_CHER (const char *uplo, const int *n, const float *alpha, $/;"	f
CUBLAS_CHER2	Accelerator/fortran.c	/^void CUBLAS_CHER2 (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHER2	Accelerator/fortran_common.h	214;"	d
CUBLAS_CHER2	Accelerator/fortran_thunking.c	/^void CUBLAS_CHER2 (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHER2K	Accelerator/fortran.c	/^void CUBLAS_CHER2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_CHER2K	Accelerator/fortran_common.h	137;"	d
CUBLAS_CHER2K	Accelerator/fortran_common.h	304;"	d
CUBLAS_CHER2K	Accelerator/fortran_thunking.c	/^void CUBLAS_CHER2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_CHERK	Accelerator/fortran.c	/^void CUBLAS_CHERK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_CHERK	Accelerator/fortran_common.h	135;"	d
CUBLAS_CHERK	Accelerator/fortran_common.h	302;"	d
CUBLAS_CHERK	Accelerator/fortran_thunking.c	/^void CUBLAS_CHERK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_CHPMV	Accelerator/fortran.c	/^void CUBLAS_CHPMV (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHPMV	Accelerator/fortran_common.h	203;"	d
CUBLAS_CHPMV	Accelerator/fortran_common.h	369;"	d
CUBLAS_CHPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CHPMV (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHPR	Accelerator/fortran.c	/^void CUBLAS_CHPR (const char *uplo, const int *n, const float *alpha, $/;"	f
CUBLAS_CHPR	Accelerator/fortran_common.h	211;"	d
CUBLAS_CHPR	Accelerator/fortran_common.h	377;"	d
CUBLAS_CHPR	Accelerator/fortran_thunking.c	/^void CUBLAS_CHPR (const char *uplo, const int *n, const float *alpha, $/;"	f
CUBLAS_CHPR2	Accelerator/fortran.c	/^void CUBLAS_CHPR2 (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CHPR2	Accelerator/fortran_common.h	212;"	d
CUBLAS_CHPR2	Accelerator/fortran_thunking.c	/^void CUBLAS_CHPR2 (const char *uplo, const int *n, const cuComplex *alpha,$/;"	f
CUBLAS_CROT	Accelerator/fortran.c	/^void CUBLAS_CROT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_CROT	Accelerator/fortran_common.h	262;"	d
CUBLAS_CROT	Accelerator/fortran_common.h	96;"	d
CUBLAS_CROT	Accelerator/fortran_thunking.c	/^void CUBLAS_CROT (const int *n, cuComplex *x, const int *incx, cuComplex *y, $/;"	f
CUBLAS_CROTG	Accelerator/fortran.c	/^void CUBLAS_CROTG (cuComplex *ca, const cuComplex *cb, float *sc,$/;"	f
CUBLAS_CROTG	Accelerator/fortran_common.h	263;"	d
CUBLAS_CROTG	Accelerator/fortran_common.h	97;"	d
CUBLAS_CROTG	Accelerator/fortran_thunking.c	/^void CUBLAS_CROTG (cuComplex *ca, const cuComplex *cb, float *sc,$/;"	f
CUBLAS_CSCAL	Accelerator/fortran.c	/^void CUBLAS_CSCAL (const int *n, const cuComplex *alpha, $/;"	f
CUBLAS_CSCAL	Accelerator/fortran_common.h	264;"	d
CUBLAS_CSCAL	Accelerator/fortran_common.h	98;"	d
CUBLAS_CSCAL	Accelerator/fortran_thunking.c	/^void CUBLAS_CSCAL (const int *n, const cuComplex *alpha, cuComplex *x, $/;"	f
CUBLAS_CSROT	Accelerator/fortran.c	/^void CUBLAS_CSROT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_CSROT	Accelerator/fortran_common.h	265;"	d
CUBLAS_CSROT	Accelerator/fortran_common.h	99;"	d
CUBLAS_CSROT	Accelerator/fortran_thunking.c	/^void CUBLAS_CSROT (const int *n, cuComplex *x, const int *incx, cuComplex *y, $/;"	f
CUBLAS_CSSCAL	Accelerator/fortran.c	/^void CUBLAS_CSSCAL (const int *n, const float *alpha, const devptr_t *devPtrx,$/;"	f
CUBLAS_CSSCAL	Accelerator/fortran_common.h	100;"	d
CUBLAS_CSSCAL	Accelerator/fortran_common.h	266;"	d
CUBLAS_CSSCAL	Accelerator/fortran_thunking.c	/^void CUBLAS_CSSCAL (const int *n, const float *alpha, cuComplex *x, $/;"	f
CUBLAS_CSWAP	Accelerator/fortran.c	/^void CUBLAS_CSWAP (const int *n, const devptr_t *devPtrx, const int *incx,$/;"	f
CUBLAS_CSWAP	Accelerator/fortran_common.h	101;"	d
CUBLAS_CSWAP	Accelerator/fortran_common.h	267;"	d
CUBLAS_CSWAP	Accelerator/fortran_thunking.c	/^void CUBLAS_CSWAP (const int *n, cuComplex *x, const int *incx, cuComplex *y,$/;"	f
CUBLAS_CSYMM	Accelerator/fortran.c	/^void CUBLAS_CSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_CSYMM	Accelerator/fortran_common.h	132;"	d
CUBLAS_CSYMM	Accelerator/fortran_common.h	299;"	d
CUBLAS_CSYMM	Accelerator/fortran_thunking.c	/^void CUBLAS_CSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_CSYR2K	Accelerator/fortran.c	/^void CUBLAS_CSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_CSYR2K	Accelerator/fortran_common.h	138;"	d
CUBLAS_CSYR2K	Accelerator/fortran_common.h	305;"	d
CUBLAS_CSYR2K	Accelerator/fortran_thunking.c	/^void CUBLAS_CSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_CSYRK	Accelerator/fortran.c	/^void CUBLAS_CSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_CSYRK	Accelerator/fortran_common.h	136;"	d
CUBLAS_CSYRK	Accelerator/fortran_common.h	303;"	d
CUBLAS_CSYRK	Accelerator/fortran_thunking.c	/^void CUBLAS_CSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_CTBMV	Accelerator/fortran.c	/^void CUBLAS_CTBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTBMV	Accelerator/fortran_common.h	204;"	d
CUBLAS_CTBMV	Accelerator/fortran_common.h	370;"	d
CUBLAS_CTBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CTBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTBSV	Accelerator/fortran.c	/^void CUBLAS_CTBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTBSV	Accelerator/fortran_common.h	207;"	d
CUBLAS_CTBSV	Accelerator/fortran_common.h	373;"	d
CUBLAS_CTBSV	Accelerator/fortran_thunking.c	/^void CUBLAS_CTBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTPMV	Accelerator/fortran.c	/^void CUBLAS_CTPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTPMV	Accelerator/fortran_common.h	205;"	d
CUBLAS_CTPMV	Accelerator/fortran_common.h	371;"	d
CUBLAS_CTPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CTPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTPSV	Accelerator/fortran.c	/^void CUBLAS_CTPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTPSV	Accelerator/fortran_common.h	208;"	d
CUBLAS_CTPSV	Accelerator/fortran_common.h	374;"	d
CUBLAS_CTPSV	Accelerator/fortran_thunking.c	/^void CUBLAS_CTPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTRMM	Accelerator/fortran.c	/^void CUBLAS_CTRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_CTRMM	Accelerator/fortran_common.h	133;"	d
CUBLAS_CTRMM	Accelerator/fortran_common.h	300;"	d
CUBLAS_CTRMM	Accelerator/fortran_thunking.c	/^void CUBLAS_CTRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_CTRMV	Accelerator/fortran.c	/^void CUBLAS_CTRMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTRMV	Accelerator/fortran_common.h	102;"	d
CUBLAS_CTRMV	Accelerator/fortran_common.h	269;"	d
CUBLAS_CTRMV	Accelerator/fortran_thunking.c	/^void CUBLAS_CTRMV (const char *uplo, const char *trans,$/;"	f
CUBLAS_CTRSM	Accelerator/fortran.c	/^void CUBLAS_CTRSM ( const char *side, const char *uplo, const char *transa, $/;"	f
CUBLAS_CTRSM	Accelerator/fortran_common.h	134;"	d
CUBLAS_CTRSM	Accelerator/fortran_common.h	301;"	d
CUBLAS_CTRSM	Accelerator/fortran_thunking.c	/^void CUBLAS_CTRSM ( const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_CTRSV	Accelerator/fortran.c	/^void CUBLAS_CTRSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_CTRSV	Accelerator/fortran_common.h	206;"	d
CUBLAS_CTRSV	Accelerator/fortran_common.h	372;"	d
CUBLAS_CTRSV	Accelerator/fortran_thunking.c	/^void CUBLAS_CTRSV (const char *uplo, const char *trans, const char *diag, $/;"	f
CUBLAS_DASUM	Accelerator/fortran.c	/^double CUBLAS_DASUM (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_DASUM	Accelerator/fortran_common.h	141;"	d
CUBLAS_DASUM	Accelerator/fortran_common.h	308;"	d
CUBLAS_DASUM	Accelerator/fortran_thunking.c	/^double CUBLAS_DASUM (const int *n, const double *x, const int *incx)$/;"	f
CUBLAS_DAXPY	Accelerator/fortran.c	/^void CUBLAS_DAXPY (const int *n, const double *alpha, const devptr_t *devPtrx, $/;"	f
CUBLAS_DAXPY	Accelerator/fortran_common.h	142;"	d
CUBLAS_DAXPY	Accelerator/fortran_common.h	309;"	d
CUBLAS_DAXPY	Accelerator/fortran_thunking.c	/^void CUBLAS_DAXPY (const int *n, const double *alpha, const double *x, $/;"	f
CUBLAS_DCOPY	Accelerator/fortran.c	/^void CUBLAS_DCOPY (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_DCOPY	Accelerator/fortran_common.h	143;"	d
CUBLAS_DCOPY	Accelerator/fortran_common.h	310;"	d
CUBLAS_DCOPY	Accelerator/fortran_thunking.c	/^void CUBLAS_DCOPY (const int *n, const double *x, const int *incx, double *y,$/;"	f
CUBLAS_DDOT	Accelerator/fortran.c	/^double CUBLAS_DDOT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_DDOT	Accelerator/fortran_common.h	144;"	d
CUBLAS_DDOT	Accelerator/fortran_common.h	311;"	d
CUBLAS_DDOT	Accelerator/fortran_thunking.c	/^double CUBLAS_DDOT (const int *n, const double *x, const int *incx, double *y,$/;"	f
CUBLAS_DGBMV	Accelerator/fortran.c	/^void CUBLAS_DGBMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_DGBMV	Accelerator/fortran_common.h	165;"	d
CUBLAS_DGBMV	Accelerator/fortran_common.h	332;"	d
CUBLAS_DGBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DGBMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_DGEMM	Accelerator/fortran.c	/^void CUBLAS_DGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_DGEMM	Accelerator/fortran_common.h	182;"	d
CUBLAS_DGEMM	Accelerator/fortran_common.h	349;"	d
CUBLAS_DGEMM	Accelerator/fortran_thunking.c	/^void CUBLAS_DGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_DGEMV	Accelerator/fortran.c	/^void CUBLAS_DGEMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_DGEMV	Accelerator/fortran_common.h	166;"	d
CUBLAS_DGEMV	Accelerator/fortran_common.h	333;"	d
CUBLAS_DGEMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DGEMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_DGER	Accelerator/fortran.c	/^void CUBLAS_DGER (const int *m, const int *n, const double *alpha, $/;"	f
CUBLAS_DGER	Accelerator/fortran_common.h	168;"	d
CUBLAS_DGER	Accelerator/fortran_common.h	335;"	d
CUBLAS_DGER	Accelerator/fortran_thunking.c	/^void CUBLAS_DGER (const int *m, const int *n, const double *alpha, $/;"	f
CUBLAS_DNRM2	Accelerator/fortran.c	/^double CUBLAS_DNRM2 (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_DNRM2	Accelerator/fortran_common.h	145;"	d
CUBLAS_DNRM2	Accelerator/fortran_common.h	312;"	d
CUBLAS_DNRM2	Accelerator/fortran_thunking.c	/^double CUBLAS_DNRM2 (const int *n, const double *x, const int *incx)$/;"	f
CUBLAS_DROT	Accelerator/fortran.c	/^void CUBLAS_DROT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_DROT	Accelerator/fortran_common.h	146;"	d
CUBLAS_DROT	Accelerator/fortran_common.h	313;"	d
CUBLAS_DROT	Accelerator/fortran_thunking.c	/^void CUBLAS_DROT (const int *n, double *x, const int *incx, double *y, $/;"	f
CUBLAS_DROTG	Accelerator/fortran.c	/^void CUBLAS_DROTG (double *sa, double *sb, double *sc, double *ss)$/;"	f
CUBLAS_DROTG	Accelerator/fortran_common.h	147;"	d
CUBLAS_DROTG	Accelerator/fortran_common.h	314;"	d
CUBLAS_DROTG	Accelerator/fortran_thunking.c	/^void CUBLAS_DROTG (double *sa, double *sb, double *sc, double *ss)$/;"	f
CUBLAS_DROTM	Accelerator/fortran.c	/^void CUBLAS_DROTM (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_DROTM	Accelerator/fortran_common.h	148;"	d
CUBLAS_DROTM	Accelerator/fortran_common.h	315;"	d
CUBLAS_DROTM	Accelerator/fortran_thunking.c	/^void CUBLAS_DROTM (const int *n, double *x, const int *incx, double *y, $/;"	f
CUBLAS_DROTMG	Accelerator/fortran.c	/^void CUBLAS_DROTMG (double *sd1, double *sd2, double *sx1, const double *sy1,$/;"	f
CUBLAS_DROTMG	Accelerator/fortran_common.h	149;"	d
CUBLAS_DROTMG	Accelerator/fortran_common.h	316;"	d
CUBLAS_DROTMG	Accelerator/fortran_thunking.c	/^void CUBLAS_DROTMG (double *sd1, double *sd2, double *sx1, const double *sy1,$/;"	f
CUBLAS_DSBMV	Accelerator/fortran.c	/^void CUBLAS_DSBMV (const char *uplo, const int *n, const int *k,$/;"	f
CUBLAS_DSBMV	Accelerator/fortran_common.h	169;"	d
CUBLAS_DSBMV	Accelerator/fortran_common.h	336;"	d
CUBLAS_DSBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DSBMV (const char *uplo, const int *n, const int *k, $/;"	f
CUBLAS_DSCAL	Accelerator/fortran.c	/^void CUBLAS_DSCAL (const int *n, const double *alpha, const devptr_t *devPtrx,$/;"	f
CUBLAS_DSCAL	Accelerator/fortran_common.h	150;"	d
CUBLAS_DSCAL	Accelerator/fortran_common.h	317;"	d
CUBLAS_DSCAL	Accelerator/fortran_thunking.c	/^void CUBLAS_DSCAL (const int *n, const double *alpha, double *x, $/;"	f
CUBLAS_DSPMV	Accelerator/fortran.c	/^void CUBLAS_DSPMV (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSPMV	Accelerator/fortran_common.h	170;"	d
CUBLAS_DSPMV	Accelerator/fortran_common.h	337;"	d
CUBLAS_DSPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DSPMV (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSPR	Accelerator/fortran.c	/^void CUBLAS_DSPR (const char *uplo, const int *n, const double *alpha, $/;"	f
CUBLAS_DSPR	Accelerator/fortran_common.h	171;"	d
CUBLAS_DSPR	Accelerator/fortran_common.h	338;"	d
CUBLAS_DSPR	Accelerator/fortran_thunking.c	/^void CUBLAS_DSPR (const char *uplo, const int *n, const double *alpha, $/;"	f
CUBLAS_DSPR2	Accelerator/fortran.c	/^void CUBLAS_DSPR2 (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSPR2	Accelerator/fortran_common.h	172;"	d
CUBLAS_DSPR2	Accelerator/fortran_common.h	339;"	d
CUBLAS_DSPR2	Accelerator/fortran_thunking.c	/^void CUBLAS_DSPR2 (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSWAP	Accelerator/fortran.c	/^void CUBLAS_DSWAP (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_DSWAP	Accelerator/fortran_common.h	151;"	d
CUBLAS_DSWAP	Accelerator/fortran_common.h	318;"	d
CUBLAS_DSWAP	Accelerator/fortran_thunking.c	/^void CUBLAS_DSWAP (const int *n, double *x, const int *incx, double *y, $/;"	f
CUBLAS_DSYMM	Accelerator/fortran.c	/^void CUBLAS_DSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_DSYMM	Accelerator/fortran_common.h	183;"	d
CUBLAS_DSYMM	Accelerator/fortran_common.h	350;"	d
CUBLAS_DSYMM	Accelerator/fortran_thunking.c	/^void CUBLAS_DSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_DSYMV	Accelerator/fortran.c	/^void CUBLAS_DSYMV (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSYMV	Accelerator/fortran_common.h	173;"	d
CUBLAS_DSYMV	Accelerator/fortran_common.h	340;"	d
CUBLAS_DSYMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DSYMV (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSYR	Accelerator/fortran.c	/^void CUBLAS_DSYR (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSYR	Accelerator/fortran_common.h	174;"	d
CUBLAS_DSYR	Accelerator/fortran_common.h	341;"	d
CUBLAS_DSYR	Accelerator/fortran_thunking.c	/^void CUBLAS_DSYR (const char *uplo, const int *n, const double *alpha, $/;"	f
CUBLAS_DSYR2	Accelerator/fortran.c	/^void CUBLAS_DSYR2 (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSYR2	Accelerator/fortran_common.h	175;"	d
CUBLAS_DSYR2	Accelerator/fortran_common.h	342;"	d
CUBLAS_DSYR2	Accelerator/fortran_thunking.c	/^void CUBLAS_DSYR2 (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_DSYR2K	Accelerator/fortran.c	/^void CUBLAS_DSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_DSYR2K	Accelerator/fortran_common.h	184;"	d
CUBLAS_DSYR2K	Accelerator/fortran_common.h	351;"	d
CUBLAS_DSYR2K	Accelerator/fortran_thunking.c	/^void CUBLAS_DSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_DSYRK	Accelerator/fortran.c	/^void CUBLAS_DSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_DSYRK	Accelerator/fortran_common.h	185;"	d
CUBLAS_DSYRK	Accelerator/fortran_thunking.c	/^void CUBLAS_DSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_DTBMV	Accelerator/fortran.c	/^void CUBLAS_DTBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTBMV	Accelerator/fortran_common.h	176;"	d
CUBLAS_DTBMV	Accelerator/fortran_common.h	343;"	d
CUBLAS_DTBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DTBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTBSV	Accelerator/fortran.c	/^void CUBLAS_DTBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTBSV	Accelerator/fortran_common.h	177;"	d
CUBLAS_DTBSV	Accelerator/fortran_common.h	344;"	d
CUBLAS_DTBSV	Accelerator/fortran_thunking.c	/^void CUBLAS_DTBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTPMV	Accelerator/fortran.c	/^void CUBLAS_DTPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTPMV	Accelerator/fortran_common.h	178;"	d
CUBLAS_DTPMV	Accelerator/fortran_common.h	345;"	d
CUBLAS_DTPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DTPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTPSV	Accelerator/fortran.c	/^void CUBLAS_DTPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTPSV	Accelerator/fortran_common.h	179;"	d
CUBLAS_DTPSV	Accelerator/fortran_common.h	346;"	d
CUBLAS_DTPSV	Accelerator/fortran_thunking.c	/^void CUBLAS_DTPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTRMM	Accelerator/fortran.c	/^void CUBLAS_DTRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_DTRMM	Accelerator/fortran_common.h	187;"	d
CUBLAS_DTRMM	Accelerator/fortran_common.h	353;"	d
CUBLAS_DTRMM	Accelerator/fortran_thunking.c	/^void CUBLAS_DTRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_DTRMV	Accelerator/fortran.c	/^void CUBLAS_DTRMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTRMV	Accelerator/fortran_common.h	180;"	d
CUBLAS_DTRMV	Accelerator/fortran_common.h	347;"	d
CUBLAS_DTRMV	Accelerator/fortran_thunking.c	/^void CUBLAS_DTRMV (const char *uplo, const char *trans,$/;"	f
CUBLAS_DTRSM	Accelerator/fortran.c	/^void CUBLAS_DTRSM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_DTRSM	Accelerator/fortran_common.h	188;"	d
CUBLAS_DTRSM	Accelerator/fortran_common.h	354;"	d
CUBLAS_DTRSM	Accelerator/fortran_thunking.c	/^void CUBLAS_DTRSM (const char *side, const char *uplo, const char *transa, $/;"	f
CUBLAS_DTRSV	Accelerator/fortran.c	/^void CUBLAS_DTRSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_DTRSV	Accelerator/fortran_common.h	181;"	d
CUBLAS_DTRSV	Accelerator/fortran_common.h	348;"	d
CUBLAS_DTRSV	Accelerator/fortran_thunking.c	/^void CUBLAS_DTRSV (const char *uplo, const char *trans, const char *diag, $/;"	f
CUBLAS_DZASUM	Accelerator/fortran.c	/^double CUBLAS_DZASUM (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_DZASUM	Accelerator/fortran_common.h	163;"	d
CUBLAS_DZASUM	Accelerator/fortran_common.h	330;"	d
CUBLAS_DZASUM	Accelerator/fortran_thunking.c	/^double CUBLAS_DZASUM (const int *n, const cuDoubleComplex *x, const int *incx)$/;"	f
CUBLAS_DZNRM2	Accelerator/fortran.c	/^double CUBLAS_DZNRM2 (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_DZNRM2	Accelerator/fortran_common.h	164;"	d
CUBLAS_DZNRM2	Accelerator/fortran_common.h	331;"	d
CUBLAS_DZNRM2	Accelerator/fortran_thunking.c	/^double CUBLAS_DZNRM2 (const int *n, const cuDoubleComplex *x, const int *incx)$/;"	f
CUBLAS_FORTRAN_COMPILER	Accelerator/fortran_common.h	56;"	d
CUBLAS_FORTRAN_COMPILER	Accelerator/fortran_common.h	58;"	d
CUBLAS_FORTRAN_COMPILER	Accelerator/fortran_common.h	60;"	d
CUBLAS_FREE	Accelerator/fortran.c	/^int CUBLAS_FREE (const devptr_t *devicePtr)$/;"	f
CUBLAS_FREE	Accelerator/fortran_common.h	239;"	d
CUBLAS_FREE	Accelerator/fortran_common.h	74;"	d
CUBLAS_G77	Accelerator/fortran_common.h	50;"	d
CUBLAS_G95	Accelerator/fortran_common.h	52;"	d
CUBLAS_GET_ERROR	Accelerator/fortran.c	/^int CUBLAS_GET_ERROR (void)$/;"	f
CUBLAS_GET_ERROR	Accelerator/fortran_common.h	244;"	d
CUBLAS_GET_ERROR	Accelerator/fortran_common.h	79;"	d
CUBLAS_GET_MATRIX	Accelerator/fortran.c	/^int CUBLAS_GET_MATRIX (const int *rows, const int *cols, const int *elemSize,$/;"	f
CUBLAS_GET_MATRIX	Accelerator/fortran_common.h	243;"	d
CUBLAS_GET_MATRIX	Accelerator/fortran_common.h	78;"	d
CUBLAS_GET_VECTOR	Accelerator/fortran.c	/^int CUBLAS_GET_VECTOR (const int *n, const int *elemSize, const devptr_t *x,$/;"	f
CUBLAS_GET_VECTOR	Accelerator/fortran_common.h	241;"	d
CUBLAS_GET_VECTOR	Accelerator/fortran_common.h	76;"	d
CUBLAS_ICAMAX	Accelerator/fortran.c	/^int CUBLAS_ICAMAX (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_ICAMAX	Accelerator/fortran_common.h	105;"	d
CUBLAS_ICAMAX	Accelerator/fortran_common.h	272;"	d
CUBLAS_ICAMAX	Accelerator/fortran_thunking.c	/^int CUBLAS_ICAMAX (const int *n, const cuComplex *x, const int *incx)$/;"	f
CUBLAS_ICAMIN	Accelerator/fortran.c	/^int CUBLAS_ICAMIN (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_ICAMIN	Accelerator/fortran_thunking.c	/^int CUBLAS_ICAMIN (const int *n, const cuComplex *x, const int *incx)$/;"	f
CUBLAS_IDAMAX	Accelerator/fortran.c	/^int CUBLAS_IDAMAX (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_IDAMAX	Accelerator/fortran_common.h	139;"	d
CUBLAS_IDAMAX	Accelerator/fortran_common.h	306;"	d
CUBLAS_IDAMAX	Accelerator/fortran_thunking.c	/^int CUBLAS_IDAMAX (const int *n, const double *x, const int *incx)$/;"	f
CUBLAS_IDAMIN	Accelerator/fortran.c	/^int CUBLAS_IDAMIN (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_IDAMIN	Accelerator/fortran_common.h	140;"	d
CUBLAS_IDAMIN	Accelerator/fortran_common.h	307;"	d
CUBLAS_IDAMIN	Accelerator/fortran_thunking.c	/^int CUBLAS_IDAMIN (const int *n, const double *x, const int *incx)$/;"	f
CUBLAS_INIT	Accelerator/fortran.c	/^int CUBLAS_INIT (void) $/;"	f
CUBLAS_INIT	Accelerator/fortran_common.h	236;"	d
CUBLAS_INIT	Accelerator/fortran_common.h	71;"	d
CUBLAS_INIT	Accelerator/fortran_thunking.c	/^int CUBLAS_INIT (void) $/;"	f
CUBLAS_INTEL_FORTRAN	Accelerator/fortran_common.h	51;"	d
CUBLAS_ISAMAX	Accelerator/fortran.c	/^int CUBLAS_ISAMAX (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_ISAMAX	Accelerator/fortran_common.h	246;"	d
CUBLAS_ISAMAX	Accelerator/fortran_common.h	81;"	d
CUBLAS_ISAMAX	Accelerator/fortran_thunking.c	/^int CUBLAS_ISAMAX (const int *n, const float *x, const int *incx)$/;"	f
CUBLAS_ISAMIN	Accelerator/fortran.c	/^int CUBLAS_ISAMIN (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_ISAMIN	Accelerator/fortran_common.h	247;"	d
CUBLAS_ISAMIN	Accelerator/fortran_common.h	82;"	d
CUBLAS_ISAMIN	Accelerator/fortran_thunking.c	/^int CUBLAS_ISAMIN (const int *n, const float *x, const int *incx)$/;"	f
CUBLAS_IZAMAX	Accelerator/fortran.c	/^int CUBLAS_IZAMAX (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_IZAMAX	Accelerator/fortran_common.h	162;"	d
CUBLAS_IZAMAX	Accelerator/fortran_common.h	329;"	d
CUBLAS_IZAMAX	Accelerator/fortran_thunking.c	/^int CUBLAS_IZAMAX (const int *n, const cuDoubleComplex *x, const int *incx)$/;"	f
CUBLAS_IZAMIN	Accelerator/fortran.c	/^int CUBLAS_IZAMIN (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_IZAMIN	Accelerator/fortran_thunking.c	/^int CUBLAS_IZAMIN (const int *n, const cuDoubleComplex *x, const int *incx)$/;"	f
CUBLAS_SASUM	Accelerator/fortran.c	/^double CUBLAS_SASUM (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_SASUM	Accelerator/fortran_common.h	248;"	d
CUBLAS_SASUM	Accelerator/fortran_common.h	83;"	d
CUBLAS_SASUM	Accelerator/fortran_thunking.c	/^double CUBLAS_SASUM (const int *n, const float *x, const int *incx)$/;"	f
CUBLAS_SAXPY	Accelerator/fortran.c	/^void CUBLAS_SAXPY (const int *n, const float *alpha, const devptr_t *devPtrx, $/;"	f
CUBLAS_SAXPY	Accelerator/fortran_common.h	249;"	d
CUBLAS_SAXPY	Accelerator/fortran_common.h	84;"	d
CUBLAS_SAXPY	Accelerator/fortran_thunking.c	/^void CUBLAS_SAXPY (const int *n, const float *alpha, const float *x, $/;"	f
CUBLAS_SCASUM	Accelerator/fortran.c	/^double CUBLAS_SCASUM (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_SCASUM	Accelerator/fortran_common.h	106;"	d
CUBLAS_SCASUM	Accelerator/fortran_common.h	273;"	d
CUBLAS_SCASUM	Accelerator/fortran_thunking.c	/^double CUBLAS_SCASUM (const int *n, const cuComplex *x, const int *incx)$/;"	f
CUBLAS_SCNRM2	Accelerator/fortran.c	/^double CUBLAS_SCNRM2 (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_SCNRM2	Accelerator/fortran_common.h	107;"	d
CUBLAS_SCNRM2	Accelerator/fortran_common.h	274;"	d
CUBLAS_SCNRM2	Accelerator/fortran_thunking.c	/^double CUBLAS_SCNRM2 (const int *n, const cuComplex *x, const int *incx)$/;"	f
CUBLAS_SCOPY	Accelerator/fortran.c	/^void CUBLAS_SCOPY (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_SCOPY	Accelerator/fortran_common.h	250;"	d
CUBLAS_SCOPY	Accelerator/fortran_common.h	85;"	d
CUBLAS_SCOPY	Accelerator/fortran_thunking.c	/^void CUBLAS_SCOPY (const int *n, const float *x, const int *incx, float *y,$/;"	f
CUBLAS_SDOT	Accelerator/fortran.c	/^double CUBLAS_SDOT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_SDOT	Accelerator/fortran_common.h	251;"	d
CUBLAS_SDOT	Accelerator/fortran_common.h	86;"	d
CUBLAS_SDOT	Accelerator/fortran_thunking.c	/^double CUBLAS_SDOT (const int *n, const float *x, const int *incx, float *y,$/;"	f
CUBLAS_SET_MATRIX	Accelerator/fortran.c	/^int CUBLAS_SET_MATRIX (const int *rows, const int *cols, const int *elemSize,$/;"	f
CUBLAS_SET_MATRIX	Accelerator/fortran_common.h	242;"	d
CUBLAS_SET_MATRIX	Accelerator/fortran_common.h	77;"	d
CUBLAS_SET_VECTOR	Accelerator/fortran.c	/^int CUBLAS_SET_VECTOR (const int *n, const int *elemSize, const void *x,$/;"	f
CUBLAS_SET_VECTOR	Accelerator/fortran_common.h	240;"	d
CUBLAS_SET_VECTOR	Accelerator/fortran_common.h	75;"	d
CUBLAS_SGBMV	Accelerator/fortran.c	/^void CUBLAS_SGBMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_SGBMV	Accelerator/fortran_common.h	108;"	d
CUBLAS_SGBMV	Accelerator/fortran_common.h	275;"	d
CUBLAS_SGBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_SGBMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_SGEMM	Accelerator/fortran.c	/^void CUBLAS_SGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_SGEMM	Accelerator/fortran_common.h	124;"	d
CUBLAS_SGEMM	Accelerator/fortran_common.h	291;"	d
CUBLAS_SGEMM	Accelerator/fortran_thunking.c	/^void CUBLAS_SGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_SGEMV	Accelerator/fortran.c	/^void CUBLAS_SGEMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_SGEMV	Accelerator/fortran_common.h	109;"	d
CUBLAS_SGEMV	Accelerator/fortran_common.h	276;"	d
CUBLAS_SGEMV	Accelerator/fortran_thunking.c	/^void CUBLAS_SGEMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_SGER	Accelerator/fortran.c	/^void CUBLAS_SGER (const int *m, const int *n, const float *alpha, $/;"	f
CUBLAS_SGER	Accelerator/fortran_common.h	110;"	d
CUBLAS_SGER	Accelerator/fortran_common.h	277;"	d
CUBLAS_SGER	Accelerator/fortran_thunking.c	/^void CUBLAS_SGER (const int *m, const int *n, const float *alpha, $/;"	f
CUBLAS_SHUTDOWN	Accelerator/fortran.c	/^int CUBLAS_SHUTDOWN (void) $/;"	f
CUBLAS_SHUTDOWN	Accelerator/fortran_common.h	237;"	d
CUBLAS_SHUTDOWN	Accelerator/fortran_common.h	72;"	d
CUBLAS_SHUTDOWN	Accelerator/fortran_thunking.c	/^int CUBLAS_SHUTDOWN (void) $/;"	f
CUBLAS_SNRM2	Accelerator/fortran.c	/^double CUBLAS_SNRM2 (const int *n, const devptr_t *devPtrx, const int *incx)$/;"	f
CUBLAS_SNRM2	Accelerator/fortran_common.h	252;"	d
CUBLAS_SNRM2	Accelerator/fortran_common.h	87;"	d
CUBLAS_SNRM2	Accelerator/fortran_thunking.c	/^double CUBLAS_SNRM2 (const int *n, const float *x, const int *incx)$/;"	f
CUBLAS_SROT	Accelerator/fortran.c	/^void CUBLAS_SROT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_SROT	Accelerator/fortran_common.h	253;"	d
CUBLAS_SROT	Accelerator/fortran_common.h	88;"	d
CUBLAS_SROT	Accelerator/fortran_thunking.c	/^void CUBLAS_SROT (const int *n, float *x, const int *incx, float *y, $/;"	f
CUBLAS_SROTG	Accelerator/fortran.c	/^void CUBLAS_SROTG (float *sa, float *sb, float *sc, float *ss)$/;"	f
CUBLAS_SROTG	Accelerator/fortran_common.h	254;"	d
CUBLAS_SROTG	Accelerator/fortran_common.h	89;"	d
CUBLAS_SROTG	Accelerator/fortran_thunking.c	/^void CUBLAS_SROTG (float *sa, float *sb, float *sc, float *ss)$/;"	f
CUBLAS_SROTM	Accelerator/fortran.c	/^void CUBLAS_SROTM (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_SROTM	Accelerator/fortran_common.h	255;"	d
CUBLAS_SROTM	Accelerator/fortran_common.h	90;"	d
CUBLAS_SROTM	Accelerator/fortran_thunking.c	/^void CUBLAS_SROTM (const int *n, float *x, const int *incx, float *y, $/;"	f
CUBLAS_SROTMG	Accelerator/fortran.c	/^void CUBLAS_SROTMG (float *sd1, float *sd2, float *sx1, const float *sy1,$/;"	f
CUBLAS_SROTMG	Accelerator/fortran_common.h	256;"	d
CUBLAS_SROTMG	Accelerator/fortran_common.h	91;"	d
CUBLAS_SROTMG	Accelerator/fortran_thunking.c	/^void CUBLAS_SROTMG (float *sd1, float *sd2, float *sx1, const float *sy1,$/;"	f
CUBLAS_SSBMV	Accelerator/fortran.c	/^void CUBLAS_SSBMV (const char *uplo, const int *n, const int *k,$/;"	f
CUBLAS_SSBMV	Accelerator/fortran_common.h	111;"	d
CUBLAS_SSBMV	Accelerator/fortran_common.h	278;"	d
CUBLAS_SSBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_SSBMV (const char *uplo, const int *n, const int *k, $/;"	f
CUBLAS_SSCAL	Accelerator/fortran.c	/^void CUBLAS_SSCAL (const int *n, const float *alpha, const devptr_t *devPtrx,$/;"	f
CUBLAS_SSCAL	Accelerator/fortran_common.h	257;"	d
CUBLAS_SSCAL	Accelerator/fortran_common.h	92;"	d
CUBLAS_SSCAL	Accelerator/fortran_thunking.c	/^void CUBLAS_SSCAL (const int *n, const float *alpha, float *x, const int *incx)$/;"	f
CUBLAS_SSPMV	Accelerator/fortran.c	/^void CUBLAS_SSPMV (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSPMV	Accelerator/fortran_common.h	112;"	d
CUBLAS_SSPMV	Accelerator/fortran_common.h	279;"	d
CUBLAS_SSPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_SSPMV (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSPR	Accelerator/fortran.c	/^void CUBLAS_SSPR (const char *uplo, const int *n, const float *alpha, $/;"	f
CUBLAS_SSPR	Accelerator/fortran_common.h	113;"	d
CUBLAS_SSPR	Accelerator/fortran_common.h	280;"	d
CUBLAS_SSPR	Accelerator/fortran_thunking.c	/^void CUBLAS_SSPR (const char *uplo, const int *n, const float *alpha, $/;"	f
CUBLAS_SSPR2	Accelerator/fortran.c	/^void CUBLAS_SSPR2 (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSPR2	Accelerator/fortran_common.h	114;"	d
CUBLAS_SSPR2	Accelerator/fortran_common.h	281;"	d
CUBLAS_SSPR2	Accelerator/fortran_thunking.c	/^void CUBLAS_SSPR2 (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSWAP	Accelerator/fortran.c	/^void CUBLAS_SSWAP (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_SSWAP	Accelerator/fortran_common.h	258;"	d
CUBLAS_SSWAP	Accelerator/fortran_common.h	93;"	d
CUBLAS_SSWAP	Accelerator/fortran_thunking.c	/^void CUBLAS_SSWAP (const int *n, float *x, const int *incx, float *y, $/;"	f
CUBLAS_SSYMM	Accelerator/fortran.c	/^void CUBLAS_SSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_SSYMM	Accelerator/fortran_common.h	125;"	d
CUBLAS_SSYMM	Accelerator/fortran_common.h	292;"	d
CUBLAS_SSYMM	Accelerator/fortran_thunking.c	/^void CUBLAS_SSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_SSYMV	Accelerator/fortran.c	/^void CUBLAS_SSYMV (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSYMV	Accelerator/fortran_common.h	115;"	d
CUBLAS_SSYMV	Accelerator/fortran_common.h	282;"	d
CUBLAS_SSYMV	Accelerator/fortran_thunking.c	/^void CUBLAS_SSYMV (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSYR	Accelerator/fortran.c	/^void CUBLAS_SSYR (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSYR	Accelerator/fortran_common.h	116;"	d
CUBLAS_SSYR	Accelerator/fortran_common.h	283;"	d
CUBLAS_SSYR	Accelerator/fortran_thunking.c	/^void CUBLAS_SSYR (const char *uplo, const int *n, const float *alpha, $/;"	f
CUBLAS_SSYR2	Accelerator/fortran.c	/^void CUBLAS_SSYR2 (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSYR2	Accelerator/fortran_common.h	117;"	d
CUBLAS_SSYR2	Accelerator/fortran_common.h	284;"	d
CUBLAS_SSYR2	Accelerator/fortran_thunking.c	/^void CUBLAS_SSYR2 (const char *uplo, const int *n, const float *alpha,$/;"	f
CUBLAS_SSYR2K	Accelerator/fortran.c	/^void CUBLAS_SSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_SSYR2K	Accelerator/fortran_common.h	126;"	d
CUBLAS_SSYR2K	Accelerator/fortran_common.h	293;"	d
CUBLAS_SSYR2K	Accelerator/fortran_thunking.c	/^void CUBLAS_SSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_SSYRK	Accelerator/fortran.c	/^void CUBLAS_SSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_SSYRK	Accelerator/fortran_common.h	127;"	d
CUBLAS_SSYRK	Accelerator/fortran_common.h	294;"	d
CUBLAS_SSYRK	Accelerator/fortran_thunking.c	/^void CUBLAS_SSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_STBMV	Accelerator/fortran.c	/^void CUBLAS_STBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STBMV	Accelerator/fortran_common.h	118;"	d
CUBLAS_STBMV	Accelerator/fortran_common.h	285;"	d
CUBLAS_STBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_STBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STBSV	Accelerator/fortran.c	/^void CUBLAS_STBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STBSV	Accelerator/fortran_common.h	119;"	d
CUBLAS_STBSV	Accelerator/fortran_common.h	286;"	d
CUBLAS_STBSV	Accelerator/fortran_thunking.c	/^void CUBLAS_STBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STPMV	Accelerator/fortran.c	/^void CUBLAS_STPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STPMV	Accelerator/fortran_common.h	120;"	d
CUBLAS_STPMV	Accelerator/fortran_common.h	287;"	d
CUBLAS_STPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_STPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STPSV	Accelerator/fortran.c	/^void CUBLAS_STPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STPSV	Accelerator/fortran_common.h	121;"	d
CUBLAS_STPSV	Accelerator/fortran_common.h	288;"	d
CUBLAS_STPSV	Accelerator/fortran_thunking.c	/^void CUBLAS_STPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STRMM	Accelerator/fortran.c	/^void CUBLAS_STRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_STRMM	Accelerator/fortran_common.h	128;"	d
CUBLAS_STRMM	Accelerator/fortran_common.h	295;"	d
CUBLAS_STRMM	Accelerator/fortran_thunking.c	/^void CUBLAS_STRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_STRMV	Accelerator/fortran.c	/^void CUBLAS_STRMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STRMV	Accelerator/fortran_common.h	122;"	d
CUBLAS_STRMV	Accelerator/fortran_common.h	289;"	d
CUBLAS_STRMV	Accelerator/fortran_thunking.c	/^void CUBLAS_STRMV (const char *uplo, const char *trans,$/;"	f
CUBLAS_STRSM	Accelerator/fortran.c	/^void CUBLAS_STRSM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_STRSM	Accelerator/fortran_common.h	129;"	d
CUBLAS_STRSM	Accelerator/fortran_common.h	296;"	d
CUBLAS_STRSM	Accelerator/fortran_thunking.c	/^void CUBLAS_STRSM (const char *side, const char *uplo, const char *transa, $/;"	f
CUBLAS_STRSV	Accelerator/fortran.c	/^void CUBLAS_STRSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_STRSV	Accelerator/fortran_common.h	123;"	d
CUBLAS_STRSV	Accelerator/fortran_common.h	290;"	d
CUBLAS_STRSV	Accelerator/fortran_thunking.c	/^void CUBLAS_STRSV (const char *uplo, const char *trans, const char *diag, $/;"	f
CUBLAS_WRAPPER_ERROR_ALLOC	Accelerator/fortran_thunking.c	75;"	d	file:
CUBLAS_WRAPPER_ERROR_GET	Accelerator/fortran_thunking.c	77;"	d	file:
CUBLAS_WRAPPER_ERROR_NOERR	Accelerator/fortran_thunking.c	74;"	d	file:
CUBLAS_WRAPPER_ERROR_SET	Accelerator/fortran_thunking.c	76;"	d	file:
CUBLAS_WRAPPER_ERROR_STUB	Accelerator/fortran_thunking.c	78;"	d	file:
CUBLAS_XERBLA	Accelerator/fortran.c	/^void CUBLAS_XERBLA (const char *srName, int *info)$/;"	f
CUBLAS_XERBLA	Accelerator/fortran_common.h	245;"	d
CUBLAS_XERBLA	Accelerator/fortran_common.h	80;"	d
CUBLAS_ZAXPY	Accelerator/fortran.c	/^void CUBLAS_ZAXPY (const int *n, const cuDoubleComplex *alpha, $/;"	f
CUBLAS_ZAXPY	Accelerator/fortran_common.h	152;"	d
CUBLAS_ZAXPY	Accelerator/fortran_common.h	319;"	d
CUBLAS_ZAXPY	Accelerator/fortran_thunking.c	/^void CUBLAS_ZAXPY (const int *n, const cuDoubleComplex *alpha, const cuDoubleComplex *x, $/;"	f
CUBLAS_ZCOPY	Accelerator/fortran.c	/^void CUBLAS_ZCOPY (const int *n, const devptr_t *devPtrx, const int *incx,$/;"	f
CUBLAS_ZCOPY	Accelerator/fortran_common.h	153;"	d
CUBLAS_ZCOPY	Accelerator/fortran_common.h	261;"	d
CUBLAS_ZCOPY	Accelerator/fortran_common.h	320;"	d
CUBLAS_ZCOPY	Accelerator/fortran_thunking.c	/^void CUBLAS_ZCOPY (const int *n, const cuDoubleComplex *x, const int *incx, $/;"	f
CUBLAS_ZDOTC	Accelerator/fortran.c	/^cuDoubleComplex CUBLAS_ZDOTC ( const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_ZDOTC	Accelerator/fortran.c	/^void CUBLAS_ZDOTC (cuDoubleComplex *retVal, const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_ZDOTC	Accelerator/fortran_common.h	161;"	d
CUBLAS_ZDOTC	Accelerator/fortran_common.h	328;"	d
CUBLAS_ZDOTC	Accelerator/fortran_thunking.c	/^cuDoubleComplex CUBLAS_ZDOTC ( const int *n, const cuDoubleComplex *x, $/;"	f
CUBLAS_ZDOTC	Accelerator/fortran_thunking.c	/^void CUBLAS_ZDOTC (cuDoubleComplex *retVal, const int *n, const cuDoubleComplex *x, $/;"	f
CUBLAS_ZDOTU	Accelerator/fortran.c	/^cuDoubleComplex CUBLAS_ZDOTU ( const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_ZDOTU	Accelerator/fortran.c	/^void CUBLAS_ZDOTU (cuDoubleComplex *retVal, const int *n, const devptr_t *devPtrx,$/;"	f
CUBLAS_ZDOTU	Accelerator/fortran_common.h	160;"	d
CUBLAS_ZDOTU	Accelerator/fortran_common.h	327;"	d
CUBLAS_ZDOTU	Accelerator/fortran_thunking.c	/^cuDoubleComplex CUBLAS_ZDOTU ( const int *n, const cuDoubleComplex *x, $/;"	f
CUBLAS_ZDOTU	Accelerator/fortran_thunking.c	/^void CUBLAS_ZDOTU (cuDoubleComplex *retVal, const int *n, const cuDoubleComplex *x, $/;"	f
CUBLAS_ZDROT	Accelerator/fortran.c	/^void CUBLAS_ZDROT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_ZDROT	Accelerator/fortran_common.h	157;"	d
CUBLAS_ZDROT	Accelerator/fortran_common.h	324;"	d
CUBLAS_ZDROT	Accelerator/fortran_thunking.c	/^void CUBLAS_ZDROT (const int *n, cuDoubleComplex *x, const int *incx, cuDoubleComplex *y, $/;"	f
CUBLAS_ZDSCAL	Accelerator/fortran.c	/^void CUBLAS_ZDSCAL (const int *n, const double *alpha, const devptr_t *devPtrx,$/;"	f
CUBLAS_ZDSCAL	Accelerator/fortran_common.h	158;"	d
CUBLAS_ZDSCAL	Accelerator/fortran_common.h	325;"	d
CUBLAS_ZDSCAL	Accelerator/fortran_thunking.c	/^void CUBLAS_ZDSCAL (const int *n, const double *alpha, cuDoubleComplex *x, $/;"	f
CUBLAS_ZGBMV	Accelerator/fortran.c	/^void CUBLAS_ZGBMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_ZGBMV	Accelerator/fortran_common.h	217;"	d
CUBLAS_ZGBMV	Accelerator/fortran_common.h	381;"	d
CUBLAS_ZGBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZGBMV (const char *trans, const int *m, const int *n, $/;"	f
CUBLAS_ZGEMM	Accelerator/fortran.c	/^void CUBLAS_ZGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_ZGEMM	Accelerator/fortran_common.h	189;"	d
CUBLAS_ZGEMM	Accelerator/fortran_common.h	355;"	d
CUBLAS_ZGEMM	Accelerator/fortran_thunking.c	/^void CUBLAS_ZGEMM (const char *transa, const char *transb, const int *m,$/;"	f
CUBLAS_ZGEMV	Accelerator/fortran.c	/^void CUBLAS_ZGEMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_ZGEMV	Accelerator/fortran_common.h	167;"	d
CUBLAS_ZGEMV	Accelerator/fortran_common.h	334;"	d
CUBLAS_ZGEMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZGEMV (const char *trans, const int *m, const int *n,$/;"	f
CUBLAS_ZGERC	Accelerator/fortran.c	/^void CUBLAS_ZGERC (const int *m, const int *n, const cuDoubleComplex *alpha, $/;"	f
CUBLAS_ZGERC	Accelerator/fortran_common.h	227;"	d
CUBLAS_ZGERC	Accelerator/fortran_common.h	391;"	d
CUBLAS_ZGERC	Accelerator/fortran_thunking.c	/^void CUBLAS_ZGERC (const int *m, const int *n, const cuDoubleComplex *alpha, $/;"	f
CUBLAS_ZGERU	Accelerator/fortran.c	/^void CUBLAS_ZGERU (const int *m, const int *n, const cuDoubleComplex *alpha, $/;"	f
CUBLAS_ZGERU	Accelerator/fortran_common.h	228;"	d
CUBLAS_ZGERU	Accelerator/fortran_common.h	392;"	d
CUBLAS_ZGERU	Accelerator/fortran_thunking.c	/^void CUBLAS_ZGERU (const int *m, const int *n, const cuDoubleComplex *alpha, $/;"	f
CUBLAS_ZHBMV	Accelerator/fortran.c	/^void CUBLAS_ZHBMV (const char *uplo, const int *n, const int *k,$/;"	f
CUBLAS_ZHBMV	Accelerator/fortran_common.h	219;"	d
CUBLAS_ZHBMV	Accelerator/fortran_common.h	383;"	d
CUBLAS_ZHBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHBMV (const char *uplo, const int *n, const int *k, $/;"	f
CUBLAS_ZHEMM	Accelerator/fortran.c	/^void CUBLAS_ZHEMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_ZHEMM	Accelerator/fortran_common.h	190;"	d
CUBLAS_ZHEMM	Accelerator/fortran_common.h	356;"	d
CUBLAS_ZHEMM	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHEMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_ZHEMV	Accelerator/fortran.c	/^void CUBLAS_ZHEMV (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHEMV	Accelerator/fortran_common.h	218;"	d
CUBLAS_ZHEMV	Accelerator/fortran_common.h	382;"	d
CUBLAS_ZHEMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHEMV (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHER	Accelerator/fortran.c	/^void CUBLAS_ZHER (const char *uplo, const int *n, const double *alpha,$/;"	f
CUBLAS_ZHER	Accelerator/fortran_common.h	229;"	d
CUBLAS_ZHER	Accelerator/fortran_common.h	393;"	d
CUBLAS_ZHER	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHER (const char *uplo, const int *n, const double *alpha, $/;"	f
CUBLAS_ZHER2	Accelerator/fortran.c	/^void CUBLAS_ZHER2 (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHER2	Accelerator/fortran_common.h	231;"	d
CUBLAS_ZHER2	Accelerator/fortran_common.h	395;"	d
CUBLAS_ZHER2	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHER2 (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHER2K	Accelerator/fortran.c	/^void CUBLAS_ZHER2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_ZHER2K	Accelerator/fortran_common.h	196;"	d
CUBLAS_ZHER2K	Accelerator/fortran_common.h	362;"	d
CUBLAS_ZHER2K	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHER2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_ZHERK	Accelerator/fortran.c	/^void CUBLAS_ZHERK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_ZHERK	Accelerator/fortran_common.h	194;"	d
CUBLAS_ZHERK	Accelerator/fortran_common.h	360;"	d
CUBLAS_ZHERK	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHERK (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_ZHPMV	Accelerator/fortran.c	/^void CUBLAS_ZHPMV (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHPMV	Accelerator/fortran_common.h	220;"	d
CUBLAS_ZHPMV	Accelerator/fortran_common.h	384;"	d
CUBLAS_ZHPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHPMV (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHPR	Accelerator/fortran.c	/^void CUBLAS_ZHPR (const char *uplo, const int *n, const double *alpha, $/;"	f
CUBLAS_ZHPR	Accelerator/fortran_common.h	230;"	d
CUBLAS_ZHPR	Accelerator/fortran_common.h	394;"	d
CUBLAS_ZHPR	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHPR (const char *uplo, const int *n, const double *alpha, $/;"	f
CUBLAS_ZHPR2	Accelerator/fortran.c	/^void CUBLAS_ZHPR2 (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZHPR2	Accelerator/fortran_common.h	232;"	d
CUBLAS_ZHPR2	Accelerator/fortran_common.h	396;"	d
CUBLAS_ZHPR2	Accelerator/fortran_thunking.c	/^void CUBLAS_ZHPR2 (const char *uplo, const int *n, const cuDoubleComplex *alpha,$/;"	f
CUBLAS_ZROT	Accelerator/fortran.c	/^void CUBLAS_ZROT (const int *n, const devptr_t *devPtrx, const int *incx, $/;"	f
CUBLAS_ZROT	Accelerator/fortran_common.h	154;"	d
CUBLAS_ZROT	Accelerator/fortran_common.h	321;"	d
CUBLAS_ZROT	Accelerator/fortran_thunking.c	/^void CUBLAS_ZROT (const int *n, cuDoubleComplex *x, const int *incx, cuDoubleComplex *y, $/;"	f
CUBLAS_ZROTG	Accelerator/fortran.c	/^void CUBLAS_ZROTG (cuDoubleComplex *ca, const cuDoubleComplex *cb, double *sc,$/;"	f
CUBLAS_ZROTG	Accelerator/fortran_common.h	155;"	d
CUBLAS_ZROTG	Accelerator/fortran_common.h	322;"	d
CUBLAS_ZROTG	Accelerator/fortran_thunking.c	/^void CUBLAS_ZROTG (cuDoubleComplex *ca, const cuDoubleComplex *cb, double *sc,$/;"	f
CUBLAS_ZSCAL	Accelerator/fortran.c	/^void CUBLAS_ZSCAL (const int *n, const cuDoubleComplex *alpha, $/;"	f
CUBLAS_ZSCAL	Accelerator/fortran_common.h	156;"	d
CUBLAS_ZSCAL	Accelerator/fortran_common.h	323;"	d
CUBLAS_ZSCAL	Accelerator/fortran_thunking.c	/^void CUBLAS_ZSCAL (const int *n, const cuDoubleComplex *alpha, cuDoubleComplex *x, $/;"	f
CUBLAS_ZSWAP	Accelerator/fortran.c	/^void CUBLAS_ZSWAP (const int *n, const devptr_t *devPtrx, const int *incx,$/;"	f
CUBLAS_ZSWAP	Accelerator/fortran_common.h	159;"	d
CUBLAS_ZSWAP	Accelerator/fortran_common.h	268;"	d
CUBLAS_ZSWAP	Accelerator/fortran_common.h	326;"	d
CUBLAS_ZSWAP	Accelerator/fortran_thunking.c	/^void CUBLAS_ZSWAP (const int *n, cuDoubleComplex *x, const int *incx, cuDoubleComplex *y,$/;"	f
CUBLAS_ZSYMM	Accelerator/fortran.c	/^void CUBLAS_ZSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_ZSYMM	Accelerator/fortran_common.h	191;"	d
CUBLAS_ZSYMM	Accelerator/fortran_common.h	357;"	d
CUBLAS_ZSYMM	Accelerator/fortran_thunking.c	/^void CUBLAS_ZSYMM (const char *side, const char *uplo, const int *m, $/;"	f
CUBLAS_ZSYR2K	Accelerator/fortran.c	/^void CUBLAS_ZSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_ZSYR2K	Accelerator/fortran_common.h	197;"	d
CUBLAS_ZSYR2K	Accelerator/fortran_common.h	363;"	d
CUBLAS_ZSYR2K	Accelerator/fortran_thunking.c	/^void CUBLAS_ZSYR2K (const char *uplo, const char *trans, const int *n,$/;"	f
CUBLAS_ZSYRK	Accelerator/fortran.c	/^void CUBLAS_ZSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_ZSYRK	Accelerator/fortran_common.h	186;"	d
CUBLAS_ZSYRK	Accelerator/fortran_common.h	195;"	d
CUBLAS_ZSYRK	Accelerator/fortran_common.h	352;"	d
CUBLAS_ZSYRK	Accelerator/fortran_common.h	361;"	d
CUBLAS_ZSYRK	Accelerator/fortran_thunking.c	/^void CUBLAS_ZSYRK (const char *uplo, const char *trans, const int *n, $/;"	f
CUBLAS_ZTBMV	Accelerator/fortran.c	/^void CUBLAS_ZTBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTBMV	Accelerator/fortran_common.h	222;"	d
CUBLAS_ZTBMV	Accelerator/fortran_common.h	386;"	d
CUBLAS_ZTBMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTBMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTBSV	Accelerator/fortran.c	/^void CUBLAS_ZTBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTBSV	Accelerator/fortran_common.h	225;"	d
CUBLAS_ZTBSV	Accelerator/fortran_common.h	389;"	d
CUBLAS_ZTBSV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTBSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTPMV	Accelerator/fortran.c	/^void CUBLAS_ZTPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTPMV	Accelerator/fortran_common.h	223;"	d
CUBLAS_ZTPMV	Accelerator/fortran_common.h	387;"	d
CUBLAS_ZTPMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTPMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTPSV	Accelerator/fortran.c	/^void CUBLAS_ZTPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTPSV	Accelerator/fortran_common.h	226;"	d
CUBLAS_ZTPSV	Accelerator/fortran_common.h	390;"	d
CUBLAS_ZTPSV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTPSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTRMM	Accelerator/fortran.c	/^void CUBLAS_ZTRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_ZTRMM	Accelerator/fortran_common.h	192;"	d
CUBLAS_ZTRMM	Accelerator/fortran_common.h	358;"	d
CUBLAS_ZTRMM	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTRMM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_ZTRMV	Accelerator/fortran.c	/^void CUBLAS_ZTRMV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTRMV	Accelerator/fortran_common.h	221;"	d
CUBLAS_ZTRMV	Accelerator/fortran_common.h	385;"	d
CUBLAS_ZTRMV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTRMV (const char *uplo, const char *trans,$/;"	f
CUBLAS_ZTRSM	Accelerator/fortran.c	/^void CUBLAS_ZTRSM (const char *side, const char *uplo, const char *transa,$/;"	f
CUBLAS_ZTRSM	Accelerator/fortran_common.h	193;"	d
CUBLAS_ZTRSM	Accelerator/fortran_common.h	359;"	d
CUBLAS_ZTRSM	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTRSM (const char *side, const char *uplo, const char *transa, $/;"	f
CUBLAS_ZTRSV	Accelerator/fortran.c	/^void CUBLAS_ZTRSV (const char *uplo, const char *trans, const char *diag,$/;"	f
CUBLAS_ZTRSV	Accelerator/fortran_common.h	224;"	d
CUBLAS_ZTRSV	Accelerator/fortran_common.h	388;"	d
CUBLAS_ZTRSV	Accelerator/fortran_thunking.c	/^void CUBLAS_ZTRSV (const char *uplo, const char *trans, const char *diag, $/;"	f
CUDOUBLE_COMPLEX	Accelerator/cudaDoubleComplex.hpp	2;"	d
ConstantEvecGenerator	Main/EvecGenerator.h	/^  ConstantEvecGenerator(size_t num_spins, double evec[3], int nw=0)$/;"	f	class:ConstantEvecGenerator
ConstantEvecGenerator	Main/EvecGenerator.h	/^class ConstantEvecGenerator : public EvecGenerator$/;"	c
Cosine	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Cosine	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
CrystalParameters	Main/SystemParameters.hpp	/^  CrystalParameters() : bravais(3,3) {}$/;"	f	class:CrystalParameters
CrystalParameters	Main/SystemParameters.hpp	/^class CrystalParameters {$/;"	c
DeviceArray3d	Accelerator/DeviceArray3d.hpp	/^      __inline__ DeviceArray3d() : nRow(0), nCol(0), nSlice(0), lDim1(0), lDim2(0), lDim12(0), data(0), owner(0) {}$/;"	f	class:DeviceArray3d
DeviceArray3d	Accelerator/DeviceArray3d.hpp	/^      __inline__ DeviceArray3d(Array3d<T>& in): data(0) {$/;"	f	class:DeviceArray3d
DeviceArray3d	Accelerator/DeviceArray3d.hpp	/^      __inline__ DeviceArray3d(size_type nRows,size_type nCols, size_type nSlices, size_type ldim1=0, size_type ldim2=0) {$/;"	f	class:DeviceArray3d
DeviceArray3d	Accelerator/DeviceArray3d.hpp	/^  class DeviceArray3d {$/;"	c
DeviceMatrix	Accelerator/DeviceMatrix.hpp	/^      __inline__ DeviceMatrix() : nRow(0), nCol(0), lDim(0), data(0), owner(0)  {}$/;"	f	struct:DeviceMatrix
DeviceMatrix	Accelerator/DeviceMatrix.hpp	/^      __inline__ DeviceMatrix(Matrix<T>& in) : data(0) {$/;"	f	struct:DeviceMatrix
DeviceMatrix	Accelerator/DeviceMatrix.hpp	/^      __inline__ DeviceMatrix(size_type nRows,size_type nCols,size_type ldim=0) : nRow(nRows), nCol(nCols), lDim(ldim)  {$/;"	f	struct:DeviceMatrix
DeviceMatrix	Accelerator/DeviceMatrix.hpp	/^  struct DeviceMatrix {$/;"	s
DeviceVector	Accelerator/DeviceVector.hpp	/^      __inline__ DeviceVector( size_type size ) {$/;"	f	class:DeviceVector
DeviceVector	Accelerator/DeviceVector.hpp	/^      __inline__ DeviceVector( std::vector<T>& in): data(0) {$/;"	f	class:DeviceVector
DeviceVector	Accelerator/DeviceVector.hpp	/^      __inline__ DeviceVector() : N(0), data(0), owner(0) {}$/;"	f	class:DeviceVector
DeviceVector	Accelerator/DeviceVector.hpp	/^  class DeviceVector {$/;"	c
EVEC_GENERATOR_H	Main/EvecGenerator.h	9;"	d
EXHAUSTIVEISING_H	Main/ExhaustiveIsing.h	3;"	d
EfMixing	Main/mixing.cpp	/^  EfMixing(Real _alpha) : alpha(_alpha) {}$/;"	f	class:EfMixing
EfMixing	Main/mixing.cpp	/^class EfMixing : public Mixing {$/;"	c	file:
EnergyContourParameters	Main/SystemParameters.hpp	/^class EnergyContourParameters {$/;"	c
Epanechnikov	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Epanechnikov	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
EvecGenerator	Main/EvecGenerator.h	/^class EvecGenerator$/;"	c
ExhaustiveIsing1dEvecGenerator	Main/ExhaustiveIsing.h	/^ExhaustiveIsing1dEvecGenerator::ExhaustiveIsing1dEvecGenerator(int num_spins, int num_instances, double ** ev_p,$/;"	f	class:ExhaustiveIsing1dEvecGenerator
ExhaustiveIsing1dEvecGenerator	Main/ExhaustiveIsing.h	/^class ExhaustiveIsing1dEvecGenerator : public EvecGenerator$/;"	c
FAST_COMPLEX_ARITH	Accelerator/operations.h	35;"	d
FIDX	Accelerator/makebgij_device.hpp	6;"	d
F_readSingleAtomData_bigcell	SingleSite/F_readSingleAtomData_bigcell.f90	/^      subroutine F_readSingleAtomData_bigcell(/;"	s
F_writeSingleAtomData_bigcell	SingleSite/F_writeSingleAtomData_bigcell.f90	/^      subroutine F_writeSingleAtomData_bigcell(/;"	s
FrozenPotential	Main/mixing.cpp	/^class FrozenPotential : public Mixing {$/;"	c	file:
GPUThreads	Main/SystemParameters.hpp	/^  int GPUThreads;$/;"	m	class:LSMSGlobals
GauntCoeficients	Misc/Coeficients.hpp	/^class GauntCoeficients {$/;"	c
Gaussian	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Gaussian	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
Graph1d	Main/Graph1d.hpp	/^  Graph1d() : delta(0.1), N(0), y(0), minX(std::numeric_limits<KeyType>::max()) {;}$/;"	f	class:Graph1d
Graph1d	Main/Graph1d.hpp	/^  Graph1d(KeyType _delta) : delta(_delta), N(0), y(0), minX(std::numeric_limits<KeyType>::max()) {;}$/;"	f	class:Graph1d
Graph1d	Main/Graph1d.hpp	/^class Graph1d$/;"	c
Graph1dMoments	Main/Graph1dMoments.hpp	/^  Graph1dMoments() : k(0) {;}$/;"	f	class:Graph1dMoments
Graph1dMoments	Main/Graph1dMoments.hpp	/^  Graph1dMoments(KeyType _delta) : Graph1d<ValueType, KeyType, Int>(_delta), k(0) {;}$/;"	f	class:Graph1dMoments
Graph1dMoments	Main/Graph1dMoments.hpp	/^class Graph1dMoments : public Graph1d<ValueType, KeyType, Int>$/;"	c
Graph2d	Main/Graph2d.hpp	/^  Graph2d() : deltaX(0.1), deltaY(0.1), Nx(0) {;}$/;"	f	class:Graph2d
Graph2d	Main/Graph2d.hpp	/^  Graph2d(KeyType _deltaX, KeyType _deltaY) : deltaX(_deltaX), deltaY(_deltaY), Nx(0) {;}$/;"	f	class:Graph2d
Graph2d	Main/Graph2d.hpp	/^class Graph2d$/;"	c
H5_USE_16_API	Main/HDF5io.hpp	4;"	d
H5_USE_16_API	SingleSite/readSingleAtomData_hdf5.cpp	1;"	d	file:
IFactors	Misc/Coeficients.hpp	/^class IFactors {$/;"	c
INC_PATH	Test/buildKKRMatrixTest/Makefile	/^export INC_PATH =$/;"	m
INLINE_MAKEGIJ	Test/buildKKRMatrixTest/buildKKRMatrix_nrel_ns2.cpp	13;"	d	file:
INLINE_PLGLMAX	Test/buildKKRMatrixTest/buildKKRMatrix_nrel_ns2.cpp	12;"	d	file:
INTERPOLATE_POTENTIAL_HPP	Potential/interpolatePotential.hpp	2;"	d
INVERSE_H_	Accelerator/inverse.h	51;"	d
ISING	Main/ExhaustiveIsing.h	5;"	d
InitialAtomLevels	Main/initializeAtom.cpp	/^class InitialAtomLevels {$/;"	c	file:
Kernel1d	Main/Graph1d.hpp	/^  Kernel1d() {;}$/;"	f	class:Kernel1d
Kernel1d	Main/Graph1d.hpp	/^  Kernel1d(KeyType _delta, KeyType _width) : Graph1d<ValueType,KeyType,Int>(_delta) {$/;"	f	class:Kernel1d
Kernel1d	Main/Graph1d.hpp	/^class Kernel1d: public Graph1d<ValueType,KeyType,Int>$/;"	c
Kernel2d	Main/Graph2d.hpp	/^  Kernel2d() {;}$/;"	f	class:Kernel2d
Kernel2d	Main/Graph2d.hpp	/^  Kernel2d(KeyType _deltaX, KeyType _deltaY, KeyType _widthX, KeyType _widthY)$/;"	f	class:Kernel2d
Kernel2d	Main/Graph2d.hpp	/^class Kernel2d: public Graph2d<ValueType,KeyType,Int>$/;"	c
KernelType	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	t	typeref:enum:__anon1
KernelType	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	t	typeref:enum:__anon2
LIBS	Test/buildKKRMatrixTest/Makefile	/^export LIBS :=$/;"	m
LIZDist	SingleSite/AtomData.hpp	/^  std::vector<Real> LIZDist;$/;"	m	class:AtomData
LIZDist	Test/buildKKRMatrixTest/TestStructures.hpp	/^  std::vector<Real> LIZDist;$/;"	m	class:AtomData
LIZGlobalIdx	SingleSite/AtomData.hpp	/^  std::vector<int> LIZGlobalIdx, LIZStoreIdx, LIZlmax;$/;"	m	class:AtomData
LIZGlobalIdx	Test/buildKKRMatrixTest/TestStructures.hpp	/^  std::vector<int> LIZGlobalIdx, LIZStoreIdx, LIZlmax;$/;"	m	class:AtomData
LIZInfoType	Main/buildLIZandCommLists.cpp	/^class LIZInfoType{$/;"	c	file:
LIZPos	SingleSite/AtomData.hpp	/^  Matrix<Real> LIZPos;$/;"	m	class:AtomData
LIZPos	Test/buildKKRMatrixTest/TestStructures.hpp	/^  Matrix<Real> LIZPos;$/;"	m	class:AtomData
LIZStoreIdx	SingleSite/AtomData.hpp	/^  std::vector<int> LIZGlobalIdx, LIZStoreIdx, LIZlmax;$/;"	m	class:AtomData
LIZStoreIdx	Test/buildKKRMatrixTest/TestStructures.hpp	/^  std::vector<int> LIZGlobalIdx, LIZStoreIdx, LIZlmax;$/;"	m	class:AtomData
LIZlmax	SingleSite/AtomData.hpp	/^  std::vector<int> LIZGlobalIdx, LIZStoreIdx, LIZlmax;$/;"	m	class:AtomData
LIZlmax	Test/buildKKRMatrixTest/TestStructures.hpp	/^  std::vector<int> LIZGlobalIdx, LIZStoreIdx, LIZlmax;$/;"	m	class:AtomData
LMAX_GE_2	Test/buildKKRMatrixTest/plglmax_new.cpp	17;"	d	file:
LSMS	Main/lsmsClass.cpp	/^LSMS::LSMS(MPI_Comm _comm, const char * i_lsms, const char * out_prefix)$/;"	f	class:LSMS
LSMS	Main/lsmsClass.hpp	/^class LSMS {$/;"	c
LSMSCOMMUNICATION_H	Communication/LSMSCommunication.hpp	2;"	d
LSMSCommunication	Communication/LSMSCommunication.hpp	/^class LSMSCommunication {$/;"	c
LSMSGlobals	Main/SystemParameters.hpp	/^class LSMSGlobals {$/;"	c
LSMSGlobals	Test/buildKKRMatrixTest/TestStructures.hpp	/^class LSMSGlobals {$/;"	c
LSMSSystemParameters	Main/SystemParameters.hpp	/^class LSMSSystemParameters {$/;"	c
LSMSSystemParameters	Test/buildKKRMatrixTest/TestStructures.hpp	/^class LSMSSystemParameters {$/;"	c
LSMS_ACCELERATOR_HPP	Accelerator/Accelerator.hpp	2;"	d
LSMS_ATOMDATA_H	SingleSite/AtomData.hpp	2;"	d
LSMS_ATOM_H	RadialGrid/Atom.hpp	2;"	d
LSMS_CALCULATECEMPOT_HPP	Main/calculateChemPot.hpp	2;"	d
LSMS_CALCULATEDENSITIES_HPP	Main/calculateDensities.hpp	2;"	d
LSMS_CLASS_H	Main/lsmsClass.hpp	4;"	d
LSMS_COEFICIENTS_HPP	Misc/Coeficients.hpp	2;"	d
LSMS_CORESTATES_H	Core/CoreStates.hpp	2;"	d
LSMS_DISTRIBUTETYPES_H	Communication/distributeAtoms.hpp	2;"	d
LSMS_ENERGYCONTOURINTEGRATION_H	Main/EnergyContourIntegration.hpp	2;"	d
LSMS_GLOBALS_H	Main/global.hpp	2;"	d
LSMS_HDF5_IO	Main/HDF5io.hpp	2;"	d
LSMS_INDICES_HPP	Misc/Indices.hpp	2;"	d
LSMS_INITIALIZEATOMS_H	Main/initializeAtom.hpp	2;"	d
LSMS_LUASUPPORT_H	LuaInterface/LuaSupport.hpp	2;"	d
LSMS_MADELUNG_H	Madelung/Madelung.hpp	2;"	d
LSMS_MIXING_H	Main/mixing.hpp	2;"	d
LSMS_MULTIPLESCATTERING_H	MultipleScattering/MultipleScattering.hpp	2;"	d
LSMS_OBJ	Main/Makefile	/^LSMS_OBJ = SystemParameters.o read_input.o PotentialIO.o buildLIZandCommLists.o \\$/;"	m
LSMS_POTENTIALIO_H	Main/PotentialIO.hpp	2;"	d
LSMS_RADIALPOT_H	RadialGrid/RadialPotential.hpp	2;"	d
LSMS_RGRID_H	RadialGrid/RadialGrid.hpp	2;"	d
LSMS_SHIFT_POTENTIALS	Potential/PotentialShifter.hpp	2;"	d
LSMS_SINGLESITESCATTERING_H	SingleSite/SingleSiteScattering.hpp	2;"	d
LSMS_SYSTEM_PARAM_H	Main/SystemParameters.hpp	2;"	d
LSMS_VORPOL_H	VORPOL/VORPOL.hpp	2;"	d
LSMS_WANG_LANDAU_2d_H	Main/WangLandau2d.h	3;"	d
LSMS_WANG_LANDAU_H	Main/WangLandau.h	3;"	d
LSMS_version	Main/lsmsClass.hpp	/^  int LSMS_version;$/;"	m	class:LSMS
LocalTypeInfo	Main/SystemParameters.hpp	/^class LocalTypeInfo {$/;"	c
LocalTypeInfo	Test/buildKKRMatrixTest/TestStructures.hpp	/^class LocalTypeInfo {$/;"	c
M	Main/Graph1dMoments.hpp	/^  std::vector<Int> M;$/;"	m	class:Graph1dMoments
ME_CUDACHECKERROR_H	Accelerator/cudaCheckError.hpp	2;"	d
MISC	Test/buildKKRMatrixTest/Makefile	/^export MISC = $(TOP_DIR)\/src\/Misc$/;"	m
Mixing	Main/mixing.hpp	/^class Mixing {$/;"	c
MixingParameters	Main/mixing.hpp	/^struct MixingParameters {$/;"	s
N	Accelerator/DeviceVector.hpp	/^      size_type N;$/;"	m	class:DeviceVector
N	Main/Graph1d.hpp	/^  Int N;$/;"	m	class:Graph1d
N	RadialGrid/RadialGrid.hpp	/^  int N,jmt,jws;$/;"	m	class:RadialGrid
NUM_PAPI_EVENTS	Main/lsms.cpp	282;"	d	file:
NUM_PAPI_EVENTS	Main/wl_lsms.cpp	163;"	d	file:
NewGaunt	Misc/Gaunt.hpp	/^namespace NewGaunt {$/;"	n
NewGaunt	Misc/Gaunt_gmp.hpp	/^namespace NewGaunt {$/;"	n
NoMixing	Main/mixing.cpp	/^class NoMixing : public Mixing {$/;"	c	file:
NodeIdxInfo	Main/buildLIZandCommLists.cpp	/^class NodeIdxInfo {$/;"	c	file:
NonRelativisticSingleScattererSolution	SingleSite/SingleSiteScattering.hpp	/^  NonRelativisticSingleScattererSolution(){}$/;"	f	class:NonRelativisticSingleScattererSolution
NonRelativisticSingleScattererSolution	SingleSite/SingleSiteScattering.hpp	/^  NonRelativisticSingleScattererSolution(LSMSSystemParameters &lsms, AtomData &a, Complex *tmat_g_stor=NULL)$/;"	f	class:NonRelativisticSingleScattererSolution
NonRelativisticSingleScattererSolution	SingleSite/SingleSiteScattering.hpp	/^class NonRelativisticSingleScattererSolution : public SingleScattererSolution {$/;"	c
None	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Nx	Main/Graph2d.hpp	/^  Int Nx;$/;"	m	class:Graph2d
Ny	Main/Graph2d.hpp	/^  std::vector<Int> Ny;$/;"	m	class:Graph2d
OBJ	Accelerator/Makefile	/^OBJ       = accelerator_initialize.o accelerator_finalize.o accelerator_interface.o Accelerator.o \\$/;"	m
OBJ	Communication/Makefile	/^OBJ = distributeAtoms.o LSMSCommunication.o$/;"	m
OBJ	Core/Makefile	/^OBJ = getcor_c.o calculateCoreStates.o corslv_c.o deepst_c.o semcst_c.o \\$/;"	m
OBJ	LuaInterface/Makefile	/^OBJ = LuaInterface.o LuaSupport.o$/;"	m
OBJ	Madelung/Makefile	/^OBJ = cal_madelung_matrix.o getkncut.o getrscut.o getstruc.o interf.o interfsmr.o \\$/;"	m
OBJ	Misc/Makefile	/^OBJ = zeroout.o fstop.o newint.o fit.o interp.o trltog.o spin_trafo.o fitpot.o rwave.o \\$/;"	m
OBJ	MultipleScattering/Makefile	/^OBJ = calculateTauMatrix.o makegij_c.o setgij.o block_inverse.o zblock_lu.o wasinv.o zmar1.o wasinv_p.o \\$/;"	m
OBJ	Potential/Makefile	/^OBJ = calculateChargesPotential.o interpolatePotential.o getqm_mt.o getvmt.o newexchg.o alpha2_c.o newpot_c.o epcorr.o rs.o$/;"	m
OBJ	SingleSite/Makefile	/^OBJ = SingleSiteScattering.o readSingleAtomData_hdf5.o readSingleAtomData_bigcell.o \\$/;"	m
OBJ	TotalEnergy/Makefile	/^OBJ = calculateTotalEnergy.o janake_c.o zeropt_c.o$/;"	m
OBJ	VORPOL/Makefile	/^OBJ = setup_vorpol.o setup_boundary.o filter_edge.o chkedge.o invm3.o chkbnd.o celbnd.o \\$/;"	m
OPERATIONS_SOLVE_H_	Accelerator/operations.h	32;"	d
PotentialShifter	Potential/PotentialShifter.hpp	/^class PotentialShifter {$/;"	c
Quartic	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Quartic	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
RANDOM_EVEC_H	Main/random_evec.h	2;"	d
READLASTLINE_HPP	Misc/readLastLine.hpp	2;"	d
READSINGLEATOMDATA_H	SingleSite/readSingleAtomData.hpp	2;"	d
RETURN_COMPLEX	Accelerator/fortran_common.h	61;"	d
R_VALUE_OFFSET	Main/wl_lsms.cpp	36;"	d	file:
R_VALUE_OFFSET	Test/testPotentialShift.cpp	24;"	d	file:
RadialGrid	RadialGrid/RadialGrid.hpp	/^  inline RadialGrid() : N(0), jmt(0), jws(0), h(0.0) {}$/;"	f	class:RadialGrid
RadialGrid	RadialGrid/RadialGrid.hpp	/^class RadialGrid {$/;"	c
RadialGridLua	LuaInterface/RadialGrid_lua.cpp	/^} RadialGridLua;$/;"	t	typeref:struct:__anon4	file:
RadialGrid_lib_f	LuaInterface/RadialGrid_lua.cpp	/^static const struct luaL_Reg RadialGrid_lib_f [] = {$/;"	v	typeref:struct:luaL_Reg	file:
RadialGrid_lib_m	LuaInterface/RadialGrid_lua.cpp	/^static const struct luaL_Reg RadialGrid_lib_m [] = {$/;"	v	typeref:struct:luaL_Reg	file:
RadialPotential	RadialGrid/RadialPotential.hpp	/^  inline RadialPotential() {g=new RadialGrid;}$/;"	f	class:RadialPotential
RadialPotential	RadialGrid/RadialPotential.hpp	/^  inline RadialPotential(RadialGrid *_g) {g=_g; vr.resize(g->N,2);}$/;"	f	class:RadialPotential
RadialPotential	RadialGrid/RadialPotential.hpp	/^typedef class RadialPotential {$/;"	c
RadialPotential_lib_f	LuaInterface/RadialPotential_lua.cpp	/^static const struct luaL_Reg RadialPotential_lib_f [] = {$/;"	v	typeref:struct:luaL_Reg	file:
RadialPotential_lib_m	LuaInterface/RadialPotential_lua.cpp	/^static const struct luaL_Reg RadialPotential_lib_m [] = {$/;"	v	typeref:struct:luaL_Reg	file:
RandomEvecGenerator	Main/EvecGenerator.h	/^  RandomEvecGenerator(size_t num_spins) {n_spins=num_spins;}$/;"	f	class:RandomEvecGenerator
RandomEvecGenerator	Main/EvecGenerator.h	/^class RandomEvecGenerator : public EvecGenerator$/;"	c
RelativisticScattererSolution	SingleSite/SingleSiteScattering.hpp	/^class RelativisticScattererSolution : public SingleScattererSolution {$/;"	c
SVN_REV	Main/wl_lsms.cpp	205;"	d	file:
SVN_REV	Test/testPotentialShift.cpp	105;"	d	file:
SimpleChargeDensityMixing	Main/mixing.cpp	/^  SimpleChargeDensityMixing(Real _alpha) : alpha(_alpha) {}$/;"	f	class:SimpleChargeDensityMixing
SimpleChargeDensityMixing	Main/mixing.cpp	/^class SimpleChargeDensityMixing : public Mixing {$/;"	c	file:
SimplePotentialMixing	Main/mixing.cpp	/^  SimplePotentialMixing(Real _alpha) : alpha(_alpha) {}$/;"	f	class:SimplePotentialMixing
SimplePotentialMixing	Main/mixing.cpp	/^class SimplePotentialMixing : public Mixing {$/;"	c	file:
SingleScattererSolution	SingleSite/SingleSiteScattering.hpp	/^class SingleScattererSolution {$/;"	c
SphericalHarmonicsCoeficients	Misc/Coeficients.hpp	/^class SphericalHarmonicsCoeficients {$/;"	c
StatesWriter	Main/WangLandau.h	/^  StatesWriter(const char *filename=NULL)$/;"	f	class:StatesWriter
StatesWriter	Main/WangLandau.h	/^class StatesWriter$/;"	c
StatesWriter2d	Main/WangLandau2d.h	/^  StatesWriter2d(const char *filename=NULL)$/;"	f	class:StatesWriter2d
StatesWriter2d	Main/WangLandau2d.h	/^class StatesWriter2d$/;"	c
TOP_DIR	Test/buildKKRMatrixTest/Makefile	/^export TOP_DIR = $(shell pwd)\/..\/..\/..$/;"	m
TmatCommType	Communication/LSMSCommunication.hpp	/^class TmatCommType {$/;"	c
TriWight	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
TriWight	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
Triangle	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Triangle	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
USE_ALLOCA	Test/buildKKRMatrixTest/buildKKRMatrix_nrel_ns2.cpp	11;"	d	file:
USE_ALLOCA	Test/buildKKRMatrixTest/buildKKRMatrix_original.cpp	34;"	d	file:
Uniform	Main/Graph1d.hpp	/^typedef enum {None, Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon1
Uniform	Main/Graph2d.hpp	/^typedef enum {Epanechnikov, Quartic, TriWight, Triangle, Uniform, Gaussian, Cosine} KernelType;$/;"	e	enum:__anon2
VoronoiPolyhedra	VORPOL/VORPOL.hpp	/^class VoronoiPolyhedra {$/;"	c
WASINV	MultipleScattering/wasinv.f	/^      SUBROUTINE WASINV(/;"	s
WASINV_p	MultipleScattering/wasinv_p.f	/^      SUBROUTINE WASINV_p(/;"	s
WL1dEvecGenerator	Main/WangLandau.h	/^WL1dEvecGenerator<RNG>::WL1dEvecGenerator(int num_spins, int num_instances, double ** ev_p,$/;"	f	class:WL1dEvecGenerator
WL1dEvecGenerator	Main/WangLandau.h	/^class WL1dEvecGenerator : public EvecGenerator$/;"	c
WL2dEvecGenerator	Main/WangLandau2d.h	/^WL2dEvecGenerator<RNG>::WL2dEvecGenerator(int num_spins, int num_instances, double ** ev_p,$/;"	f	class:WL2dEvecGenerator
WL2dEvecGenerator	Main/WangLandau2d.h	/^class WL2dEvecGenerator : public EvecGenerator$/;"	c
WL_GRAPH1DMOMENTS_H	Main/Graph1dMoments.hpp	7;"	d
WL_GRAPH1D_H	Main/Graph1d.hpp	5;"	d
WL_GRAPH2D_H	Main/Graph2d.hpp	5;"	d
WRITESINGLEATOMDATA_H	SingleSite/writeSingleAtomData.hpp	2;"	d
Z	Main/SystemParameters.hpp	/^  int lmax,Z,Zc,Zs,Zv;$/;"	m	class:AtomType
ZAXPBY	MultipleScattering/zaxpby.f	/^      SUBROUTINE ZAXPBY /;"	s
ZRANDN	MultipleScattering/zrandn.f	/^      SUBROUTINE ZRANDN /;"	s
ZUCPX	MultipleScattering/zucpx.f	/^      SUBROUTINE ZUCPX /;"	s
ZUCPXO	MultipleScattering/zucpx.f	/^      FUNCTION ZUCPXO /;"	f
ZUQMX	MultipleScattering/zuqmx.f	/^      SUBROUTINE ZUQMX /;"	s
ZUQMXO	MultipleScattering/zuqmx.f	/^      FUNCTION ZUQMXO /;"	f
ZUTFX	MultipleScattering/zutfx.f	/^      SUBROUTINE ZUTFX /;"	s
Zc	Main/SystemParameters.hpp	/^  int lmax,Z,Zc,Zs,Zv;$/;"	m	class:AtomType
Zmar1	MultipleScattering/zmar1.f	/^      SUBROUTINE Zmar1 /;"	s
Zs	Main/SystemParameters.hpp	/^  int lmax,Z,Zc,Zs,Zv;$/;"	m	class:AtomType
Zv	Main/SystemParameters.hpp	/^  int lmax,Z,Zc,Zs,Zv;$/;"	m	class:AtomType
absOp	Accelerator/operations.h	/^__device__ __forceinline__ double absOp (cuComplex a)$/;"	f
absOp	Accelerator/operations.h	/^__device__ __forceinline__ double absOp (cuDoubleComplex a)$/;"	f
absOp	Accelerator/operations.h	/^__device__ __forceinline__ double absOp (double a)$/;"	f
absOp	Accelerator/operations.h	/^__device__ __forceinline__ float absOp (float a)$/;"	f
acceleratorFinalize	Accelerator/Accelerator.cpp	/^void acceleratorFinalize(void)$/;"	f
acceleratorInitialize	Accelerator/Accelerator.cpp	/^void acceleratorInitialize(int sz, int nthreads)$/;"	f
acceleratorPrint	Accelerator/Accelerator.cpp	/^void acceleratorPrint(void)$/;"	f
accelerator_finalize	Accelerator/accelerator_finalize.F	/^      subroutine accelerator_finalize(/;"	s
accelerator_initialize	Accelerator/accelerator_initialize.F	/^      subroutine accelerator_initialize(/;"	s
accept	Main/ExhaustiveIsing.h	/^  unsigned long accept, reject;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
accept	Main/WangLandau.h	/^  unsigned long accept, reject, acceptSinceLastChange;$/;"	m	class:WL1dEvecGenerator
accept	Main/WangLandau2d.h	/^  unsigned long accept, reject;$/;"	m	class:WL2dEvecGenerator
acceptSinceLastChange	Main/WangLandau.h	/^  unsigned long accept, reject, acceptSinceLastChange;$/;"	m	class:WL1dEvecGenerator
addKernel	Main/Graph1d.hpp	/^inline void addKernel(Graph1d<ValueType, KeyType, Int> &g, Kernel1d<ValueType, KeyType, Int> &k, KeyType x)$/;"	f
addKernel	Main/Graph1dMoments.hpp	/^inline void addKernel(Graph1dMoments<ValueType, KeyType, Int> &g, Kernel1d<ValueType, KeyType, Int> &k, KeyType x)$/;"	f
addKernel	Main/Graph2d.hpp	/^inline void addKernel(Graph2d<ValueType, KeyType, Int> &g, Kernel2d<ValueType, KeyType, Int> &k, KeyType x, KeyType y)$/;"	f
addMomentsAtIdx	Main/Graph1dMoments.hpp	/^  inline void addMomentsAtIdx(Int i, ValueType v)$/;"	f	class:Graph1dMoments
afm	SingleSite/AtomData.hpp	/^  int afm;                            \/\/ Flag for antiferromagnetic condition$/;"	m	class:AtomData
alat	RadialGrid/Atom.hpp	/^  Real alat,efermi;$/;"	m	class:Atom
alat	SingleSite/AtomData.hpp	/^  Real alat, efermi;$/;"	m	class:AtomData
algorithm	Main/mixing.hpp	/^  mixAlgorithm algorithm[numQuantities];$/;"	m	struct:MixingParameters
allocate	Accelerator/DeviceArray3d.hpp	/^      __inline__ void allocate(size_type num_bytes) {$/;"	f	class:DeviceArray3d
allocate	Accelerator/DeviceMatrix.hpp	/^      __inline__ void allocate(size_type num_bytes) {$/;"	f	struct:DeviceMatrix
allocate	Accelerator/DeviceVector.hpp	/^      __inline__ void allocate(size_type num_bytes) {$/;"	f	class:DeviceVector
alpha	Main/mixing.cpp	/^  Real alpha;$/;"	m	class:SimpleChargeDensityMixing	file:
alpha	Main/mixing.cpp	/^  Real alpha;$/;"	m	class:SimplePotentialMixing	file:
alpha	Main/mixing.cpp	/^  Real efOld, alpha;$/;"	m	class:EfMixing	file:
alpha2	Potential/alpha2_c.f	/^      function alpha2(/;"	f
alphaDV	Main/SystemParameters.hpp	/^  Real alphaDV; \/\/ mixing parameter for density or potential$/;"	m	class:LSMSSystemParameters
angularMomentumIndices	Main/SystemParameters.hpp	/^  AngularMomentumIndices angularMomentumIndices;$/;"	m	class:LSMSSystemParameters
angularMomentumIndices	Test/buildKKRMatrixTest/TestStructures.hpp	/^  AngularMomentumIndices angularMomentumIndices;$/;"	m	class:LSMSSystemParameters
applyShifts	Potential/PotentialShifter.hpp	/^  void applyShifts(LocalTypeInfo &local)$/;"	f	class:PotentialShifter
approxErfc	Main/initializeAtom.cpp	/^Real approxErfc(Real x)$/;"	f
atom	Main/SystemParameters.hpp	/^  std::vector<AtomData> atom;$/;"	m	class:LocalTypeInfo
atom	SingleSite/SingleSiteScattering.hpp	/^  AtomData *atom;$/;"	m	class:SingleScattererSolution
b_basis	SingleSite/AtomData.hpp	/^  Real b_basis[9];$/;"	m	class:AtomData
b_con	SingleSite/AtomData.hpp	/^  Real b_con[3];$/;"	m	class:AtomData
bessj	Madelung/bessj.f	/^      subroutine bessj(/;"	s
binomialCoefficient	Misc/Gaunt.hpp	/^Int binomialCoefficient(Int n, Int k)$/;"	f	namespace:NewGaunt
binomialCoefficient	Misc/Gaunt_gmp.hpp	/^  void binomialCoefficient(mpz_t b, long n, long k)$/;"	f	namespace:NewGaunt
blkSizeTmatStore	Main/SystemParameters.hpp	/^  int lDimTmatStore,blkSizeTmatStore;$/;"	m	class:LocalTypeInfo
block_inv	MultipleScattering/block_inverse.f	/^      subroutine block_inv(/;"	s
bravais	Main/SystemParameters.hpp	/^  Matrix<Real> bravais;$/;"	m	class:CrystalParameters
brmat	SingleSite/brmat.f	/^      subroutine brmat(/;"	s
broyden	Main/mixing.hpp	/^  enum mixAlgorithm {noAlgorithm = 0, simple = 1, broyden = 2};$/;"	e	enum:MixingParameters::mixAlgorithm
bsstep	Misc/bsstep.f	/^      subroutine bsstep(/;"	s
buildEnergyContour	Main/energyContourIntegration.cpp	/^void buildEnergyContour(int igrid,Real ebot,Real etop,Real eibot, Real eitop,$/;"	f
buildKKRMatrix	MultipleScattering/calculateTauMatrix.cpp	/^void buildKKRMatrix(LSMSSystemParameters &lsms, LocalTypeInfo &local,AtomData &atom, Complex energy, Complex prel, int iie, Matrix<Complex> &m)$/;"	f
buildKKRMatrix_nrel_ns2	Test/buildKKRMatrixTest/buildKKRMatrix_nrel_ns2.cpp	/^void buildKKRMatrix_nrel_ns2(LSMSSystemParameters &lsms, LocalTypeInfo &local,AtomData &atom,$/;"	f
buildKKRMatrix_orig	Test/buildKKRMatrixTest/buildKKRMatrix_original.cpp	/^void buildKKRMatrix_orig(LSMSSystemParameters &lsms, LocalTypeInfo &local,AtomData &atom, Complex energy, Complex prel, Matrix<Complex> &m)$/;"	f
buildLIZ	Main/buildLIZandCommLists.cpp	/^int buildLIZ(CrystalParameters &crystal, int idx,std::vector<LIZInfoType> &LIZ)$/;"	f
buildLIZandCommLists	Main/buildLIZandCommLists.cpp	/^void buildLIZandCommLists(LSMSCommunication &comm, LSMSSystemParameters &lsms,$/;"	f
bulirsch_stoer	Misc/bulirsch_stoer.f	/^      subroutine bulirsch_stoer(/;"	s
c2inv	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^const double c2inv=1.0\/(cphot*cphot);$/;"	v
cal_madelung_matrix	Madelung/cal_madelung_matrix.f	/^      subroutine cal_madelung_matrix(/;"	s
cal_madelung_matrix_j	Madelung/cal_madelung_matrix_j.f	/^      subroutine cal_madelung_matrix_j(/;"	s
calculateAllLocalChargeDensities	Main/calculateDensities.cpp	/^void calculateAllLocalChargeDensities(LSMSSystemParameters &lsms, LocalTypeInfo &local)$/;"	f
calculateAllTauMatrices	MultipleScattering/calculateTauMatrix.cpp	/^void calculateAllTauMatrices(LSMSCommunication &comm,LSMSSystemParameters &lsms, LocalTypeInfo &local,$/;"	f
calculateChargeDensity	Main/calculateDensities.cpp	/^void calculateChargeDensity(LSMSSystemParameters &lsms, AtomData & atom, Real edote, int afm,$/;"	f
calculateCharges	Potential/calculateChargesPotential.cpp	/^void calculateCharges(LSMSCommunication &comm, LSMSSystemParameters &lsms, LocalTypeInfo &local, CrystalParameters &crystal, Real *qsub, Array3d<Real> &rhoTemp, int chargeSwitch)$/;"	f
calculateChargesPotential	Potential/calculateChargesPotential.cpp	/^void calculateChargesPotential(LSMSCommunication &comm, LSMSSystemParameters &lsms, LocalTypeInfo &local, CrystalParameters &crystal, int chargeSwitch)$/;"	f
calculateChemPot	Main/calculateChemPot.cpp	/^void calculateChemPot(LSMSCommunication &comm,LSMSSystemParameters &lsms, LocalTypeInfo &local,$/;"	f
calculateCoreStates	Core/calculateCoreStates.cpp	/^void calculateCoreStates(LSMSCommunication &comm, LSMSSystemParameters &lsms, LocalTypeInfo &local)$/;"	f
calculateDensities	Main/calculateDensities.cpp	/^void calculateDensities(LSMSSystemParameters &lsms, int iatom, int is, int ie, int nume, Complex energy, Complex dele1,$/;"	f
calculateEvec	Main/calculateEvec.cpp	/^void calculateEvec(LSMSSystemParameters &lsms, LocalTypeInfo &local)$/;"	f
calculateGauntCoeficients	Misc/calculateGauntCoeficients.cpp	/^void calculateGauntCoeficients(int lmax, Array3d<Real> &cgnt, AngularMomentumIndices &a)$/;"	f
calculateLocalCharges	Potential/calculateChargesPotential.cpp	/^void calculateLocalCharges(LSMSSystemParameters &lsms, LocalTypeInfo &local, int chargeSwitch)$/;"	f
calculateMadelungMatrices	Madelung/calculateMadelungMatrices.cpp	/^void calculateMadelungMatrices(LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local)$/;"	f
calculatePotential	Potential/calculateChargesPotential.cpp	/^void calculatePotential(LSMSCommunication &comm, LSMSSystemParameters &lsms, LocalTypeInfo &local, CrystalParameters &crystal, Real *qsub, Array3d<Real> &rhoTemp, int chargeSwitch)$/;"	f
calculateScatteringSolutions	SingleSite/SingleSiteScattering.cpp	/^void calculateScatteringSolutions(LSMSSystemParameters &lsms, std::vector<AtomData> &atom,$/;"	f
calculateSingleScattererSolution	SingleSite/SingleSiteScattering.cpp	/^void calculateSingleScattererSolution(LSMSSystemParameters &lsms, AtomData &atom,$/;"	f
calculateTauMatrix	MultipleScattering/calculateTauMatrix.cpp	/^void calculateTauMatrix(LSMSSystemParameters &lsms, LocalTypeInfo &local, AtomData &atom, Complex energy, Complex prel,$/;"	f
calculateTotalEnergy	TotalEnergy/calculateTotalEnergy.cpp	/^void calculateTotalEnergy(LSMSCommunication &comm, LSMSSystemParameters &lsms, LocalTypeInfo &local, CrystalParameters &crystal)$/;"	f
calculateTrPxTau	Main/calculateTrPxTau.cpp	/^void calculateTrPxTau(Complex *tau00, int kkrsz, Complex *tr_pxtau)$/;"	f
calculateVolumes	VORPOL/setupVorpol.cpp	/^void calculateVolumes(LSMSCommunication &comm, LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local)$/;"	f
calsig	VORPOL/calsig.f	/^      subroutine calsig(/;"	s
caltnode	VORPOL/caltnode.f	/^      subroutine caltnode(/;"	s
celbnd	VORPOL/celbnd.f	/^      subroutine celbnd(/;"	s
center	Main/Graph1d.hpp	/^  Int center;$/;"	m	class:Kernel1d
centerX	Main/Graph2d.hpp	/^  Int centerX, centerY;$/;"	m	class:Kernel2d
centerY	Main/Graph2d.hpp	/^  Int centerX, centerY;$/;"	m	class:Kernel2d
cgaunt	Misc/cgaunt_c.f	/^      subroutine cgaunt(/;"	s
cgnt	Misc/Coeficients.hpp	/^  Array3d<Real> cgnt;$/;"	m	class:GauntCoeficients
changeMode	Main/WangLandau.h	/^  int changeMode;$/;"	m	class:WL1dEvecGenerator
changes	Main/WangLandau.h	/^  struct {double kappa, lambda, omega; int frequency, changes;} globalUpdate;$/;"	m	struct:WL1dEvecGenerator::__anon3
charge	Main/mixing.hpp	/^  enum mixQuantity {no_mixing = 0, charge = 1, potential = 2, moment_magnitude = 3,$/;"	e	enum:MixingParameters::mixQuantity
checkCharge	Main/checkConsistency.cpp	/^void checkCharge(LSMSSystemParameters &lsms, AtomData &atom)$/;"	f
checkIntegratedValenceDOS	Main/checkConsistency.cpp	/^void checkIntegratedValenceDOS()$/;"	f
checkIstop	Main/SystemParameters.hpp	/^  bool checkIstop(const char *c){return (strncmp(istop,c,32)==0);}$/;"	f	class:LSMSGlobals
checkIstop	Test/buildKKRMatrixTest/TestStructures.hpp	/^  bool checkIstop(const char *c){return (strncmp(istop,c,32)==0);}$/;"	f	class:LSMSGlobals
chempot	Main/SystemParameters.hpp	/^  Real chempot;                \/\/ Chemical potential$/;"	m	class:LSMSSystemParameters
chkbnd	VORPOL/chkbnd.f	/^      subroutine chkbnd(/;"	s
chkedge	VORPOL/chkedge.f	/^      subroutine chkedge(/;"	s
cinterp	Misc/cinterp.f	/^      subroutine cinterp(/;"	s
cleanup	VORPOL/caltnode.f	/^      subroutine cleanup(/;"	s
clear	Accelerator/DeviceMatrix.hpp	/^      __inline__ void clear() { free(); }$/;"	f	struct:DeviceMatrix
clear	Main/Graph1d.hpp	/^  void clear() {for(Int i=0; i<N; i++) y[i]=ValueType(0);}$/;"	f	class:Graph1d
clear	Main/Graph2d.hpp	/^  void clear()$/;"	f	class:Graph2d
clebsch	SingleSite/clebsch.f	/^      subroutine clebsch$/;"	s
clight	Main/SystemParameters.hpp	/^  Real clight;$/;"	m	class:LSMSSystemParameters
clm	Misc/Coeficients.hpp	/^  std::vector<Real> clm;$/;"	m	class:SphericalHarmonicsCoeficients
clock_time_	Misc/clock_time.c	/^double clock_time_()$/;"	f
cmtrins	MultipleScattering/cmtrins.f	/^      subroutine cmtrins(/;"	s
cmtruni	Misc/cmtruni.f	/^      subroutine cmtruni(/;"	s
cnewint	Misc/cnewint.f	/^      subroutine cnewint(/;"	s
comm	Communication/LSMSCommunication.hpp	/^  MPI_Comm comm;$/;"	m	class:LSMSCommunication
comm	Main/lsmsClass.hpp	/^  LSMSCommunication comm;$/;"	m	class:LSMS
communicateParameters	Communication/LSMSCommunication.cpp	/^void communicateParameters(LSMSCommunication &comm, LSMSSystemParameters &lsms, $/;"	f
communicateSingleAtomData	Communication/LSMSCommunication.cpp	/^void communicateSingleAtomData(LSMSCommunication &comm, int from, int to, int &local_id, AtomData &atom, int tag)$/;"	f
communicationRequest	Communication/LSMSCommunication.hpp	/^  std::vector<MPI_Request> communicationRequest;$/;"	m	class:TmatCommType
compareInitialAtomLevels	Main/initializeAtom.cpp	/^struct compareInitialAtomLevels {$/;"	s	file:
config_from_number	Main/ExhaustiveIsing.h	/^  void inline config_from_number(int n, double *ev)$/;"	f	class:ExhaustiveIsing1dEvecGenerator
config_number	Main/ExhaustiveIsing.h	/^  int config_number;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
congauss	Misc/congauss_c.f	/^      subroutine congauss(/;"	s
conj	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex conj(const cudaDoubleComplex &a) {$/;"	f
constraint	Misc/constraint.f	/^      subroutine constraint(/;"	s
copy	Accelerator/DeviceArray3d.hpp	/^      __inline__ void copy(Array3d<T> &a) {$/;"	f	class:DeviceArray3d
copy	Accelerator/DeviceMatrix.hpp	/^      __inline__ void copy(Matrix<T> &mat) {$/;"	f	struct:DeviceMatrix
copy	Accelerator/DeviceVector.hpp	/^      __inline__ void copy(const std::vector<T>& in) {$/;"	f	class:DeviceVector
copy_async	Accelerator/DeviceArray3d.hpp	/^      __inline__ void copy_async(Array3d<T> &a, cudaStream_t s) {$/;"	f	class:DeviceArray3d
copy_async	Accelerator/DeviceMatrix.hpp	/^      __inline__ void copy_async(Matrix<T> &mat, cudaStream_t s) {$/;"	f	struct:DeviceMatrix
copy_async	Accelerator/DeviceVector.hpp	/^      __inline__ void copy_async(const std::vector<T>& in,cudaStream_t s) {$/;"	f	class:DeviceVector
corden	SingleSite/AtomData.hpp	/^  Matrix<Real> corden, semcor;$/;"	m	class:AtomData
corslv	Core/corslv_c.f	/^      subroutine corslv(/;"	s
corslv	Core/corslv_c_htest.f	/^      subroutine corslv(/;"	s
cosine	Main/Graph1d.hpp	/^inline ValueType cosine(KeyType x)$/;"	f
cosine	Main/Graph2d.hpp	/^inline ValueType cosine(KeyType x)$/;"	f
cphot	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^const double cphot=274.072;$/;"	v
crystal	Main/lsmsClass.hpp	/^  CrystalParameters crystal;$/;"	m	class:LSMS
cublasCheckError	Accelerator/cudaCheckError.hpp	15;"	d
cudaCheckError	Accelerator/cudaCheckError.hpp	7;"	d
cudaDoubleComplex	Accelerator/cudaDoubleComplex.hpp	/^    __inline__ __device__ __host__ cudaDoubleComplex() {}$/;"	f	class:cudaDoubleComplex
cudaDoubleComplex	Accelerator/cudaDoubleComplex.hpp	/^    __inline__ __device__ __host__ cudaDoubleComplex(double x, double y) {$/;"	f	class:cudaDoubleComplex
cudaDoubleComplex	Accelerator/cudaDoubleComplex.hpp	/^class cudaDoubleComplex : public double2 {$/;"	c
cycleCount	Main/ExhaustiveIsing.h	/^  int cycleCount;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
cycleCount	Main/WangLandau.h	/^  int cycleCount;$/;"	m	class:WL1dEvecGenerator
cycleCount	Main/WangLandau2d.h	/^  int cycleCount;$/;"	m	class:WL2dEvecGenerator
dSqr	Main/buildLIZandCommLists.cpp	/^  Real dSqr;$/;"	m	class:LIZInfoType	file:
dSqrLess_LIZInfoType	Main/buildLIZandCommLists.cpp	/^bool dSqrLess_LIZInfoType(const LIZInfoType &x, const LIZInfoType &y) {return x.dSqr<y.dSqr;}$/;"	f
data	Accelerator/DeviceArray3d.hpp	/^      T* data;$/;"	m	class:DeviceArray3d
data	Accelerator/DeviceMatrix.hpp	/^      T* data;$/;"	m	struct:DeviceMatrix
data	Accelerator/DeviceVector.hpp	/^      T* data;$/;"	m	class:DeviceVector
deepst	Core/deepst_c.f	/^      subroutine deepst(/;"	s
defac	Misc/gaunt.f	/^      subroutine defac(/;"	s
default_iprint	Main/SystemParameters.hpp	/^  int print_node,default_iprint;$/;"	m	class:LSMSGlobals
delta	Main/Graph1d.hpp	/^  KeyType delta, minX, maxX;$/;"	m	class:Graph1d
deltaX	Main/Graph2d.hpp	/^  KeyType deltaX, minX, maxX, deltaY;$/;"	m	class:Graph2d
deltaY	Main/Graph2d.hpp	/^  KeyType deltaX, minX, maxX, deltaY;$/;"	m	class:Graph2d
devA	Accelerator/CULA_Common.h	/^!      common \/Accelerator_CULA\/ devA,devIPVT,devSZ$/;"	v
devA	Accelerator/CULA_Common.h	/^!      integer*8 devA, devIPVT$/;"	v
devIPVT	Accelerator/CULA_Common.h	/^!      common \/Accelerator_CULA\/ devA,devIPVT,devSZ$/;"	v
deviceConstants	Main/lsms.cpp	/^std::vector<void *> deviceConstants;$/;"	v
deviceConstants	Main/lsmsClass.cpp	/^std::vector<void *> deviceConstants;$/;"	v
deviceStorage	Main/lsms.cpp	/^void * deviceStorage;$/;"	v
deviceStorage	Main/lsmsClass.cpp	/^void * deviceStorage;$/;"	v
devptr_t	Accelerator/fortran.h	/^typedef size_t devptr_t;$/;"	t
dfv	Misc/dfv.f	/^      subroutine dfv(/;"	s
dfv_m	Misc/dfv_new.f	/^      subroutine dfv_m(/;"	s
dip	SingleSite/AtomData.hpp	/^  Real dip[6];$/;"	m	class:AtomData
dipint	VORPOL/VORPOL.hpp	/^  Complex dipint[6];$/;"	m	class:VoronoiPolyhedra
dirmagi1op	SingleSite/dirmag1-op.f	/^      subroutine dirmagi1op(/;"	s
dirmagi2op	SingleSite/dirmag2-op.f	/^      subroutine dirmagi2op(/;"	s
dirmago1op	SingleSite/dirmag1-op.f	/^      subroutine dirmago1op(/;"	s
dirmago2op	SingleSite/dirmag2-op.f	/^      subroutine dirmago2op(/;"	s
distributeTypes	Communication/distributeAtoms.cpp	/^int distributeTypes(CrystalParameters &crystal, LSMSCommunication &comm)$/;"	f
dmag1op	SingleSite/dirmag1-op.f	/^      subroutine dmag1op(/;"	s
dmag2op	SingleSite/dirmag2-op.f	/^      subroutine dmag2op(/;"	s
dmat	SingleSite/SingleSiteScattering.hpp	/^  Matrix<Complex> dmat, dmatp;$/;"	m	class:RelativisticScattererSolution
dmatp	SingleSite/SingleSiteScattering.hpp	/^  Matrix<Complex> dmat, dmatp;$/;"	m	class:RelativisticScattererSolution
dos	Main/ExhaustiveIsing.h	/^  double *dos; \/\/ std::vector<double> dos;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
dos	Main/WangLandau.h	/^  Graph1dMoments<double,double> dos, histo;$/;"	m	class:WL1dEvecGenerator
dos	Main/WangLandau2d.h	/^  Graph2d<double,double> dos, histo;$/;"	m	class:WL2dEvecGenerator
dosKernel	Main/WangLandau.h	/^  Kernel1d<double,double> dosKernel, histoKernel, nullKernel;$/;"	m	class:WL1dEvecGenerator
dosKernel	Main/WangLandau2d.h	/^  Kernel2d<double,double> dosKernel, histoKernel;$/;"	m	class:WL2dEvecGenerator
dos_out_name	Main/ExhaustiveIsing.h	/^  std::string dos_out_name;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
dos_out_name	Main/WangLandau.h	/^  std::string dos_out_name;$/;"	m	class:WL1dEvecGenerator
dos_out_name	Main/WangLandau2d.h	/^  std::string dos_out_name;$/;"	m	class:WL2dEvecGenerator
dos_real	SingleSite/AtomData.hpp	/^  Matrix<Real> dos_real;$/;"	m	class:AtomData
dosckint	SingleSite/AtomData.hpp	/^  Real dosckint[4];$/;"	m	class:AtomData
doscklast	SingleSite/AtomData.hpp	/^  Real doscklast[4];$/;"	m	class:AtomData
dosint	SingleSite/AtomData.hpp	/^  Real dosint[4];$/;"	m	class:AtomData
doslast	SingleSite/AtomData.hpp	/^  Real doslast[4];$/;"	m	class:AtomData
ebot	Main/SystemParameters.hpp	/^  Real ebot,etop,eitop,eibot;$/;"	m	class:EnergyContourParameters
ec	RadialGrid/Atom.hpp	/^  Matrix<Real> ec;$/;"	m	class:Atom
ec	SingleSite/AtomData.hpp	/^  Matrix<Real> ec;$/;"	m	class:AtomData
ecorv	SingleSite/AtomData.hpp	/^  Real ecorv[2], esemv[2];$/;"	m	class:AtomData
efOld	Main/mixing.cpp	/^  Real efOld, alpha;$/;"	m	class:EfMixing	file:
efTol	Main/lsmsClass.hpp	/^  Real efTol;$/;"	m	class:LSMS
efermi	RadialGrid/Atom.hpp	/^  Real alat,efermi;$/;"	m	class:Atom
efermi	SingleSite/AtomData.hpp	/^  Real alat, efermi;$/;"	m	class:AtomData
eibot	Main/SystemParameters.hpp	/^  Real ebot,etop,eitop,eibot;$/;"	m	class:EnergyContourParameters
eitop	Main/SystemParameters.hpp	/^  Real ebot,etop,eitop,eibot;$/;"	m	class:EnergyContourParameters
energy	Main/initializeAtom.cpp	/^  Real energy;$/;"	m	class:InitialAtomLevels	file:
energy	SingleSite/SingleSiteScattering.hpp	/^  Complex energy;$/;"	m	class:SingleScattererSolution
energyContour	Main/SystemParameters.hpp	/^  EnergyContourParameters energyContour;$/;"	m	class:LSMSSystemParameters
energyContourIntegration	Main/energyContourIntegration.cpp	/^void energyContourIntegration(LSMSCommunication &comm,LSMSSystemParameters &lsms, LocalTypeInfo &local)$/;"	f
energyDifference	Main/lsmsClass.hpp	/^  Real energyDifference;$/;"	m	class:LSMS
energyTolerance	Main/lsmsClass.hpp	/^  Real energyTolerance;$/;"	m	class:LSMS
epanechnikov	Main/Graph1d.hpp	/^inline ValueType epanechnikov(KeyType x)$/;"	f
epanechnikov	Main/Graph2d.hpp	/^inline ValueType epanechnikov(KeyType x)$/;"	f
epcorr	Potential/epcorr.f	/^      function epcorr(/;"	f
errMsg	Accelerator/fortran_thunking.c	/^static char *errMsg[5] = $/;"	v	file:
esemv	SingleSite/AtomData.hpp	/^  Real ecorv[2], esemv[2];$/;"	m	class:AtomData
etop	Main/SystemParameters.hpp	/^  Real ebot,etop,eitop,eibot;$/;"	m	class:EnergyContourParameters
ev	Main/EvecGenerator.h	/^  double ev[3];$/;"	m	class:ConstantEvecGenerator
evalsum	SingleSite/AtomData.hpp	/^  Real evalsum[4];$/;"	m	class:AtomData
evec	RadialGrid/Atom.hpp	/^  Real evec[3];$/;"	m	class:Atom
evec	SingleSite/AtomData.hpp	/^  Real evec[3], evecNew[3];$/;"	m	class:AtomData
evecNew	SingleSite/AtomData.hpp	/^  Real evec[3], evecNew[3];$/;"	m	class:AtomData
evecs	Main/SystemParameters.hpp	/^  Matrix<Real> position,evecs;$/;"	m	class:CrystalParameters
evecs_pointer	Main/ExhaustiveIsing.h	/^  double ** evecs_pointer;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
evecs_pointer	Main/WangLandau.h	/^  double ** evecs_pointer;$/;"	m	class:WL1dEvecGenerator
evecs_pointer	Main/WangLandau2d.h	/^  double ** evecs_pointer;$/;"	m	class:WL2dEvecGenerator
exchangeCorrelationE	SingleSite/AtomData.hpp	/^  Real exchangeCorrelationE;                     \/\/ Exchange-correlation energy$/;"	m	class:AtomData
exchangeCorrelationEnergy	SingleSite/AtomData.hpp	/^  Matrix<Real> exchangeCorrelationEnergy;        \/\/ Exchange-correlation energy$/;"	m	class:AtomData
exchangeCorrelationPotential	SingleSite/AtomData.hpp	/^  Matrix<Real> exchangeCorrelationPotential;     \/\/ Exchange-correlation potential$/;"	m	class:AtomData
exchangeCorrelationV	SingleSite/AtomData.hpp	/^  Real exchangeCorrelationV[2];                  \/\/ Exchange-correlation potential for spin up\/down$/;"	m	class:AtomData
exitLSMS	Communication/LSMSCommunication.cpp	/^void exitLSMS(LSMSCommunication &comm, int errorCode)$/;"	f
exp	Accelerator/cudaDoubleComplex.hpp	/^__device__ inline cudaDoubleComplex exp(const cudaDoubleComplex &a) {$/;"	f
expectTmatCommunication	Communication/LSMSCommunication.cpp	/^void expectTmatCommunication(LSMSCommunication &comm, LocalTypeInfo &local)$/;"	f
extendTo	Main/Graph1d.hpp	/^  inline void extendTo(KeyType x) {$/;"	f	class:Graph1d
extendTo	Main/Graph1dMoments.hpp	/^ inline void extendTo(KeyType x) {$/;"	f	class:Graph1dMoments
extendTo	Main/Graph2d.hpp	/^  inline void extendTo(KeyType x, KeyType y) {$/;"	f	class:Graph2d
extendToX	Main/Graph2d.hpp	/^  inline Int extendToX(KeyType x)$/;"	f	class:Graph2d
extendToY	Main/Graph2d.hpp	/^  inline void extendToY(Int ix, KeyType y) {$/;"	f	class:Graph2d
extrapolateQD0	Misc/bulirsch_stoer.f	/^      subroutine extrapolateQD0(/;"	s
extrapolateT0	Misc/bulirsch_stoer.f	/^      subroutine extrapolateT0(/;"	s
factorial	Misc/Gaunt.hpp	/^Int factorial(Int n)$/;"	f	namespace:NewGaunt
filter_edge	VORPOL/filter_edge.f	/^      subroutine filter_edge(/;"	s
finalizeCommunication	Communication/LSMSCommunication.cpp	/^void finalizeCommunication(void)$/;"	f
finalizeTmatCommunication	Communication/LSMSCommunication.cpp	/^void finalizeTmatCommunication(LSMSCommunication &comm)$/;"	f
find_sym	MultipleScattering/find_sym.f	/^      subroutine find_sym(/;"	s
first_instance	Main/SystemParameters.hpp	/^  int first_instance, number_of_instances;$/;"	m	class:AtomType
fit	Misc/fit.f	/^      subroutine fit(/;"	s
fitpot	Misc/fitpot.f	/^      subroutine fitpot(/;"	s
fixRMT	Main/SystemParameters.hpp	/^  int fixRMT; \/\/ n_fix_mt from LSMS_1:$/;"	m	class:LSMSSystemParameters
fj	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> gz,fz,gj,fj;$/;"	m	class:RelativisticScattererSolution
flatnessCriterion	Main/ExhaustiveIsing.h	/^  double flatnessCriterion;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
flatnessCriterion	Main/WangLandau.h	/^  double flatnessCriterion;$/;"	m	class:WL1dEvecGenerator
flatnessCriterion	Main/WangLandau2d.h	/^  double flatnessCriterion;$/;"	m	class:WL2dEvecGenerator
flipPerUpdate	Main/ExhaustiveIsing.h	/^  int flipPerUpdate, updateCycle;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
flipPerUpdate	Main/WangLandau.h	/^  int flipPerUpdate, updateCycle;$/;"	m	class:WL1dEvecGenerator
flipPerUpdate	Main/WangLandau2d.h	/^  int flipPerUpdate, updateCycle;$/;"	m	class:WL2dEvecGenerator
fmnaOp	Accelerator/operations.h	/^__device__ __forceinline__ cuComplex fmnaOp (cuComplex a, cuComplex b, $/;"	f
fmnaOp	Accelerator/operations.h	/^__device__ __forceinline__ cuDoubleComplex fmnaOp (cuDoubleComplex a, $/;"	f
fmnaOp	Accelerator/operations.h	/^__device__ __forceinline__ double fmnaOp (double a, double b, double c)$/;"	f
fmnaOp	Accelerator/operations.h	/^__device__ __forceinline__ float fmnaOp (float a, float b, float c)$/;"	f
fnpi	Misc/fnpi.f	/^      function fnpi(/;"	f
free	Accelerator/DeviceArray3d.hpp	/^      __inline__ void free() {$/;"	f	class:DeviceArray3d
free	Accelerator/DeviceMatrix.hpp	/^      __inline__ void free() {$/;"	f	struct:DeviceMatrix
free	Accelerator/DeviceVector.hpp	/^      __inline__ void free() {$/;"	f	class:DeviceVector
freeVal	Main/Graph2d.hpp	/^  void freeVal() {for(Int i=0; i<val.size(); i++) {delete val[i]; val[i]=NULL; Ny[i]=0;} }$/;"	f	class:Graph2d
frequency	Main/WangLandau.h	/^  struct {double kappa, lambda, omega; int frequency, changes;} globalUpdate;$/;"	m	struct:WL1dEvecGenerator::__anon3
fstop	Misc/fstop.f	/^      subroutine fstop(/;"	s
fz	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> gz,fz,gj,fj;$/;"	m	class:RelativisticScattererSolution
g	LuaInterface/RadialGrid_lua.cpp	/^  RadialGrid *g;$/;"	m	struct:__anon4	file:
g	RadialGrid/RadialPotential.hpp	/^  RadialGrid *g;$/;"	m	class:RadialPotential
gamma	Main/ExhaustiveIsing.h	/^  double gamma, gammaFinal;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
gamma	Main/WangLandau.h	/^  double gamma, gammaFinal;$/;"	m	class:WL1dEvecGenerator
gamma	Main/WangLandau2d.h	/^  double gamma, gammaFinal;$/;"	m	class:WL2dEvecGenerator
gammaFinal	Main/ExhaustiveIsing.h	/^  double gamma, gammaFinal;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
gammaFinal	Main/WangLandau.h	/^  double gamma, gammaFinal;$/;"	m	class:WL1dEvecGenerator
gammaFinal	Main/WangLandau2d.h	/^  double gamma, gammaFinal;$/;"	m	class:WL2dEvecGenerator
gauleg	Misc/gauleg.f	/^      subroutine gauleg(/;"	s
gaunt	Misc/Gaunt.hpp	/^R gaunt(Int lp, Int l1, Int l2, Int mp, Int m1, Int m2)$/;"	f
gaunt	Misc/Gaunt_gmp.hpp	/^R gaunt(Int lp, Int l1, Int l2, Int mp, Int m1, Int m2)$/;"	f
gaunt	Misc/gaunt.f	/^      function gaunt(/;"	f
gauntCoeficients	Main/lsms.cpp	/^GauntCoeficients gauntCoeficients;$/;"	v
gauntCoeficients	Main/lsmsClass.cpp	/^GauntCoeficients gauntCoeficients;$/;"	v
gauntCoeficients	Test/WriteTMats.cpp	/^GauntCoeficients gauntCoeficients;$/;"	v
gauntCoeficients	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^GauntCoeficients gauntCoeficients;$/;"	v
gaussian	Main/Graph1d.hpp	/^inline ValueType gaussian(KeyType x)$/;"	f
gaussian	Main/Graph2d.hpp	/^inline ValueType gaussian(KeyType x)$/;"	f
gcd	Misc/Gaunt.hpp	/^Int gcd(Int i, Int j)$/;"	f	namespace:NewGaunt
gen_test_mat	MultipleScattering/gen_test_mat.f	/^      subroutine gen_test_mat(/;"	s
generateEvec	Main/EvecGenerator.h	/^  bool generateEvec(int inst, double *evecs, double energy)$/;"	f	class:RandomEvecGenerator
generateEvec	Main/EvecGenerator.h	/^  bool generateEvec(int instance, double *evecs, double energy)$/;"	f	class:ConstantEvecGenerator
generateEvec	Main/EvecGenerator.h	/^  virtual bool generateEvec(int instance, double *evecs, double energy) { return false; }$/;"	f	class:EvecGenerator
generateEvec	Main/EvecGenerator.h	/^  virtual bool generateEvec(int instance, double *evecs, double energy, bool *accepted)$/;"	f	class:EvecGenerator
generateEvec	Main/EvecGenerator.h	/^  virtual bool generateEvec(int instance, double *evecs, double energy, double magnetization, bool *accepted)$/;"	f	class:EvecGenerator
generateEvec	Main/ExhaustiveIsing.h	/^  bool generateEvec(int instance, double *evecs) {std::cerr<<"Need energy for WL1dEvecGenerator\\n"; exit(1);}$/;"	f	class:ExhaustiveIsing1dEvecGenerator
generateEvec	Main/ExhaustiveIsing.h	/^bool ExhaustiveIsing1dEvecGenerator::generateEvec(int instance, double *evecs, double energy)$/;"	f	class:ExhaustiveIsing1dEvecGenerator
generateEvec	Main/WangLandau.h	/^  bool generateEvec(int instance, double *evecs) {std::cerr<<"Need energy for WL1dEvecGenerator\\n"; exit(1);}$/;"	f	class:WL1dEvecGenerator
generateEvec	Main/WangLandau.h	/^  bool generateEvec(int instance, double *evecs, double energy) {bool h; return generateEvec(instance, evecs, energy, &h);}$/;"	f	class:WL1dEvecGenerator
generateEvec	Main/WangLandau.h	/^bool WL1dEvecGenerator<RNG>::generateEvec(int instance, double *evecs, double energy, bool *accepted)$/;"	f	class:WL1dEvecGenerator
generateEvec	Main/WangLandau.h	/^bool WL1dEvecGenerator<RNG>::generateEvec(int instance, double *evecs, double energy, double magnetization, bool *accepted)$/;"	f	class:WL1dEvecGenerator
generateEvec	Main/WangLandau2d.h	/^  bool generateEvec(int instance, double *evecs) {std::cerr<<"Need energy for WL2dEvecGenerator\\n"; exit(1);}$/;"	f	class:WL2dEvecGenerator
generateEvec	Main/WangLandau2d.h	/^  bool generateEvec(int instance, double *evecs, double energy, double magnetization) {bool h; return generateEvec(instance, evecs, energy, magnetization, &h);}$/;"	f	class:WL2dEvecGenerator
generateEvec	Main/WangLandau2d.h	/^bool WL2dEvecGenerator<RNG>::generateEvec(int instance, double *evecs, double energy, double magnetization,$/;"	f	class:WL2dEvecGenerator
generateNewMesh	SingleSite/AtomData.hpp	/^  bool generateNewMesh;$/;"	m	class:AtomData
generateRadialGrid	RadialGrid/RadialGrid.cpp	/^void generateRadialGrid(RadialGrid *g, Real x0, Real h, int N, int jmt, int jws)$/;"	f
generateRadialGridLua	LuaInterface/RadialGrid_lua.cpp	/^static int generateRadialGridLua(lua_State *L)$/;"	f	file:
generateRadialMesh	SingleSite/AtomData.hpp	/^  void generateRadialMesh(void)$/;"	f	class:AtomData
generateUnsampledEvec	Main/EvecGenerator.h	/^  virtual bool generateUnsampledEvec(int instance, double *evecs, double energy) {return generateEvec(instance,evecs,energy); }$/;"	f	class:EvecGenerator
generateUnsampledEvec	Main/WangLandau.h	/^  bool generateUnsampledEvec(int instance, double *evecs, double energy) {initializeEvec(instance, evecs); return false;}$/;"	f	class:WL1dEvecGenerator
generateUnsampledEvec	Main/WangLandau2d.h	/^  bool generateUnsampledEvec(int instance, double *evecs, double energy) {initializeEvec(instance, evecs); return false;}$/;"	f	class:WL2dEvecGenerator
genpot	Potential/genpot_c.f	/^      subroutine genpot(/;"	s
getCenter	Main/Graph1d.hpp	/^  Int getCenter() {return center;}$/;"	f	class:Kernel1d
getCenterX	Main/Graph2d.hpp	/^  Int getCenterX() {return centerX;}$/;"	f	class:Kernel2d
getCenterY	Main/Graph2d.hpp	/^  Int getCenterY() {return centerY;}$/;"	f	class:Kernel2d
getDelta	Main/Graph1d.hpp	/^  inline KeyType getDelta() {return delta;}$/;"	f	class:Graph1d
getDeltaX	Main/Graph2d.hpp	/^  inline KeyType getDeltaX() {return deltaX;}$/;"	f	class:Graph2d
getDeltaY	Main/Graph2d.hpp	/^  inline KeyType getDeltaY() {return deltaY;}$/;"	f	class:Graph2d
getEf	Main/lsmsClass.hpp	/^  Real getEf(void) {return lsms.chempot;}$/;"	f	class:LSMS
getEvec	Main/lsmsClass.cpp	/^void LSMS::getEvec(Real *ev)$/;"	f	class:LSMS
getEvec	Main/lsmsClass.cpp	/^void LSMS::getEvec(std::vector<std::vector<Real> > &ev)$/;"	f	class:LSMS
getFileSize	Misc/readLastLine.cpp	/^long getFileSize(FILE *fp)$/;"	f
getKernelName	Main/Graph1d.hpp	/^void getKernelName(KernelType t, std::string &n)$/;"	f
getKernelName	Main/Graph2d.hpp	/^void getKernelName(KernelType t, std::string &n)$/;"	f
getKernelType	Main/Graph1d.hpp	/^KernelType getKernelType(std::string &n)$/;"	f
getKernelType	Main/Graph2d.hpp	/^KernelType getKernelType(std::string &n)$/;"	f
getMag	Main/lsmsClass.cpp	/^void LSMS::getMag(Real *ev)$/;"	f	class:LSMS
getMag	Main/lsmsClass.cpp	/^void LSMS::getMag(std::vector<std::vector<Real> > &ev)$/;"	f	class:LSMS
getMaxVal	Main/Graph2d.hpp	/^  inline ValueType getMaxVal() { ValueType h=std::numeric_limits<ValueType>::min();$/;"	f	class:Graph2d
getMaxValWithBorders	Main/Graph2d.hpp	/^  inline ValueType getMaxValWithBorders(KeyType xBorder, KeyType yBorder)$/;"	f	class:Graph2d
getMaxX	Main/Graph1d.hpp	/^  inline KeyType getMaxX() {return maxX;}$/;"	f	class:Graph1d
getMaxX	Main/Graph2d.hpp	/^  inline KeyType getMaxX() {return maxX;}$/;"	f	class:Graph2d
getMaxY	Main/Graph1d.hpp	/^  inline ValueType getMaxY() { ValueType h=std::numeric_limits<ValueType>::min();$/;"	f	class:Graph1d
getMaxY	Main/Graph2d.hpp	/^  inline KeyType getMaxY(Int ix) {return maxY[ix];}$/;"	f	class:Graph2d
getMaxYInInterval	Main/Graph1d.hpp	/^  inline ValueType getMaxYInInterval(KeyType b, KeyType t) {$/;"	f	class:Graph1d
getMeanY	Main/Graph1d.hpp	/^  inline ValueType getMeanY() {$/;"	f	class:Graph1d
getMeanYInInterval	Main/Graph1d.hpp	/^  inline ValueType getMeanYInInterval(KeyType b, KeyType t) {$/;"	f	class:Graph1d
getMinMaxY	Main/Graph1d.hpp	/^  inline void getMinMaxY(ValueType &hMin, ValueType &hMax) {$/;"	f	class:Graph1d
getMinMaxYInInterval	Main/Graph1d.hpp	/^  inline void getMinMaxYInInterval(KeyType b, KeyType t, ValueType &hMin, ValueType &hMax) {$/;"	f	class:Graph1d
getMinVal	Main/Graph2d.hpp	/^  inline ValueType getMinVal() { ValueType h=std::numeric_limits<ValueType>::max();$/;"	f	class:Graph2d
getMinValWithBorders	Main/Graph2d.hpp	/^  inline ValueType getMinValWithBorders(KeyType xBorder, KeyType yBorder)$/;"	f	class:Graph2d
getMinX	Main/Graph1d.hpp	/^  inline KeyType getMinX() {return minX;}$/;"	f	class:Graph1d
getMinX	Main/Graph2d.hpp	/^  inline KeyType getMinX() {return minX;}$/;"	f	class:Graph2d
getMinY	Main/Graph1d.hpp	/^  inline ValueType getMinY() { ValueType h=std::numeric_limits<ValueType>::max();$/;"	f	class:Graph1d
getMinY	Main/Graph2d.hpp	/^  inline KeyType getMinY(Int ix) {return minY[ix];}$/;"	f	class:Graph2d
getMinYInInterval	Main/Graph1d.hpp	/^  inline ValueType getMinYInInterval(KeyType b, KeyType t) {$/;"	f	class:Graph1d
getMomentAtIdx	Main/Graph1dMoments.hpp	/^  inline ValueType getMomentAtIdx(Int i, int _k)$/;"	f	class:Graph1dMoments
getN	Main/Graph1d.hpp	/^  inline Int getN() {return N;}$/;"	f	class:Graph1d
getNumberOfMoments	Main/Graph1dMoments.hpp	/^  int getNumberOfMoments() {return k;}$/;"	f	class:Graph1dMoments
getNumberOfSamplesAtIdx	Main/Graph1dMoments.hpp	/^  inline Int getNumberOfSamplesAtIdx(Int i)$/;"	f	class:Graph1dMoments
getNx	Main/Graph2d.hpp	/^  inline Int getNx() {return Nx;}$/;"	f	class:Graph2d
getNy	Main/Graph2d.hpp	/^  inline Int getNy(Int ix) {return Ny[ix];}$/;"	f	class:Graph2d
getRadialGridFromPotentialLua	LuaInterface/RadialPotential_lua.cpp	/^static int getRadialGridFromPotentialLua(lua_State *L)$/;"	f	file:
getRadialGridLua	LuaInterface/RadialGrid_lua.cpp	/^static int getRadialGridLua(lua_State *L)$/;"	f	file:
getRadialGridXLua	LuaInterface/RadialGrid_lua.cpp	/^static int getRadialGridXLua(lua_State *L)$/;"	f	file:
getRadialPotentialLua	LuaInterface/RadialPotential_lua.cpp	/^static int getRadialPotentialLua(lua_State *L)$/;"	f	file:
getWidth	Main/Graph1d.hpp	/^  KeyType getWidth() {return width;}$/;"	f	class:Kernel1d
getWidthX	Main/Graph2d.hpp	/^  KeyType getWidthX() {return widthX;}$/;"	f	class:Kernel2d
getWidthY	Main/Graph2d.hpp	/^  KeyType getWidthY() {return widthY;}$/;"	f	class:Kernel2d
getclm	Misc/getclm.f	/^      subroutine getclm(/;"	s
getcor	Core/getcor_c.f	/^      subroutine getcor(/;"	s
getgijmad	Madelung/getgijmad.f	/^      subroutine getgijmad(/;"	s
getkncut	Madelung/getkncut.f	/^      subroutine getkncut(/;"	s
getqm_mt	Potential/getqm_mt.f	/^      subroutine getqm_mt(/;"	s
getrscut	Madelung/getrscut.f	/^      subroutine getrscut(/;"	s
getstruc	Madelung/getstruc.f	/^      subroutine getstruc(/;"	s
gettaucl	MultipleScattering/gettaucl_c.f	/^      subroutine gettaucl(/;"	s
gettaucl	MultipleScattering/gettaucl_c_bu.f	/^      subroutine gettaucl(/;"	s
getvmt	Potential/getvmt.cpp	/^void getvmt(LSMSSystemParameters lsms, AtomData &atom, CrystalParameters &crystal, Real qsub[], int &mytype, Real &vmt, Real &vmt1, Real &u0)$/;"	f
gf_local	MultipleScattering/gf_local.f	/^      subroutine gf_local(/;"	s
gj	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> gz,fz,gj,fj;$/;"	m	class:RelativisticScattererSolution
global	Main/SystemParameters.hpp	/^  LSMSGlobals global;$/;"	m	class:LSMSSystemParameters
global	Test/buildKKRMatrixTest/TestStructures.hpp	/^  LSMSGlobals global;$/;"	m	class:LSMSSystemParameters
globalAndNodeEq_NodeIndexInfo	Main/buildLIZandCommLists.cpp	/^bool globalAndNodeEq_NodeIndexInfo(const NodeIdxInfo &x, const NodeIdxInfo &y)$/;"	f
globalEq_NodeIndexInfo	Main/buildLIZandCommLists.cpp	/^bool globalEq_NodeIndexInfo(const NodeIdxInfo &x, const NodeIdxInfo &y) {return x.globalIdx==y.globalIdx;}$/;"	f
globalIdx	Communication/LSMSCommunication.hpp	/^  std::vector<int> globalIdx;$/;"	m	class:TmatCommType
globalIdx	Main/buildLIZandCommLists.cpp	/^  int node, localIdx, globalIdx;$/;"	m	class:NodeIdxInfo	file:
globalLess_NodeIndexInfo	Main/buildLIZandCommLists.cpp	/^bool globalLess_NodeIndexInfo(const NodeIdxInfo &x, const NodeIdxInfo &y) {return x.globalIdx<y.globalIdx;}$/;"	f
globalMax	Communication/LSMSCommunication.hpp	/^void globalMax(LSMSCommunication &comm,T &a)$/;"	f
globalSum	Communication/LSMSCommunication.hpp	/^void globalSum(LSMSCommunication &comm,T &a)$/;"	f
globalSum	Communication/LSMSCommunication.hpp	/^void globalSum(LSMSCommunication &comm,T *a, int n)$/;"	f
globalUpdate	Main/WangLandau.h	/^  struct {double kappa, lambda, omega; int frequency, changes;} globalUpdate;$/;"	m	class:WL1dEvecGenerator	typeref:struct:WL1dEvecGenerator::__anon3
global_id	Main/SystemParameters.hpp	/^  std::vector<int> global_id;$/;"	m	class:LocalTypeInfo
gptl_def	Main/Makefile	/^  gptl_def=$/;"	m
gptl_def	Main/Makefile	/^  gptl_def=-DUSE_GPTL$/;"	m
green_function	MultipleScattering/green_function.f	/^      subroutine green_function(/;"	s
greenint	SingleSite/AtomData.hpp	/^  Matrix<Real> greenint;$/;"	m	class:AtomData
greenlast	SingleSite/AtomData.hpp	/^  Matrix<Real> greenlast;$/;"	m	class:AtomData
grid	Main/SystemParameters.hpp	/^  int grid, npts;$/;"	m	class:EnergyContourParameters
groupSize	Main/SystemParameters.hpp	/^  int groupSize() {int nume=npts; if(grid==0) nume=1; else if(grid==2) nume++; return std::min(nume,maxGroupSize);}$/;"	f	class:EnergyContourParameters
grwylm	VORPOL/VORPOL.hpp	/^  Matrix<Real> gwwylm, grwylm;$/;"	m	class:VoronoiPolyhedra
gwwylm	VORPOL/VORPOL.hpp	/^  Matrix<Real> gwwylm, grwylm;$/;"	m	class:VoronoiPolyhedra
gz	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> gz,fz,gj,fj;$/;"	m	class:RelativisticScattererSolution
h	RadialGrid/RadialGrid.hpp	/^  Real h;$/;"	m	class:RadialGrid
h	SingleSite/AtomData.hpp	/^  Real xstart,rmt,h;$/;"	m	class:AtomData
hMinimum	Main/ExhaustiveIsing.h	/^  int hMinimum;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
hMinimum	Main/WangLandau.h	/^  double hMinimum;$/;"	m	class:WL1dEvecGenerator
hMinimum	Main/WangLandau2d.h	/^  double hMinimum;$/;"	m	class:WL2dEvecGenerator
header	RadialGrid/Atom.hpp	/^  char header[80];$/;"	m	class:Atom
header	SingleSite/AtomData.hpp	/^  char header[80];$/;"	m	class:AtomData
histo	Main/ExhaustiveIsing.h	/^  int *histo; \/\/ std::vector<int> histo;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
histo	Main/WangLandau.h	/^  Graph1dMoments<double,double> dos, histo;$/;"	m	class:WL1dEvecGenerator
histo	Main/WangLandau2d.h	/^  Graph2d<double,double> dos, histo;$/;"	m	class:WL2dEvecGenerator
histoKernel	Main/WangLandau.h	/^  Kernel1d<double,double> dosKernel, histoKernel, nullKernel;$/;"	m	class:WL1dEvecGenerator
histoKernel	Main/WangLandau2d.h	/^  Kernel2d<double,double> dosKernel, histoKernel;$/;"	m	class:WL2dEvecGenerator
histogramUpdateMode	Main/WangLandau.h	/^  bool histogramUpdateMode;$/;"	m	class:WL1dEvecGenerator
iFactors	Main/lsms.cpp	/^IFactors iFactors;$/;"	v
iFactors	Main/lsmsClass.cpp	/^IFactors iFactors;$/;"	v
iFactors	Test/WriteTMats.cpp	/^IFactors iFactors;$/;"	v
iFactors	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^IFactors iFactors;$/;"	v
iabs	Misc/Gaunt.hpp	/^Int iabs(Int i)$/;"	f	namespace:NewGaunt
iabs	Misc/Gaunt_gmp.hpp	/^Int iabs(Int i)$/;"	f	namespace:NewGaunt
id	RadialGrid/Atom.hpp	/^  int id;$/;"	m	class:Atom
idx	Main/Graph1d.hpp	/^  inline Int idx(KeyType x) {return (N==0) ? -1 : Int(N*(x-minX)\/(maxX-minX)); }  $/;"	f	class:Graph1d
idx	Main/buildLIZandCommLists.cpp	/^  int idx;$/;"	m	class:LIZInfoType	file:
idx2f	MultipleScattering/zblock_lu_CULA.F	/^      integer function idx2f(/;"	f
idx2f	MultipleScattering/zblock_lu_LIBSCI.f	/^      integer function idx2f(/;"	f
idx2f	MultipleScattering/zblock_lu_cray.f	/^      integer function idx2f(/;"	f
idxX	Main/Graph2d.hpp	/^  inline Int idxX(KeyType x)$/;"	f	class:Graph2d
idxY	Main/Graph2d.hpp	/^  inline Int idxY(Int ix, KeyType y)$/;"	f	class:Graph2d
ifacts	Misc/ifacts_c.f	/^      subroutine ifacts(/;"	s
illp	Misc/Coeficients.hpp	/^  Matrix<Complex> illp;$/;"	m	class:IFactors
ilp1	Misc/Coeficients.hpp	/^  std::vector<Complex> ilp1;$/;"	m	class:IFactors
imag	Accelerator/cudaDoubleComplex.hpp	/^    __inline__ __device__ __host__ double imag() { return y;}$/;"	f	class:cudaDoubleComplex
imax	Accelerator/fortran_thunking.c	68;"	d	file:
imin	Accelerator/fortran_thunking.c	67;"	d	file:
indz	SingleSite/SingleSiteScattering.hpp	/^  Matrix<int> indz;$/;"	m	class:RelativisticScattererSolution
init	Misc/Coeficients.hpp	/^  void init(LSMSSystemParameters &lsms, AngularMomentumIndices &a, SphericalHarmonicsCoeficients &s)$/;"	f	class:GauntCoeficients
init	Misc/Coeficients.hpp	/^  void init(LSMSSystemParameters &lsms, int _lmax)$/;"	f	class:IFactors
init	Misc/Coeficients.hpp	/^  void init(int _lmax)$/;"	f	class:SphericalHarmonicsCoeficients
init	Misc/Indices.hpp	/^  void init(int _lmax)$/;"	f	class:AngularMomentumIndices
init	SingleSite/SingleSiteScattering.hpp	/^  void init(LSMSSystemParameters &lsms, AtomData &a, Complex *tmat_g_store=NULL)$/;"	f	class:NonRelativisticSingleScattererSolution
initCosine	Main/Graph1d.hpp	/^void initCosine(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initCosine	Main/Graph2d.hpp	/^void initCosine(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initEpanechnikov	Main/Graph1d.hpp	/^void initEpanechnikov(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initEpanechnikov	Main/Graph2d.hpp	/^void initEpanechnikov(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initGaussian	Main/Graph1d.hpp	/^void initGaussian(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initGaussian	Main/Graph2d.hpp	/^void initGaussian(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initKernel	Main/Graph1d.hpp	/^void initKernel(KernelType t, Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initKernel	Main/Graph2d.hpp	/^void initKernel(KernelType t, Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initKernelFromFunction	Main/Graph2d.hpp	/^void initKernelFromFunction(Kernel2d<ValueType, KeyType, Int> &k, ValueType (*f)(KeyType))$/;"	f
initLSMSLuaInterface	LuaInterface/LuaInterface.cpp	/^void initLSMSLuaInterface(lua_State *L)$/;"	f
initNone	Main/Graph1d.hpp	/^void initNone(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initQuartic	Main/Graph1d.hpp	/^void initQuartic(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initQuartic	Main/Graph2d.hpp	/^void initQuartic(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initTriWight	Main/Graph1d.hpp	/^void initTriWight(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initTriWight	Main/Graph2d.hpp	/^void initTriWight(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initTriangle	Main/Graph1d.hpp	/^void initTriangle(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initTriangle	Main/Graph2d.hpp	/^void initTriangle(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initUniform	Main/Graph1d.hpp	/^void initUniform(Kernel1d<ValueType, KeyType, Int> &k)$/;"	f
initUniform	Main/Graph2d.hpp	/^void initUniform(Kernel2d<ValueType, KeyType, Int> &k)$/;"	f
initialAtomSetup	Main/PotentialIO.cpp	/^void initialAtomSetup(LSMSCommunication &comm,LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local)$/;"	f
initializeAtom	Main/initializeAtom.cpp	/^void initializeAtom(AtomData &a)$/;"	f
initializeCommunication	Communication/LSMSCommunication.cpp	/^void initializeCommunication(LSMSCommunication &comm)$/;"	f
initializeCommunication	Communication/LSMSCommunication.cpp	/^void initializeCommunication(LSMSCommunication &comm, MPI_Comm mpiCommunicator)$/;"	f
initializeEvec	Main/EvecGenerator.h	/^  virtual void initializeEvec(int instance, double *evecs) { generateEvec(instance,evecs,0.0); }$/;"	f	class:EvecGenerator
initializeEvec	Main/EvecGenerator.h	/^  void initializeEvec(int instance, double *evecs) { generateEvec(instance,evecs,0.0); }$/;"	f	class:RandomEvecGenerator
initializeEvec	Main/EvecGenerator.h	/^  void initializeEvec(int instance, double *evecs)$/;"	f	class:ConstantEvecGenerator
initializeEvec	Main/ExhaustiveIsing.h	/^void ExhaustiveIsing1dEvecGenerator::initializeEvec(int inst, double *evecs)$/;"	f	class:ExhaustiveIsing1dEvecGenerator
initializeEvec	Main/WangLandau.h	/^void WL1dEvecGenerator<RNG>::initializeEvec(int inst, double *evecs)$/;"	f	class:WL1dEvecGenerator
initializeEvec	Main/WangLandau2d.h	/^void WL2dEvecGenerator<RNG>::initializeEvec(int inst, double *evecs)$/;"	f	class:WL2dEvecGenerator
initializeNewPotentials	Main/initializeAtom.cpp	/^int initializeNewPotentials(LSMSCommunication &comm,LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local)$/;"	f
initwave	Misc/initwave.f	/^      subroutine initwave(/;"	s
int_zz_zj	MultipleScattering/int_zz_zj.f	/^      subroutine int_zz_zj(/;"	s
inter	VORPOL/inter.f	/^      subroutine inter(/;"	s
inter_dip	VORPOL/inter_dip.f	/^      subroutine inter_dip(/;"	s
interf	Madelung/interf.f	/^      subroutine interf(/;"	s
interfsmr	Madelung/interfsmr.f	/^      subroutine interfsmr(/;"	s
interp	Misc/interp.f	/^      subroutine interp(/;"	s
interpolatePotential	Potential/interpolatePotential.cpp	/^void interpolatePotential(LSMSSystemParameters &lsms, AtomData &atom)$/;"	f
interstitial	VORPOL/interstitial.f	/^      subroutine interstitial(/;"	s
interval	Main/ExhaustiveIsing.h	/^  double xMin, xMax, interval;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
intphi	VORPOL/intphi.f	/^      subroutine intphi(/;"	s
intpl0	VORPOL/intpl0.f	/^      subroutine intpl0(/;"	s
inv_scale_tau00	MultipleScattering/inv_scale_tau00.f	/^      subroutine inv_scale_tau00(/;"	s
invals	Core/invals_c.f	/^      subroutine invals(/;"	s
invm3	VORPOL/invm3.f	/^      subroutine invm3(/;"	s
inwhnk	Core/inwhnk_c.f	/^      subroutine inwhnk(/;"	s
inws	Core/inws_c.f	/^      subroutine inws(/;"	s
ipcore	Main/SystemParameters.hpp	/^  int iprpts,ipcore;$/;"	m	class:LSMSGlobals
iprint	Main/SystemParameters.hpp	/^  int iprint;$/;"	m	class:LSMSGlobals
iprint	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int iprint;$/;"	m	class:LSMSGlobals
iprpts	Main/SystemParameters.hpp	/^  int iprpts,ipcore;$/;"	m	class:LSMSGlobals
istop	Main/SystemParameters.hpp	/^  char istop[32];$/;"	m	class:LSMSGlobals
istop	Test/buildKKRMatrixTest/TestStructures.hpp	/^  char istop[32];$/;"	m	class:LSMSGlobals
janake	TotalEnergy/janake_c.f	/^      subroutine janake(/;"	s
jlr	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> zlr,jlr;$/;"	m	class:NonRelativisticSingleScattererSolution
jmt	RadialGrid/RadialGrid.hpp	/^  int N,jmt,jws;$/;"	m	class:RadialGrid
jmt	SingleSite/AtomData.hpp	/^  int jmt,jws;$/;"	m	class:AtomData
jws	RadialGrid/RadialGrid.hpp	/^  int N,jmt,jws;$/;"	m	class:RadialGrid
jws	SingleSite/AtomData.hpp	/^  int jmt,jws;$/;"	m	class:AtomData
k	Main/Graph1dMoments.hpp	/^  int k;$/;"	m	class:Graph1dMoments
kappa	Main/WangLandau.h	/^  struct {double kappa, lambda, omega; int frequency, changes;} globalUpdate;$/;"	m	struct:WL1dEvecGenerator::__anon3
kc	RadialGrid/Atom.hpp	/^  Matrix<int> nc,lc,kc;$/;"	m	class:Atom
kc	SingleSite/AtomData.hpp	/^  Matrix<int> nc, lc, kc;$/;"	m	class:AtomData
kernelType	Main/WangLandau.h	/^  KernelType kernelType;$/;"	m	class:WL1dEvecGenerator
kernelType	Main/WangLandau2d.h	/^  KernelType kernelType;$/;"	m	class:WL2dEvecGenerator
keyFromIdx	Main/Graph1d.hpp	/^  inline KeyType keyFromIdx(Int i) { return minX+(KeyType(i)+KeyType(0.5))*delta;}$/;"	f	class:Graph1d
keyFromIdxX	Main/Graph2d.hpp	/^  inline KeyType keyFromIdxX(Int ix)$/;"	f	class:Graph2d
keyFromIdxY	Main/Graph2d.hpp	/^  inline KeyType keyFromIdxY(Int ix, Int iy)$/;"	f	class:Graph2d
kkrsz	RadialGrid/Atom.hpp	/^  int lmax,kkrsz;$/;"	m	class:Atom
kkrsz	SingleSite/AtomData.hpp	/^  int lmax, kkrsz;$/;"	m	class:AtomData
kkrsz	SingleSite/SingleSiteScattering.hpp	/^  int kkrsz;$/;"	m	class:SingleScattererSolution
kkrsz	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int lmax,kkrsz;$/;"	m	class:AtomData
l	Main/initializeAtom.cpp	/^  int n,l;$/;"	m	class:InitialAtomLevels	file:
lDim	Accelerator/DeviceMatrix.hpp	/^      size_type lDim;$/;"	m	struct:DeviceMatrix
lDim1	Accelerator/DeviceArray3d.hpp	/^      size_type nRow,nCol,nSlice,lDim1,lDim2,lDim12;$/;"	m	class:DeviceArray3d
lDim12	Accelerator/DeviceArray3d.hpp	/^      size_type nRow,nCol,nSlice,lDim1,lDim2,lDim12;$/;"	m	class:DeviceArray3d
lDim2	Accelerator/DeviceArray3d.hpp	/^      size_type nRow,nCol,nSlice,lDim1,lDim2,lDim12;$/;"	m	class:DeviceArray3d
lDimTmatStore	Main/SystemParameters.hpp	/^  int lDimTmatStore,blkSizeTmatStore;$/;"	m	class:LocalTypeInfo
lDimTmatStore	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int lDimTmatStore;$/;"	m	class:LocalTypeInfo
l_dim	Accelerator/DeviceMatrix.hpp	/^      __inline__ __host__ __device__ size_type l_dim() const { return lDim; }$/;"	f	struct:DeviceMatrix
l_dim1	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ size_type l_dim1() const { return lDim1; }$/;"	f	class:DeviceArray3d
l_dim2	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ size_type l_dim2() const { return lDim2;}$/;"	f	class:DeviceArray3d
lambda	Main/WangLandau.h	/^  struct {double kappa, lambda, omega; int frequency, changes;} globalUpdate;$/;"	m	struct:WL1dEvecGenerator::__anon3
lastAccepted	Main/WangLandau.h	/^  std::vector<int> lastAccepted;$/;"	m	class:WL1dEvecGenerator
lastAccepted	Main/WangLandau2d.h	/^  std::vector<int> lastAccepted;$/;"	m	class:WL2dEvecGenerator
lastAcceptedEnergy	Main/WangLandau.h	/^  std::vector<double> lastAcceptedEnergy;$/;"	m	class:WL1dEvecGenerator
lastAcceptedEnergy	Main/WangLandau2d.h	/^  std::vector<double> lastAcceptedEnergy;$/;"	m	class:WL2dEvecGenerator
lastAcceptedEvec	Main/WangLandau.h	/^  std::vector<double> lastAcceptedEvec;$/;"	m	class:WL1dEvecGenerator
lastAcceptedEvec	Main/WangLandau2d.h	/^  std::vector<double> lastAcceptedEvec;$/;"	m	class:WL2dEvecGenerator
lastAcceptedMagnetization	Main/WangLandau2d.h	/^  std::vector<double> lastAcceptedMagnetization;$/;"	m	class:WL2dEvecGenerator
lastChange	Main/ExhaustiveIsing.h	/^  std::vector<int> lastChange;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
lastChange	Main/WangLandau.h	/^  std::vector<int> lastChange;$/;"	m	class:WL1dEvecGenerator
lastChange	Main/WangLandau2d.h	/^  std::vector<int> lastChange;$/;"	m	class:WL2dEvecGenerator
lattice	Madelung/lattice.f	/^      subroutine lattice(/;"	s
lc	RadialGrid/Atom.hpp	/^  Matrix<int> nc,lc,kc;$/;"	m	class:Atom
lc	SingleSite/AtomData.hpp	/^  Matrix<int> nc, lc, kc;$/;"	m	class:AtomData
lmax	Main/SystemParameters.hpp	/^  int lmax,Z,Zc,Zs,Zv;$/;"	m	class:AtomType
lmax	Misc/Coeficients.hpp	/^  int lmax;$/;"	m	class:GauntCoeficients
lmax	Misc/Coeficients.hpp	/^  int lmax;$/;"	m	class:SphericalHarmonicsCoeficients
lmax	Misc/Indices.hpp	/^  int lmax,ndlj,ndlm;$/;"	m	class:AngularMomentumIndices
lmax	RadialGrid/Atom.hpp	/^  int lmax,kkrsz;$/;"	m	class:Atom
lmax	SingleSite/AtomData.hpp	/^  int lmax, kkrsz;$/;"	m	class:AtomData
lmax	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int lmax,kkrsz;$/;"	m	class:AtomData
lmfacts	Madelung/lmfacts.f	/^      subroutine lmfacts(/;"	s
lmsmtrx	MultipleScattering/lmsmtrx.f	/^      subroutine lmsmtrx(/;"	s
loadPotentials	Main/PotentialIO.cpp	/^int loadPotentials(LSMSCommunication &comm,LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local)$/;"	f
local	Main/lsmsClass.hpp	/^  LocalTypeInfo local;$/;"	m	class:LSMS
localAndNodeEq_NodeIndexInfo	Main/buildLIZandCommLists.cpp	/^bool localAndNodeEq_NodeIndexInfo(const NodeIdxInfo &x, const NodeIdxInfo &y)$/;"	f
localIdx	Main/buildLIZandCommLists.cpp	/^  int node, localIdx, globalIdx;$/;"	m	class:NodeIdxInfo	file:
localLess_NodeIndexInfo	Main/buildLIZandCommLists.cpp	/^bool localLess_NodeIndexInfo(const NodeIdxInfo &x, const NodeIdxInfo &y) {return x.localIdx<y.localIdx;}$/;"	f
local_id	Main/SystemParameters.hpp	/^  int node,local_id;$/;"	m	class:AtomType
lofj	Misc/Indices.hpp	/^  std::vector<int> lofk,mofk,lofj,mofj;$/;"	m	class:AngularMomentumIndices
lofk	Misc/Indices.hpp	/^  std::vector<int> lofk,mofk,lofj,mofj;$/;"	m	class:AngularMomentumIndices
lsms	Main/lsmsClass.hpp	/^  LSMSSystemParameters lsms;$/;"	m	class:LSMS
luaGetBoolean	LuaInterface/LuaSupport.cpp	/^bool luaGetBoolean(lua_State *L, const char *name, bool *val)$/;"	f
luaGetFieldFromStack	LuaInterface/LuaSupport.cpp	/^bool luaGetFieldFromStack(lua_State *L, const char *field)$/;"	f
luaGetFieldInTable	LuaInterface/LuaSupport.cpp	/^bool luaGetFieldInTable(lua_State *L, const char *name, const char *field)$/;"	f
luaGetInteger	LuaInterface/LuaSupport.cpp	/^bool luaGetInteger(lua_State *L, const char *name, int *val)$/;"	f
luaGetIntegerFieldFromStack	LuaInterface/LuaSupport.cpp	/^bool luaGetIntegerFieldFromStack(lua_State *L, const char *field, int *val)$/;"	f
luaGetIntegerFieldInTable	LuaInterface/LuaSupport.cpp	/^bool luaGetIntegerFieldInTable(lua_State *L, const char *name, const char *field, int *val)$/;"	f
luaGetPositionInTable	LuaInterface/LuaSupport.cpp	/^bool luaGetPositionInTable(lua_State *L, const char *name, int idx)$/;"	f
luaGetReal	LuaInterface/LuaSupport.cpp	/^bool luaGetReal(lua_State *L, const char *name, Real *val)$/;"	f
luaGetRealFieldFromStack	LuaInterface/LuaSupport.cpp	/^bool luaGetRealFieldFromStack(lua_State *L, const char *field, Real *val)$/;"	f
luaGetRealFieldInTable	LuaInterface/LuaSupport.cpp	/^bool luaGetRealFieldInTable(lua_State *L, const char *name, const char *field, Real *val)$/;"	f
luaGetRealPositionFromStack	LuaInterface/LuaSupport.cpp	/^bool luaGetRealPositionFromStack(lua_State *L, int idx, Real *val)$/;"	f
luaGetRealPositionInTable	LuaInterface/LuaSupport.cpp	/^bool luaGetRealPositionInTable(lua_State *L, const char *name, int idx, Real *val)$/;"	f
luaGetStrN	LuaInterface/LuaSupport.cpp	/^bool luaGetStrN(lua_State *L, const char *name, char *s, int n)$/;"	f
luaGetStrNFromStack	LuaInterface/LuaSupport.cpp	/^bool luaGetStrNFromStack(lua_State *L, const char *name, char *s, int n)$/;"	f
luaRadialGridToString	LuaInterface/RadialGrid_lua.cpp	/^static int luaRadialGridToString(lua_State *L)$/;"	f	file:
luaRadialPotentialToString	LuaInterface/RadialPotential_lua.cpp	/^static int luaRadialPotentialToString(lua_State *L)$/;"	f	file:
luaopen_RadialGrid	LuaInterface/RadialGrid_lua.cpp	/^int luaopen_RadialGrid (lua_State *L)$/;"	f
luaopen_RadialPotential	LuaInterface/RadialPotential_lua.cpp	/^int luaopen_RadialPotential (lua_State *L)$/;"	f
m	Main/Graph1dMoments.hpp	/^  std::vector<std::vector<ValueType> > m;$/;"	m	class:Graph1dMoments
mInt	SingleSite/AtomData.hpp	/^  Real qInt, mInt, rhoInt;            \/\/ Interstitial charge, moment and charge density$/;"	m	class:AtomData
mIntComponent	SingleSite/AtomData.hpp	/^  Real mIntComponent[3];              \/\/ Interstitial moment components$/;"	m	class:AtomData
madelungMatrix	SingleSite/AtomData.hpp	/^  std::vector<Real> madelungMatrix;$/;"	m	class:AtomData
madewd	Madelung/madewd.f	/^      subroutine madewd(/;"	s
madewdj	Madelung/madewdj.f	/^      subroutine madewdj(/;"	s
madsum	Madelung/madsum.f	/^      subroutine madsum(/;"	s
magnetizationAtPosition	Main/WangLandau.h	/^  std::vector<double> position, magnetizationAtPosition;$/;"	m	class:WL1dEvecGenerator
main	Main/lsms.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Main/lsms_inter.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Main/wl_lsms.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Test/WriteTMats.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Test/buildKKRMatrixTest/plglmax_test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Test/testPotentialShift.cpp	/^int main(int argc, char *argv[])$/;"	f
makebgij_device	Accelerator/makebgij_device.hpp	/^__inline__ void makebgij_device(int lmaxi,int kkri,int lmaxj,int kkrj,$/;"	f
makegij	MultipleScattering/makegij_c.f	/^      subroutine makegij(/;"	s
makegij	Test/buildKKRMatrixTest/makegij_c.f	/^      subroutine makegij(/;"	s
makegij_new	Test/buildKKRMatrixTest/makegij_new.cpp	/^inline void makegij_new(int lmaxi, int kkri, int lmaxj, int kkrj,$/;"	f
matom	SingleSite/SingleSiteScattering.hpp	/^  Matrix<Complex> matom;$/;"	m	class:NonRelativisticSingleScattererSolution
maxGroupSize	Main/SystemParameters.hpp	/^  int maxGroupSize;$/;"	m	class:EnergyContourParameters
maxNrmat	Main/SystemParameters.hpp	/^  int maxNrmat(void) {int v=0; for(int i=0; i<num_local; i++) if(atom[i].nrmat>v) v=atom[i].nrmat; return v;}$/;"	f	class:LocalTypeInfo
maxX	Main/Graph1d.hpp	/^  KeyType delta, minX, maxX;$/;"	m	class:Graph1d
maxX	Main/Graph2d.hpp	/^  KeyType deltaX, minX, maxX, deltaY;$/;"	m	class:Graph2d
maxY	Main/Graph2d.hpp	/^  std::vector<KeyType> minY, maxY;$/;"	m	class:Graph2d
max_num_local	Main/lsmsClass.hpp	/^  int max_num_local;$/;"	m	class:LSMS
maxlmax	Main/SystemParameters.hpp	/^  int maxlmax;$/;"	m	class:CrystalParameters
maxlmax	Main/SystemParameters.hpp	/^  int maxlmax;$/;"	m	class:LSMSSystemParameters
maxlmax	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int maxlmax;$/;"	m	class:LSMSSystemParameters
mbeqa	Misc/mbeqa.f	/^      subroutine mbeqa(/;"	s
mcpsc_mt	SingleSite/AtomData.hpp	/^  Real qcpsc_mt, qcpsc_ws, mcpsc_mt, mcpsc_ws;$/;"	m	class:AtomData
mcpsc_ws	SingleSite/AtomData.hpp	/^  Real qcpsc_mt, qcpsc_ws, mcpsc_mt, mcpsc_ws;$/;"	m	class:AtomData
mdosms	MultipleScattering/mdosms_c.f	/^      subroutine mdosms(/;"	s
mgreen	MultipleScattering/mgreen_c.f	/^      subroutine mgreen(/;"	s
minX	Main/Graph1d.hpp	/^  KeyType delta, minX, maxX;$/;"	m	class:Graph1d
minX	Main/Graph2d.hpp	/^  KeyType deltaX, minX, maxX, deltaY;$/;"	m	class:Graph2d
minY	Main/Graph2d.hpp	/^  std::vector<KeyType> minY, maxY;$/;"	m	class:Graph2d
mix	Main/lsmsClass.hpp	/^  MixingParameters mix;$/;"	m	class:LSMS
mixAlgorithm	Main/mixing.hpp	/^  enum mixAlgorithm {noAlgorithm = 0, simple = 1, broyden = 2};$/;"	g	struct:MixingParameters
mixEvec	Main/calculateEvec.cpp	/^void mixEvec(LSMSSystemParameters &lsms, LocalTypeInfo &local, Real alpev)$/;"	f
mixQuantity	Main/mixing.hpp	/^  enum mixQuantity {no_mixing = 0, charge = 1, potential = 2, moment_magnitude = 3,$/;"	g	struct:MixingParameters
mixing	Main/SystemParameters.hpp	/^  int mixing; \/\/ combines LSMS_1's mix_quant & mix_algor : -1 don't mix. mix_quant=mixing%4; mix_algor=mixing>>2;$/;"	m	class:LSMSSystemParameters
mixing	Main/lsmsClass.hpp	/^  Mixing *mixing;$/;"	m	class:LSMS
mixingParameter	Main/mixing.hpp	/^  Real mixingParameter[numQuantities];$/;"	m	struct:MixingParameters
mkConst	Accelerator/operations.h	/^__device__ __forceinline__ cuComplex mkConst (int i)$/;"	f
mkConst	Accelerator/operations.h	/^__device__ __forceinline__ cuDoubleComplex mkConst (int i)$/;"	f
mkConst	Accelerator/operations.h	/^__device__ __forceinline__ double mkConst(int i)$/;"	f
mkConst	Accelerator/operations.h	/^__device__ __forceinline__ float mkConst(int i)$/;"	f
mmid	Misc/mmid.f	/^      subroutine mmid(/;"	s
mod_midpoint	Misc/mod_midpoint.f	/^      subroutine mod_midpoint(/;"	s
modificationFactorChanges	Main/ExhaustiveIsing.h	/^  int modificationFactorChanges;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
modificationFactorChanges	Main/WangLandau.h	/^  int modificationFactorChanges;$/;"	m	class:WL1dEvecGenerator
modificationFactorChanges	Main/WangLandau2d.h	/^  int modificationFactorChanges;$/;"	m	class:WL2dEvecGenerator
mofj	Misc/Indices.hpp	/^  std::vector<int> lofk,mofk,lofj,mofj;$/;"	m	class:AngularMomentumIndices
mofk	Misc/Indices.hpp	/^  std::vector<int> lofk,mofk,lofj,mofj;$/;"	m	class:AngularMomentumIndices
moment_direction	Main/mixing.hpp	/^                    moment_direction = 4};$/;"	e	enum:MixingParameters::mixQuantity
moment_magnitude	Main/mixing.hpp	/^  enum mixQuantity {no_mixing = 0, charge = 1, potential = 2, moment_magnitude = 3,$/;"	e	enum:MixingParameters::mixQuantity
mtasa	Main/SystemParameters.hpp	/^  int mtasa;$/;"	m	class:LSMSSystemParameters
mtotmt	SingleSite/AtomData.hpp	/^  Real qtotmt, mtotmt;$/;"	m	class:AtomData
mtotws	SingleSite/AtomData.hpp	/^  Real qtotws, mtotws;$/;"	m	class:AtomData
mulOp	Accelerator/operations.h	/^__device__ __forceinline__ cuComplex mulOp (cuComplex a, cuComplex b)$/;"	f
mulOp	Accelerator/operations.h	/^__device__ __forceinline__ cuDoubleComplex mulOp (cuDoubleComplex a, $/;"	f
mulOp	Accelerator/operations.h	/^__device__ __forceinline__ double mulOp (double a, double b)$/;"	f
mulOp	Accelerator/operations.h	/^__device__ __forceinline__ float mulOp (float a, float b)$/;"	f
multiStepEnergy	Main/lsmsClass.cpp	/^Real LSMS::multiStepEnergy()$/;"	f	class:LSMS
mvalmt	SingleSite/AtomData.hpp	/^  Real qvalmt, mvalmt;$/;"	m	class:AtomData
mvalws	SingleSite/AtomData.hpp	/^  Real qvalws, mvalws;$/;"	m	class:AtomData
n	Main/initializeAtom.cpp	/^  int n,l;$/;"	m	class:InitialAtomLevels	file:
nCol	Accelerator/DeviceArray3d.hpp	/^      size_type nRow,nCol,nSlice,lDim1,lDim2,lDim12;$/;"	m	class:DeviceArray3d
nCol	Accelerator/DeviceMatrix.hpp	/^      size_type nRow,nCol;$/;"	m	struct:DeviceMatrix
nRow	Accelerator/DeviceArray3d.hpp	/^      size_type nRow,nCol,nSlice,lDim1,lDim2,lDim12;$/;"	m	class:DeviceArray3d
nRow	Accelerator/DeviceMatrix.hpp	/^      size_type nRow,nCol;$/;"	m	struct:DeviceMatrix
nSlice	Accelerator/DeviceArray3d.hpp	/^      size_type nRow,nCol,nSlice,lDim1,lDim2,lDim12;$/;"	m	class:DeviceArray3d
nX	Main/ExhaustiveIsing.h	/^  int nX;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
n_col	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ size_type n_col() const { return nCol; }$/;"	f	class:DeviceArray3d
n_col	Accelerator/DeviceMatrix.hpp	/^      __inline__ __host__ __device__ size_type n_col() const { return nCol; }$/;"	f	struct:DeviceMatrix
n_initialized_from_file	Main/ExhaustiveIsing.h	/^  int n_initialized_from_file;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
n_initialized_from_file	Main/WangLandau.h	/^  int n_initialized_from_file;$/;"	m	class:WL1dEvecGenerator
n_initialized_from_file	Main/WangLandau2d.h	/^  int n_initialized_from_file;$/;"	m	class:WL2dEvecGenerator
n_per_type	Main/SystemParameters.hpp	/^  std::vector<int> n_per_type;$/;"	m	class:LocalTypeInfo
n_row	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ size_type n_row() const { return nRow; }$/;"	f	class:DeviceArray3d
n_row	Accelerator/DeviceMatrix.hpp	/^      __inline__ __host__ __device__ size_type n_row() const { return nRow; }$/;"	f	struct:DeviceMatrix
n_slice	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ size_type n_slice() const {return nSlice;}$/;"	f	class:DeviceArray3d
n_spin_cant	Main/SystemParameters.hpp	/^  int n_spin_cant;$/;"	m	class:LSMSSystemParameters
n_spin_cant	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int n_spin_cant;$/;"	m	class:LSMSSystemParameters
n_spin_pola	Main/SystemParameters.hpp	/^  int n_spin_pola;$/;"	m	class:LSMSSystemParameters
n_spins	Main/EvecGenerator.h	/^  size_t n_spins;$/;"	m	class:ConstantEvecGenerator
n_spins	Main/EvecGenerator.h	/^  size_t n_spins;$/;"	m	class:RandomEvecGenerator
n_spins	Main/ExhaustiveIsing.h	/^  int n_spins;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
n_spins	Main/WangLandau.h	/^  int n_spins;$/;"	m	class:WL1dEvecGenerator
n_spins	Main/WangLandau2d.h	/^  int n_spins;$/;"	m	class:WL2dEvecGenerator
n_walker	Main/EvecGenerator.h	/^  int n_walker;$/;"	m	class:ConstantEvecGenerator
n_walkers	Main/ExhaustiveIsing.h	/^  int n_walkers;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
n_walkers	Main/WangLandau.h	/^  int n_walkers;$/;"	m	class:WL1dEvecGenerator
n_walkers	Main/WangLandau2d.h	/^  int n_walkers;$/;"	m	class:WL2dEvecGenerator
name	Main/SystemParameters.hpp	/^  char name[4];$/;"	m	class:AtomType
nc	RadialGrid/Atom.hpp	/^  Matrix<int> nc,lc,kc;$/;"	m	class:Atom
nc	SingleSite/AtomData.hpp	/^  Matrix<int> nc, lc, kc;$/;"	m	class:AtomData
ncrit	VORPOL/VORPOL.hpp	/^  int ncrit;$/;"	m	class:VoronoiPolyhedra
ndlj	Misc/Indices.hpp	/^  int lmax,ndlj,ndlm;$/;"	m	class:AngularMomentumIndices
ndlm	Misc/Indices.hpp	/^  int lmax,ndlj,ndlm;$/;"	m	class:AngularMomentumIndices
negOp	Accelerator/operations.h	/^__device__ __forceinline__ cuComplex negOp (cuComplex a)$/;"	f
negOp	Accelerator/operations.h	/^__device__ __forceinline__ cuDoubleComplex negOp (cuDoubleComplex a)$/;"	f
negOp	Accelerator/operations.h	/^__device__ __forceinline__ double negOp (double a)$/;"	f
negOp	Accelerator/operations.h	/^__device__ __forceinline__ float negOp (float a)$/;"	f
newFile	Main/WangLandau.h	/^  void newFile(const char *filename=NULL)$/;"	f	class:StatesWriter
newFile	Main/WangLandau2d.h	/^  void newFile(const char *filename=NULL)$/;"	f	class:StatesWriter2d
newTemporaryRadialGridLua	LuaInterface/RadialGrid_lua.cpp	/^static int newTemporaryRadialGridLua(lua_State *L)$/;"	f	file:
newTemporaryRadialPotentialLua	LuaInterface/RadialPotential_lua.cpp	/^static int newTemporaryRadialPotentialLua(lua_State *L)$/;"	f	file:
newder	Misc/newder.f	/^      subroutine newder(/;"	s
newexchg	Potential/newexchg.f	/^      subroutine newexchg(/;"	s
newint	Misc/newint.f	/^      subroutine newint(/;"	s
newpot	Potential/newpot_c.f	/^      subroutine newpot(/;"	s
ngaussq	Main/SystemParameters.hpp	/^  int ngaussr,ngaussq;$/;"	m	class:LSMSSystemParameters
ngaussr	Main/SystemParameters.hpp	/^  int ngaussr,ngaussq;$/;"	m	class:LSMSSystemParameters
noAlgorithm	Main/mixing.hpp	/^  enum mixAlgorithm {noAlgorithm = 0, simple = 1, broyden = 2};$/;"	e	enum:MixingParameters::mixAlgorithm
no_gpu_buildKKRMatrix	Accelerator/no_gpu_buildKKRMatrix.cpp	/^void no_gpu_buildKKRMatrix(void)$/;"	f
no_gpu_kernel_buildKKRMatrix	Accelerator/no_gpu_kernel_buildKKRMatrix.cpp	/^void no_gpu_kernel_buildKKRMatrix(void)$/;"	f
no_mixing	Main/mixing.hpp	/^  enum mixQuantity {no_mixing = 0, charge = 1, potential = 2, moment_magnitude = 3,$/;"	e	enum:MixingParameters::mixQuantity
node	Main/SystemParameters.hpp	/^  int node,local_id;$/;"	m	class:AtomType
node	Main/buildLIZandCommLists.cpp	/^  int node, localIdx, globalIdx;$/;"	m	class:NodeIdxInfo	file:
nodeIsInList	Main/buildLIZandCommLists.cpp	/^bool nodeIsInList(int val, std::vector<LIZInfoType> &list, int len, CrystalParameters &crystal, int &ret)$/;"	f
nodeLess_NodeIndexInfo	Main/buildLIZandCommLists.cpp	/^bool nodeLess_NodeIndexInfo(const NodeIdxInfo &x, const NodeIdxInfo &y) {return x.node<y.node;}$/;"	f
npts	Main/SystemParameters.hpp	/^  int grid, npts;$/;"	m	class:EnergyContourParameters
nrel_rel	Main/SystemParameters.hpp	/^  int nrel_rel;$/;"	m	class:LSMSSystemParameters
nrel_rel	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int nrel_rel;$/;"	m	class:LSMSSystemParameters
nrelc	Main/SystemParameters.hpp	/^  int nrelc,nrelv;$/;"	m	class:LSMSSystemParameters
nrelv	Main/SystemParameters.hpp	/^  int nrelc,nrelv;$/;"	m	class:LSMSSystemParameters
nrmat	SingleSite/AtomData.hpp	/^  int nrmat;                          \/\/ sum (LIZlmax+1)^2$/;"	m	class:AtomData
nrmat	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int nrmat; \/\/ sum (LIZlmax+1)^2$/;"	m	class:AtomData
nscf	Main/SystemParameters.hpp	/^  int nscf;$/;"	m	class:LSMSSystemParameters
nspin	Main/SystemParameters.hpp	/^  int nspin;$/;"	m	class:LSMSSystemParameters
nspin	RadialGrid/Atom.hpp	/^  int nspin;$/;"	m	class:Atom
nspin	SingleSite/AtomData.hpp	/^  int nspin, numc;$/;"	m	class:AtomData
nullKernel	Main/WangLandau.h	/^  Kernel1d<double,double> dosKernel, histoKernel, nullKernel;$/;"	m	class:WL1dEvecGenerator
numLIZ	SingleSite/AtomData.hpp	/^  int numLIZ;$/;"	m	class:AtomData
numLIZ	Test/buildKKRMatrixTest/TestStructures.hpp	/^  int numLIZ;$/;"	m	class:AtomData
numQuantities	Main/mixing.hpp	/^  static const int numQuantities = 5;$/;"	m	struct:MixingParameters
numRetentions	Main/WangLandau.h	/^  std::vector<int> numRetentions;$/;"	m	class:WL1dEvecGenerator
numRetentions	Main/WangLandau2d.h	/^  std::vector<int> numRetentions;$/;"	m	class:WL2dEvecGenerator
numSpins	Main/lsmsClass.hpp	/^  int numSpins(){return lsms.num_atoms;}$/;"	f	class:LSMS
numTmatFrom	Communication/LSMSCommunication.hpp	/^  int numTmatTo, numTmatFrom;$/;"	m	class:LSMSCommunication
numTmatTo	Communication/LSMSCommunication.hpp	/^  int numTmatTo, numTmatFrom;$/;"	m	class:LSMSCommunication
numTmats	Communication/LSMSCommunication.hpp	/^  int numTmats;$/;"	m	class:TmatCommType
num_atoms	Main/SystemParameters.hpp	/^  int num_atoms,num_types;$/;"	m	class:CrystalParameters
num_atoms	Main/SystemParameters.hpp	/^  int num_atoms;$/;"	m	class:LSMSSystemParameters
num_local	Main/SystemParameters.hpp	/^  int num_local;$/;"	m	class:LocalTypeInfo
num_types	Main/SystemParameters.hpp	/^  int num_atoms,num_types;$/;"	m	class:CrystalParameters
numberOfUpdatesSinceLastBoost	Main/ExhaustiveIsing.h	/^  int numberOfUpdatesSinceLastBoost;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
numberOfUpdatesSinceLastBoost	Main/WangLandau.h	/^  int numberOfUpdatesSinceLastBoost;$/;"	m	class:WL1dEvecGenerator
numberOfUpdatesSinceLastBoost	Main/WangLandau2d.h	/^  int numberOfUpdatesSinceLastBoost;$/;"	m	class:WL2dEvecGenerator
number_of_instances	Main/SystemParameters.hpp	/^  int first_instance, number_of_instances;$/;"	m	class:AtomType
numc	RadialGrid/Atom.hpp	/^  int numc;$/;"	m	class:Atom
numc	SingleSite/AtomData.hpp	/^  int nspin, numc;$/;"	m	class:AtomData
nuz	SingleSite/SingleSiteScattering.hpp	/^  std::vector<int> nuz;$/;"	m	class:RelativisticScattererSolution
nuzp	SingleSite/SingleSiteScattering.hpp	/^  static const int nuzp=2;$/;"	m	class:RelativisticScattererSolution
of	Main/WangLandau.h	/^  std::ofstream of;$/;"	m	class:StatesWriter
of	Main/WangLandau2d.h	/^  std::ofstream of;$/;"	m	class:StatesWriter2d
oldSpin	Main/ExhaustiveIsing.h	/^  std::vector<double> oldSpin;  \/\/ oldSpin[instance*3 + {x=0, y=1, z=2}]$/;"	m	class:ExhaustiveIsing1dEvecGenerator
oldSpin	Main/WangLandau.h	/^  std::vector<double> oldSpin;  \/\/ oldSpin[instance*3 + {x=0, y=1, z=2}]$/;"	m	class:WL1dEvecGenerator
oldSpin	Main/WangLandau2d.h	/^  std::vector<double> oldSpin;  \/\/ oldSpin[instance*3 + {x=0, y=1, z=2}]$/;"	m	class:WL2dEvecGenerator
omega	Main/SystemParameters.hpp	/^  Real omega; \/\/ bravais lattice volume$/;"	m	class:CrystalParameters
omega	Main/WangLandau.h	/^  struct {double kappa, lambda, omega; int frequency, changes;} globalUpdate;$/;"	m	struct:WL1dEvecGenerator::__anon3
omegaInt	VORPOL/VORPOL.hpp	/^  Real omegaInt; \/\/ interstitial volume$/;"	m	class:VoronoiPolyhedra
omegaMT	SingleSite/AtomData.hpp	/^  Real omegaMT;                       \/\/ Muffin-Tin volume$/;"	m	class:AtomData
omegaWS	SingleSite/AtomData.hpp	/^  Real omegaWS;                       \/\/ Wigner-Seitz volume$/;"	m	class:AtomData
omp_get_max_threads	Main/lsmsClass.cpp	/^inline int omp_get_max_threads() {return 1;}$/;"	f
omp_get_max_threads	MultipleScattering/calculateTauMatrix.cpp	/^inline int omp_get_max_threads() {return 1;}$/;"	f
omp_get_num_threads	Main/lsmsClass.cpp	/^inline int omp_get_num_threads() {return 1;}$/;"	f
omp_get_num_threads	MultipleScattering/calculateTauMatrix.cpp	/^inline int omp_get_num_threads() {return 1;}$/;"	f
omp_get_thread_num	Main/lsmsClass.cpp	/^inline int omp_get_thread_num() {return 0;}$/;"	f
omp_get_thread_num	MultipleScattering/calculateTauMatrix.cpp	/^inline int omp_get_thread_num() {return 0;}$/;"	f
oneStepEnergy	Main/lsmsClass.cpp	/^Real LSMS::oneStepEnergy()$/;"	f	class:LSMS
oneStepEnergy	Main/lsmsClass.cpp	/^Real LSMS::oneStepEnergy(Real *eb)$/;"	f	class:LSMS
oneStepEnergy	Main/lsmsClass.hpp	/^  Real oneStepEnergy(std::vector<std::vector<Real> > &ev){setEvec(ev); return oneStepEnergy();}$/;"	f	class:LSMS
operator !=	Accelerator/cudaDoubleComplex.hpp	/^__device__ inline bool operator!=(const cudaDoubleComplex &a, const cudaDoubleComplex &b) {$/;"	f
operator ()	Accelerator/DeviceArray3d.hpp	/^      __inline__ __device__ T& operator() (size_type i, size_type j, size_type k) {$/;"	f	class:DeviceArray3d
operator ()	Accelerator/DeviceMatrix.hpp	/^      __inline__ __device__ T& operator() (size_type i, size_type j) {$/;"	f	struct:DeviceMatrix
operator ()	Main/Graph1d.hpp	/^  inline ValueType &operator()(KeyType x) {$/;"	f	class:Graph1d
operator ()	Main/Graph1dMoments.hpp	/^  inline ValueType &operator()(KeyType x) {$/;"	f	class:Graph1dMoments
operator ()	Main/Graph2d.hpp	/^  inline ValueType &operator()(KeyType x , KeyType y) {$/;"	f	class:Graph2d
operator ()	Main/initializeAtom.cpp	/^  bool operator()(InitialAtomLevels const &a, InitialAtomLevels const &b) { return a.energy<b.energy; }$/;"	f	struct:compareInitialAtomLevels
operator *	Accelerator/cudaDoubleComplex.hpp	/^__device__ __host__ __inline__ cudaDoubleComplex operator*(const cudaDoubleComplex a, const cudaDoubleComplex b) {$/;"	f
operator *	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator*(const cudaDoubleComplex &a, const double &b) {$/;"	f
operator *	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator*(const double &b, const cudaDoubleComplex &a) {$/;"	f
operator +	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__  cudaDoubleComplex operator+(const cudaDoubleComplex &a, const double &b) {$/;"	f
operator +	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator+(const cudaDoubleComplex &a, const cudaDoubleComplex &b) {$/;"	f
operator +	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator+(const double &b, const cudaDoubleComplex &a) {$/;"	f
operator -	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator-(const cudaDoubleComplex &a) {$/;"	f
operator -	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator-(const cudaDoubleComplex &a, const cudaDoubleComplex &b) {$/;"	f
operator -	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator-(const cudaDoubleComplex &a, const double &b) {$/;"	f
operator -	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator-(const double &b, const cudaDoubleComplex &a) {$/;"	f
operator /	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator\/(const cudaDoubleComplex &a, const cudaDoubleComplex &b) {$/;"	f
operator /	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator\/(const cudaDoubleComplex &a, const double &b) {$/;"	f
operator /	Accelerator/cudaDoubleComplex.hpp	/^__inline__ __device__ __host__ cudaDoubleComplex operator\/(const double &b, const cudaDoubleComplex &a) {$/;"	f
operator =	Accelerator/DeviceArray3d.hpp	/^      __inline__ DeviceArray3d<T> &operator=(Array3d<T>& a)$/;"	f	class:DeviceArray3d
operator =	Accelerator/DeviceMatrix.hpp	/^      __inline__ DeviceMatrix<T> &operator=(Matrix<T>& mat) {$/;"	f	struct:DeviceMatrix
operator =	Accelerator/DeviceVector.hpp	/^      __inline__ DeviceVector<T> &operator=(const std::vector<T>& in) {$/;"	f	class:DeviceVector
operator =	Accelerator/cudaDoubleComplex.hpp	/^    __inline__ __device__ __host__ cudaDoubleComplex& operator=(const double &a) {$/;"	f	class:cudaDoubleComplex
operator =	SingleSite/AtomData.hpp	/^  AtomData &operator=(const AtomData &a)$/;"	f	class:AtomData
operator ==	Accelerator/cudaDoubleComplex.hpp	/^__device__ inline bool operator==(const cudaDoubleComplex &a, const cudaDoubleComplex &b) {$/;"	f
operator []	Accelerator/DeviceArray3d.hpp	/^      __inline__ __device__ T& operator[](size_type i) {$/;"	f	class:DeviceArray3d
operator []	Accelerator/DeviceMatrix.hpp	/^      __inline__ __device__ T& operator[](size_type i) {$/;"	f	struct:DeviceMatrix
operator []	Accelerator/DeviceVector.hpp	/^      __inline__ __device__ T& operator[](size_type i) {$/;"	f	class:DeviceVector
operator []	Main/Graph1d.hpp	/^  inline ValueType &operator[](Int i) {$/;"	f	class:Graph1d
operator []	Main/Graph2d.hpp	/^  inline std::vector<ValueType> &operator[](Int ix) {$/;"	f	class:Graph2d
ord3v	Madelung/ord3v.f	/^      subroutine ord3v(/;"	s
out	Main/ExhaustiveIsing.h	/^  std::vector<bool> out;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
out	Main/WangLandau.h	/^  std::vector<bool> out;$/;"	m	class:WL1dEvecGenerator
out	Main/WangLandau2d.h	/^  std::vector<bool> out;$/;"	m	class:WL2dEvecGenerator
outws	Core/outws_c.f	/^      subroutine outws(/;"	s
ownedByLua	LuaInterface/RadialGrid_lua.cpp	/^  bool ownedByLua;$/;"	m	struct:__anon4	file:
owner	Accelerator/DeviceArray3d.hpp	/^      DeviceArray3d<T> *owner;$/;"	m	class:DeviceArray3d
owner	Accelerator/DeviceMatrix.hpp	/^      DeviceMatrix<T> *owner;$/;"	m	struct:DeviceMatrix
owner	Accelerator/DeviceVector.hpp	/^      DeviceVector<T> *owner;$/;"	m	class:DeviceVector
p1	Main/buildLIZandCommLists.cpp	/^  Real p1,p2,p3;$/;"	m	class:LIZInfoType	file:
p2	Main/buildLIZandCommLists.cpp	/^  Real p1,p2,p3;$/;"	m	class:LIZInfoType	file:
p3	Main/buildLIZandCommLists.cpp	/^  Real p1,p2,p3;$/;"	m	class:LIZInfoType	file:
performGlobalUpdate	Main/WangLandau.h	/^void inline performGlobalUpdate(Graph1dMoments<double,double> &g, double kappa, double lambda, double omega)$/;"	f
plglmax	Misc/plglmax.f	/^      subroutine plglmax(/;"	s
plglmax_device	Accelerator/plglmax_device.hpp	/^__inline__ void plglmax_device(int lmax, double x, double *plm)$/;"	f
plglmax_new	Test/buildKKRMatrixTest/plglmax_new.cpp	/^inline void plglmax_new(int lmax, Real x, Real*plm)$/;"	f
pmat_m	SingleSite/AtomData.hpp	/^  std::vector<Matrix<Complex> > pmat_m;$/;"	m	class:AtomData
polyhedron	VORPOL/polyhedron.f	/^      subroutine polyhedron(/;"	s
position	Main/ExhaustiveIsing.h	/^  std::vector<double> ref0, ref1, position;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
position	Main/SystemParameters.hpp	/^  Matrix<Real> position,evecs;$/;"	m	class:CrystalParameters
position	Main/WangLandau.h	/^  std::vector<double> position, magnetizationAtPosition;$/;"	m	class:WL1dEvecGenerator
positionX	Main/WangLandau2d.h	/^  std::vector<double> positionX, positionY;$/;"	m	class:WL2dEvecGenerator
positionY	Main/WangLandau2d.h	/^  std::vector<double> positionX, positionY;$/;"	m	class:WL2dEvecGenerator
pot_in_idx	Main/SystemParameters.hpp	/^  int pot_in_idx;$/;"	m	class:AtomType
pot_in_type	Main/SystemParameters.hpp	/^  int pot_in_type,pot_out_type;$/;"	m	class:LSMSSystemParameters
pot_out_type	Main/SystemParameters.hpp	/^  int pot_in_type,pot_out_type;$/;"	m	class:LSMSSystemParameters
potential	Main/mixing.hpp	/^  enum mixQuantity {no_mixing = 0, charge = 1, potential = 2, moment_magnitude = 3,$/;"	e	enum:MixingParameters::mixQuantity
potentialShifter	Main/lsmsClass.hpp	/^  PotentialShifter potentialShifter;$/;"	m	class:LSMS
potentialTypeName	Main/SystemParameters.cpp	/^const char *potentialTypeName[]=$/;"	v
potential_file_in	Main/SystemParameters.hpp	/^  char potential_file_in[128];$/;"	m	class:LSMSSystemParameters
potential_file_out	Main/SystemParameters.hpp	/^  char potential_file_out[128];$/;"	m	class:LSMSSystemParameters
pqintg	Madelung/pqintg_c.f	/^      subroutine pqintg(/;"	s
prefix	Main/lsmsClass.hpp	/^  char prefix[256];$/;"	m	class:LSMS
prepare	Main/mixing.cpp	/^  void prepare(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:FrozenPotential
prepare	Main/mixing.cpp	/^  void prepare(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:NoMixing
prepare	Main/mixing.cpp	/^  void prepare(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:SimpleChargeDensityMixing
prepare	Main/mixing.cpp	/^  void prepare(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:SimplePotentialMixing
prepare	Main/mixing.cpp	/^  void prepare(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:EfMixing
printCommunicationInfo	Communication/LSMSCommunication.cpp	/^void printCommunicationInfo(FILE *f, LSMSCommunication &comm)$/;"	f
printCrystalParameters	Main/SystemParameters.cpp	/^void printCrystalParameters(FILE *f, CrystalParameters &crystal)$/;"	f
printLIZInfo	Main/SystemParameters.cpp	/^void printLIZInfo(FILE * f, AtomData &atom)$/;"	f
printLSMSGlobals	Main/SystemParameters.cpp	/^void printLSMSGlobals(FILE *f,LSMSSystemParameters &lsms)$/;"	f
printLSMSSystemParameters	Main/SystemParameters.cpp	/^void printLSMSSystemParameters(FILE *f,LSMSSystemParameters &lsms)$/;"	f
printLocalTypeInfo	Main/SystemParameters.cpp	/^void printLocalTypeInfo(FILE *f, LocalTypeInfo &local)$/;"	f
print_node	Main/SystemParameters.hpp	/^  int print_node,default_iprint;$/;"	m	class:LSMSGlobals
qInt	SingleSite/AtomData.hpp	/^  Real qInt, mInt, rhoInt;            \/\/ Interstitial charge, moment and charge density$/;"	m	class:AtomData
qcpsc_mt	SingleSite/AtomData.hpp	/^  Real qcpsc_mt, qcpsc_ws, mcpsc_mt, mcpsc_ws;$/;"	m	class:AtomData
qcpsc_ws	SingleSite/AtomData.hpp	/^  Real qcpsc_mt, qcpsc_ws, mcpsc_mt, mcpsc_ws;$/;"	m	class:AtomData
qrms	Main/SystemParameters.hpp	/^  Real qrms[2];$/;"	m	class:LocalTypeInfo
qtotmt	SingleSite/AtomData.hpp	/^  Real qtotmt, mtotmt;$/;"	m	class:AtomData
qtotws	SingleSite/AtomData.hpp	/^  Real qtotws, mtotws;$/;"	m	class:AtomData
quantity	Main/mixing.hpp	/^  bool quantity[numQuantities];$/;"	m	struct:MixingParameters
quartic	Main/Graph1d.hpp	/^inline ValueType quartic(KeyType x)$/;"	f
quartic	Main/Graph2d.hpp	/^inline ValueType quartic(KeyType x)$/;"	f
qvalmt	SingleSite/AtomData.hpp	/^  Real qvalmt, mvalmt;$/;"	m	class:AtomData
qvalws	SingleSite/AtomData.hpp	/^  Real qvalws, mvalws;$/;"	m	class:AtomData
rInscribed	SingleSite/AtomData.hpp	/^  Real rInscribed; \/\/ LSMS_1.9: rins$/;"	m	class:AtomData
rLIZ	Main/SystemParameters.hpp	/^  Real rLIZ, rad;$/;"	m	class:AtomType
r_mesh	RadialGrid/RadialGrid.hpp	/^  std::vector<Real> r_mesh,x_mesh; $/;"	m	class:RadialGrid
r_mesh	SingleSite/AtomData.hpp	/^  std::vector<Real> r_mesh, x_mesh;$/;"	m	class:AtomData
rad	Main/SystemParameters.hpp	/^  Real rLIZ, rad;$/;"	m	class:AtomType
radialGridLua__gc	LuaInterface/RadialGrid_lua.cpp	/^static int radialGridLua__gc(lua_State *L)$/;"	f	file:
radialGridLua__index	LuaInterface/RadialGrid_lua.cpp	/^static int radialGridLua__index(lua_State *L)$/;"	f	file:
radialPotentialLua__gc	LuaInterface/RadialPotential_lua.cpp	/^static int radialPotentialLua__gc(lua_State *L)$/;"	f	file:
radialPotentialLua__index	LuaInterface/RadialPotential_lua.cpp	/^static int radialPotentialLua__index(lua_State *L)$/;"	f	file:
random_evec	Main/WangLandau.h	/^  void inline random_evec(double ev[3])$/;"	f	class:WL1dEvecGenerator
random_evec	Main/WangLandau2d.h	/^  void inline random_evec(double ev[3])$/;"	f	class:WL2dEvecGenerator
random_evec	Main/random_evec.h	/^  void inline random_evec(double ev[3])$/;"	f
random_evec	Main/random_evec.h	/^void inline random_evec(double ev[3])$/;"	f
random_evec_1	Main/WangLandau.h	/^    void inline random_evec_1(double ev[3])$/;"	f	class:WL1dEvecGenerator
random_evec_1	Main/WangLandau.h	/^  void inline random_evec_1(double ev[3])$/;"	f	class:WL1dEvecGenerator
random_evec_1	Main/WangLandau2d.h	/^  void inline random_evec_1(double ev[3])$/;"	f	class:WL2dEvecGenerator
random_evec_1	Main/random_evec.h	/^    void inline random_evec_1(double ev[3])$/;"	f
random_evec_1	Main/random_evec.h	/^  void inline random_evec_1(double ev[3])$/;"	f
rank	Communication/LSMSCommunication.hpp	/^  int rank;$/;"	m	class:LSMSCommunication
raw	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ T* raw() const { return data; }$/;"	f	class:DeviceArray3d
raw	Accelerator/DeviceMatrix.hpp	/^      __inline__ __host__ __device__ T* raw() const { return data; }$/;"	f	struct:DeviceMatrix
raw	Accelerator/DeviceVector.hpp	/^      __inline__ __host__ __device__ T* raw() const { return data; }$/;"	f	class:DeviceVector
rcpOp	Accelerator/operations.h	/^__device__ __forceinline__ cuComplex rcpOp (cuComplex a)$/;"	f
rcpOp	Accelerator/operations.h	/^__device__ __forceinline__ cuDoubleComplex rcpOp (cuDoubleComplex a)$/;"	f
rcpOp	Accelerator/operations.h	/^__device__ __forceinline__ double rcpOp (double a)$/;"	f
rcpOp	Accelerator/operations.h	/^__device__ __forceinline__ float rcpOp (float a)$/;"	f
rcritpts	VORPOL/rcritpts.f	/^      subroutine rcritpts(/;"	s
readInput	Main/read_input.cpp	/^int readInput(lua_State *L, LSMSSystemParameters &lsms, CrystalParameters &crystal, MixingParameters &mix)$/;"	f
readLastLine	Misc/readLastLine.cpp	/^int readLastLine(FILE *fp, char *buffer, int bufferLength)$/;"	f
readNextIterationNumber	Misc/readLastLine.cpp	/^int readNextIterationNumber(const char *fname)$/;"	f
readSingleAtomData_bigcell	SingleSite/readSingleAtomData_bigcell.cpp	/^int readSingleAtomData_bigcell(const char *fname, AtomData &atom)$/;"	f
readSingleAtomData_hdf5	SingleSite/readSingleAtomData_hdf5.cpp	/^int readSingleAtomData_hdf5(hid_t loc_id, AtomData &atom)$/;"	f
read_scalar	Main/HDF5io.hpp	/^int read_scalar(hid_t loc_id, const char *name, T &value)$/;"	f
read_scalar	Main/HDF5io.hpp	/^int read_scalar(hid_t loc_id, const char *name, T &value, hid_t dti)$/;"	f
read_scalar_float	RadialGrid/single_pot_read.f	/^      subroutine read_scalar_float(/;"	s
read_scalar_int	RadialGrid/single_pot_read.f	/^      subroutine read_scalar_int(/;"	s
read_vector	Main/HDF5io.hpp	/^int read_vector(hid_t loc_id,const char *name,T *value,int len)$/;"	f
read_vector	Main/HDF5io.hpp	/^int read_vector(hid_t loc_id,const char *name,T *value,int len,hid_t dti)$/;"	f
read_vector_char	RadialGrid/single_pot_read.f	/^      subroutine read_vector_char(/;"	s
read_vector_float	RadialGrid/single_pot_read.f	/^      subroutine read_vector_float(/;"	s
read_vector_int	RadialGrid/single_pot_read.f	/^      subroutine read_vector_int(/;"	s
real	Accelerator/cudaDoubleComplex.hpp	/^    __inline__ __device__ __host__ double real() { return x;}$/;"	f	class:cudaDoubleComplex
ref0	Main/ExhaustiveIsing.h	/^  std::vector<double> ref0, ref1, position;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
ref0	Main/WangLandau.h	/^  std::vector<long> ref0, ref1;$/;"	m	class:WL1dEvecGenerator
ref1	Main/ExhaustiveIsing.h	/^  std::vector<double> ref0, ref1, position;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
ref1	Main/WangLandau.h	/^  std::vector<long> ref0, ref1;$/;"	m	class:WL1dEvecGenerator
reject	Main/ExhaustiveIsing.h	/^  unsigned long accept, reject;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
reject	Main/WangLandau.h	/^  unsigned long accept, reject, acceptSinceLastChange;$/;"	m	class:WL1dEvecGenerator
reject	Main/WangLandau2d.h	/^  unsigned long accept, reject;$/;"	m	class:WL2dEvecGenerator
relmtrx	MultipleScattering/relmtrx.f	/^      subroutine relmtrx(/;"	s
remoteNode	Communication/LSMSCommunication.hpp	/^  int remoteNode;$/;"	m	class:TmatCommType
repeatBasisCell	Main/read_input.cpp	/^void repeatBasisCell(LSMSSystemParameters &lsms, CrystalParameters &crystal, int nx, int ny, int nz, int unique)$/;"	f
replms	SingleSite/replms.f	/^      subroutine replms(/;"	s
reset	SingleSite/AtomData.hpp	/^  void reset(void)$/;"	f	class:AtomData
resetLocalDensities	SingleSite/AtomData.hpp	/^  void resetLocalDensities(void)$/;"	f	class:AtomData
resetPotentials	Potential/PotentialShifter.hpp	/^  void resetPotentials(LocalTypeInfo &local) {for(int i=0; i<local.num_local; i++) vr0[i]=local.atom[i].vr;}$/;"	f	class:PotentialShifter
resize	Main/SystemParameters.hpp	/^  void resize(size_t n) {type.resize(n); position.resize(3,n); evecs.resize(3,n);}$/;"	f	class:CrystalParameters
resize	Potential/PotentialShifter.hpp	/^  void resize(int n) {vr0.resize(n);}$/;"	f	class:PotentialShifter
resizeCore	SingleSite/AtomData.hpp	/^  void resizeCore(int ncs)$/;"	f	class:AtomData
resizePotential	SingleSite/AtomData.hpp	/^  void resizePotential(int npts)$/;"	f	class:AtomData
resizeTypes	Main/SystemParameters.hpp	/^  void resizeTypes(size_t n) {types.resize(n);}$/;"	f	class:CrystalParameters
restorePotentials	Potential/PotentialShifter.hpp	/^  void restorePotentials(LocalTypeInfo &local) {for(int i=0; i<local.num_local; i++) local.atom[i].vr=vr0[i];}               $/;"	f	class:PotentialShifter
rhoInt	SingleSite/AtomData.hpp	/^  Real qInt, mInt, rhoInt;            \/\/ Interstitial charge, moment and charge density$/;"	m	class:AtomData
rhoNew	SingleSite/AtomData.hpp	/^  Matrix<Real> vrNew,rhoNew;$/;"	m	class:AtomData
rhotot	RadialGrid/Atom.hpp	/^  Matrix<Real> rhotot;$/;"	m	class:Atom
rhotot	SingleSite/AtomData.hpp	/^  Matrix<Real> vr, rhotot;$/;"	m	class:AtomData
ricbes	Misc/ricbes.f	/^      subroutine ricbes(/;"	s
richnk	Core/richnk_c.f	/^      subroutine richnk /;"	s
rmt	SingleSite/AtomData.hpp	/^  Real xstart,rmt,h;$/;"	m	class:AtomData
rnd	Main/WangLandau.h	/^  std::uniform_real_distribution<double> rnd; \/\/, rnd11(-1.0,1.0),rnd0pi(0.0,2.0*M_PI);$/;"	m	class:WL1dEvecGenerator
rnd	Main/WangLandau2d.h	/^  std::uniform_real_distribution<double> rnd; \/\/, rnd11(-1.0,1.0),rnd0pi(0.0,2.0*M_PI);$/;"	m	class:WL2dEvecGenerator
rng	Main/WangLandau.h	/^  RNG rng;$/;"	m	class:WL1dEvecGenerator
rng	Main/WangLandau2d.h	/^  RNG rng;$/;"	m	class:WL2dEvecGenerator
rs	Potential/rs.f	/^      function rs(/;"	f
rsteps	Main/SystemParameters.hpp	/^  Real rsteps[4];$/;"	m	class:AtomType
ruthi	SingleSite/clebsch.f	/^      subroutine ruthi(/;"	s
rwave	Misc/rwave.f	/^      subroutine rwave(/;"	s
rws	SingleSite/AtomData.hpp	/^  Real rws;                           \/\/ Wigner-Seitz radius$/;"	m	class:AtomData
rzextr	Misc/rzextr.f	/^      subroutine rzextr /;"	s
scalari	SingleSite/scalar_m.f	/^      subroutine scalari(/;"	s
scalarr	SingleSite/scalar_m.f	/^      subroutine scalarr(/;"	s
scale	Main/Graph1d.hpp	/^  void scale(ValueType s) {for(Int i=0; i<N; i++) y[i]*=s;}$/;"	f	class:Graph1d
scale	Main/Graph2d.hpp	/^  void scale(ValueType s)$/;"	f	class:Graph2d
scale_tau00	MultipleScattering/scale_tau00.f	/^      subroutine scale_tau00(/;"	s
scfEnergy	Main/lsmsClass.cpp	/^Real LSMS::scfEnergy(Real *eb)$/;"	f	class:LSMS
scfEnergy	Main/lsmsClass.hpp	/^  Real scfEnergy() {Real eb; return scfEnergy(&eb);}$/;"	f	class:LSMS
se	Core/se.f	/^      subroutine se /;"	s
semcor	SingleSite/AtomData.hpp	/^  Matrix<Real> corden, semcor;$/;"	m	class:AtomData
semcst	Core/semcst_c.f	/^      subroutine semcst(/;"	s
semrel	SingleSite/semrel_c.f	/^      subroutine semrel(/;"	s
semrel	SingleSite/semrel_c_mesh_test.f	/^      subroutine semrel(/;"	s
sendTmats	Communication/LSMSCommunication.cpp	/^void sendTmats(LSMSCommunication &comm, LocalTypeInfo &local)$/;"	f
setDeltaAndClear	Main/Graph1d.hpp	/^  void setDeltaAndClear(KeyType _delta) {$/;"	f	class:Graph1d
setDeltaAndClear	Main/Graph2d.hpp	/^  void setDeltaAndClear(KeyType _deltaX, KeyType _deltaY) {$/;"	f	class:Graph2d
setEfTol	Main/lsmsClass.hpp	/^  void setEfTol(Real e) {efTol=e;}$/;"	f	class:LSMS
setEvec	Main/EvecGenerator.h	/^  void setEvec(double evec[3]){ev[0]=evec[0]; ev[1]=evec[1]; ev[2]=evec[2];}$/;"	f	class:ConstantEvecGenerator
setEvec	Main/lsmsClass.cpp	/^void LSMS::setEvec(Real *ev)$/;"	f	class:LSMS
setEvec	Main/lsmsClass.cpp	/^void LSMS::setEvec(std::vector<std::vector<Real> > &ev)$/;"	f	class:LSMS
setEvec	SingleSite/AtomData.hpp	/^  void setEvec(Real x, Real y, Real z)$/;"	f	class:AtomData
setEvecAndSpinPotentialShift	Main/lsmsClass.cpp	/^void LSMS::setEvecAndSpinPotentialShift(Real *ev)$/;"	f	class:LSMS
setGlobalId	Main/SystemParameters.hpp	/^  void setGlobalId(int rank,CrystalParameters &crystal)$/;"	f	class:LocalTypeInfo
setIstop	Main/SystemParameters.hpp	/^  void setIstop(const char *c){strncpy(istop,c,32); for(int i=strlen(c); i<32; i++) istop[i]=' ';}$/;"	f	class:LSMSGlobals
setIstop	Test/buildKKRMatrixTest/TestStructures.hpp	/^  void setIstop(const char *c){strncpy(istop,c,32); for(int i=strlen(c); i<32; i++) istop[i]=' ';}$/;"	f	class:LSMSGlobals
setMaxCore	Main/SystemParameters.hpp	/^  void setMaxCore(int n) {for(int i=0; i<num_local; i++) atom[i].resizeCore(n);}$/;"	f	class:LocalTypeInfo
setMaxPts	Main/SystemParameters.hpp	/^  void setMaxPts(int n) {for(int i=0; i<num_local; i++) atom[i].resizePotential(n);}$/;"	f	class:LocalTypeInfo
setMomentAtIdx	Main/Graph1dMoments.hpp	/^  inline void setMomentAtIdx(Int i, int _k, ValueType v)$/;"	f	class:Graph1dMoments
setNumLocal	Main/SystemParameters.hpp	/^  void setNumLocal(int n)$/;"	f	class:LocalTypeInfo
setNumberOfMoments	Main/Graph1dMoments.hpp	/^  void setNumberOfMoments(int _k)$/;"	f	class:Graph1dMoments
setNumberOfSamplesAtIdx	Main/Graph1dMoments.hpp	/^  inline void setNumberOfSamplesAtIdx(Int i, Int _M)$/;"	f	class:Graph1dMoments
setRange	Main/Graph1d.hpp	/^  void setRange(KeyType min, KeyType max) {$/;"	f	class:Graph1d
setRangeAndClear	Main/Graph1d.hpp	/^  void setRangeAndClear(KeyType min, KeyType max, Int _N) {$/;"	f	class:Graph1d
setRangeAndClear	Main/Graph1dMoments.hpp	/^  void setRangeAndClear(KeyType min, KeyType max, Int _N) {$/;"	f	class:Graph1dMoments
setVerbosity	Main/EvecGenerator.h	/^  void setVerbosity(int v) {verbosity=v;}$/;"	f	class:EvecGenerator
setWidthAndClear	Main/Graph1d.hpp	/^  void setWidthAndClear(KeyType _delta, KeyType _width) {$/;"	f	class:Kernel1d
setWidthAndClear	Main/Graph2d.hpp	/^  void setWidthAndClear(KeyType _deltaX, KeyType _deltaY, KeyType _widthX, KeyType _widthY) {$/;"	f	class:Kernel2d
setXRange	Main/Graph2d.hpp	/^  void setXRange(KeyType min, KeyType max) {$/;"	f	class:Graph2d
setXRangeAndClear	Main/Graph2d.hpp	/^  void setXRangeAndClear(KeyType min, KeyType max, Int _N) {$/;"	f	class:Graph2d
setYminAndClear	Main/Graph2d.hpp	/^  void setYminAndClear(Int ix, KeyType _minY, Int _Ny)$/;"	f	class:Graph2d
set_LIZ	Test/buildKKRMatrixTest/LIZ_pos.h	/^void set_LIZ(AtomData & atom)$/;"	f
set_atom	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^void set_atom(AtomData &atom)$/;"	f
set_tmat	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^void set_tmat(Complex energy,Matrix<Complex> &tmat)$/;"	f
setgij	MultipleScattering/setgij.f	/^      subroutine setgij(/;"	s
setgij	Test/buildKKRMatrixTest/setgij.f	/^      subroutine setgij(/;"	s
setupMixing	Main/mixing.cpp	/^void setupMixing(MixingParameters &mix, Mixing* &mixing)$/;"	f
setupVorpol	VORPOL/setupVorpol.cpp	/^void setupVorpol(LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local,SphericalHarmonicsCoeficients &shc)$/;"	f
setup_boundary	VORPOL/setup_boundary.f	/^      subroutine setup_boundary(/;"	s
setup_vorpol	VORPOL/setup_vorpol.f	/^      subroutine setup_vorpol(/;"	s
sigma	VORPOL/sigma.f	/^      function sigma(/;"	f
simple	Main/mixing.hpp	/^  enum mixAlgorithm {noAlgorithm = 0, simple = 1, broyden = 2};$/;"	e	enum:MixingParameters::mixAlgorithm
simpleMixing	Main/mixing.hpp	/^void simpleMixing(T *fold, T* fnew, int n, Real alpha)$/;"	f
singlePotentialRead	RadialGrid/Atom.hpp	/^void singlePotentialRead(int loc_id, Atom &a)$/;"	f
single_pot_read	RadialGrid/single_pot_read.f	/^      subroutine single_pot_read(/;"	s
single_scatterer_nonrel	SingleSite/single_scatterer_nonrel.f	/^      subroutine single_scatterer_nonrel(/;"	s
single_scatterer_rel	SingleSite/single_scatterer_rel.f	/^      subroutine single_scatterer_rel(/;"	s
single_site_tmat	SingleSite/single_site_tmat.f	/^      subroutine single_site_tmat(/;"	s
size	Accelerator/DeviceArray3d.hpp	/^      __inline__ __host__ __device__ size_type size() const { return lDim12*nSlice; }$/;"	f	class:DeviceArray3d
size	Accelerator/DeviceMatrix.hpp	/^      __inline__ __host__ __device__ size_type size() const { return lDim*nCol; }$/;"	f	struct:DeviceMatrix
size	Accelerator/DeviceVector.hpp	/^      __inline__ __host__ __device__ size_type size() const { return N; }$/;"	f	class:DeviceVector
size	Communication/LSMSCommunication.hpp	/^  int size;$/;"	m	class:LSMSCommunication
sizeRadialGridLua	LuaInterface/RadialGrid_lua.cpp	/^static int sizeRadialGridLua(lua_State *L)$/;"	f	file:
sizeRadialPotentialLua	LuaInterface/RadialPotential_lua.cpp	/^static int sizeRadialPotentialLua(lua_State *L)$/;"	f	file:
size_type	Accelerator/DeviceArray3d.hpp	/^      typedef size_t       size_type;$/;"	t	class:DeviceArray3d
size_type	Accelerator/DeviceMatrix.hpp	/^      typedef size_t       size_type;$/;"	t	struct:DeviceMatrix
size_type	Accelerator/DeviceVector.hpp	/^      typedef size_t       size_type;$/;"	t	class:DeviceVector
sizeof_Z	Accelerator/CULA_Common.h	/^      integer sizeof_Z,sizeof_I$/;"	v
solveSingleScatterers	Main/solveSingleScatterers.cpp	/^void solveSingleScatterers(LSMSSystemParameters &lsms, LocalTypeInfo &local,$/;"	f
sort	VORPOL/sort.f	/^      subroutine sort(/;"	s
sortidx	VORPOL/sortidx.f	/^      subroutine sortidx(/;"	s
sphericalHarmonicsCoeficients	Main/lsms.cpp	/^SphericalHarmonicsCoeficients sphericalHarmonicsCoeficients;$/;"	v
sphericalHarmonicsCoeficients	Main/lsmsClass.cpp	/^SphericalHarmonicsCoeficients sphericalHarmonicsCoeficients;$/;"	v
sphericalHarmonicsCoeficients	Test/WriteTMats.cpp	/^SphericalHarmonicsCoeficients sphericalHarmonicsCoeficients;$/;"	v
sphericalHarmonicsCoeficients	Test/buildKKRMatrixTest/buildKKRMatrixTest.cpp	/^SphericalHarmonicsCoeficients sphericalHarmonicsCoeficients;$/;"	v
spin_trafo	Misc/spin_trafo.f	/^      subroutine spin_trafo(/;"	s
spzwafu	SingleSite/spzwafu.f	/^      subroutine spzwafu(/;"	s
srcore	Core/srcore.f	/^      subroutine srcore(/;"	s
startSampling	Main/EvecGenerator.h	/^  virtual void startSampling(void) {;}$/;"	f	class:EvecGenerator
startSampling	Main/WangLandau.h	/^  void startSampling(void) { sw.writeHeader(gamma,n_walkers,n_spins,evecs_pointer);}$/;"	f	class:WL1dEvecGenerator
startSampling	Main/WangLandau2d.h	/^  void startSampling(void) { sw.writeHeader(gamma,n_walkers,n_spins,evecs_pointer);}$/;"	f	class:WL2dEvecGenerator
statesFile	Main/WangLandau.h	/^  char *statesFile;$/;"	m	class:WL1dEvecGenerator
statesFile	Main/WangLandau2d.h	/^  char *statesFile;$/;"	m	class:WL2dEvecGenerator
stepsSinceLastHistogramUpdate	Main/ExhaustiveIsing.h	/^  int stepsSinceLastHistogramUpdate;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
stepsSinceLastHistogramUpdate	Main/WangLandau.h	/^  int stepsSinceLastHistogramUpdate;$/;"	m	class:WL1dEvecGenerator
stepsSinceLastHistogramUpdate	Main/WangLandau2d.h	/^  int stepsSinceLastHistogramUpdate;$/;"	m	class:WL2dEvecGenerator
stepyll	VORPOL/stepyll.f	/^      subroutine stepyll(/;"	s
store_id	Main/SystemParameters.hpp	/^  int store_id;   \/\/ position in tmatStore$/;"	m	class:AtomType
sw	Main/WangLandau.h	/^  StatesWriter sw;$/;"	m	class:WL1dEvecGenerator
sw	Main/WangLandau2d.h	/^  StatesWriter2d sw;$/;"	m	class:WL2dEvecGenerator
sync	RadialGrid/RadialPotential.hpp	/^  inline void sync() {vr.resize(g->N,2);}$/;"	f	class:RadialPotential
syncRadialPotentialLua	LuaInterface/RadialPotential_lua.cpp	/^static int syncRadialPotentialLua(lua_State *L)$/;"	f	file:
syncronizeGraphs	Main/Graph1d.hpp	/^inline bool syncronizeGraphs(Graph1d<ValueType, KeyType, Int> &a, Graph1d<ValueType, KeyType, Int> &b)$/;"	f
syncronizeGraphs	Main/Graph1dMoments.hpp	/^inline bool syncronizeGraphs(Graph1dMoments<ValueType, KeyType, Int> &a, Graph1dMoments<ValueType, KeyType, Int> &b)$/;"	f
syncronizeGraphs	Main/Graph2d.hpp	/^inline bool syncronizeGraphs(Graph2d<ValueType, KeyType, Int> &a, Graph2d<ValueType, KeyType, Int> &b)$/;"	f
systemid	Main/SystemParameters.hpp	/^  char systemid[80];$/;"	m	class:LSMSSystemParameters
tau_inv_postproc_nrel	MultipleScattering/tau_inv_postproc.f	/^      subroutine tau_inv_postproc_nrel(/;"	s
test	Main/Graph1dMoments.hpp	/^  bool test(void)$/;"	f	class:Graph1dMoments
title	Main/SystemParameters.hpp	/^  char title[80];$/;"	m	class:LSMSSystemParameters
tmatFrom	Communication/LSMSCommunication.hpp	/^  std::vector<TmatCommType> tmatTo, tmatFrom;$/;"	m	class:LSMSCommunication
tmatStore	Main/SystemParameters.hpp	/^  Matrix<Complex> tmatStore;$/;"	m	class:LocalTypeInfo
tmatStore	Test/buildKKRMatrixTest/TestStructures.hpp	/^  Matrix<Complex> tmatStore;$/;"	m	class:LocalTypeInfo
tmatStoreGlobalIdx	Main/SystemParameters.hpp	/^  std::vector<int> tmatStoreGlobalIdx;$/;"	m	class:LocalTypeInfo
tmatStoreIdx	Communication/LSMSCommunication.hpp	/^  std::vector<int> tmatStoreIdx;$/;"	m	class:TmatCommType
tmatTo	Communication/LSMSCommunication.hpp	/^  std::vector<TmatCommType> tmatTo, tmatFrom;$/;"	m	class:LSMSCommunication
tmat_g	SingleSite/SingleSiteScattering.hpp	/^  Matrix<Complex> tmat_g;$/;"	m	class:SingleScattererSolution
tmat_l	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> tmat_l;$/;"	m	class:NonRelativisticSingleScattererSolution
totalEnergy	Main/SystemParameters.hpp	/^  Real totalEnergy;            \/\/ Total energy$/;"	m	class:LSMSSystemParameters
trgtol	MultipleScattering/trgtol.f	/^      subroutine trgtol(/;"	s
triangle	Main/Graph1d.hpp	/^inline ValueType triangle(KeyType x)$/;"	f
triangle	Main/Graph2d.hpp	/^inline ValueType triangle(KeyType x)$/;"	f
triwight	Main/Graph1d.hpp	/^inline ValueType triwight(KeyType x)$/;"	f
triwight	Main/Graph2d.hpp	/^inline ValueType triwight(KeyType x)$/;"	f
trltog	Misc/trltog.f	/^      subroutine trltog(/;"	s
type	Main/SystemParameters.hpp	/^  std::vector<int> type;$/;"	m	class:CrystalParameters
types	Main/SystemParameters.hpp	/^  std::vector<AtomType> types;$/;"	m	class:CrystalParameters
u0	Main/SystemParameters.hpp	/^  Real u0;                     \/\/ Contribution of the Muffin-tin zero potential to the Coulomb energy$/;"	m	class:LSMSSystemParameters
u_sigma_u	Misc/u_sigma_u.f	/^      subroutine u_sigma_u(/;"	s
ubr	SingleSite/AtomData.hpp	/^  Complex ubr[4], ubrd[4];            \/\/ Spin transformation matrices$/;"	m	class:AtomData
ubr	SingleSite/SingleSiteScattering.hpp	/^  Complex ubr[4], ubrd[4];$/;"	m	class:NonRelativisticSingleScattererSolution
ubrd	SingleSite/AtomData.hpp	/^  Complex ubr[4], ubrd[4];            \/\/ Spin transformation matrices$/;"	m	class:AtomData
ubrd	SingleSite/SingleSiteScattering.hpp	/^  Complex ubr[4], ubrd[4];$/;"	m	class:NonRelativisticSingleScattererSolution
uniform	Main/Graph1d.hpp	/^inline ValueType uniform(KeyType x)$/;"	f
uniform	Main/Graph2d.hpp	/^inline ValueType uniform(KeyType x)$/;"	f
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, AtomData &a) {}$/;"	f	class:NoMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:EfMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:FrozenPotential
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:SimpleChargeDensityMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:SimplePotentialMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:NoMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:EfMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:FrozenPotential
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:SimpleChargeDensityMixing
updateChargeDensity	Main/mixing.cpp	/^  void updateChargeDensity(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:SimplePotentialMixing
updateCycle	Main/ExhaustiveIsing.h	/^  int flipPerUpdate, updateCycle;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
updateCycle	Main/WangLandau.h	/^  int flipPerUpdate, updateCycle;$/;"	m	class:WL1dEvecGenerator
updateCycle	Main/WangLandau2d.h	/^  int flipPerUpdate, updateCycle;$/;"	m	class:WL2dEvecGenerator
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, AtomData &a) {}$/;"	f	class:FrozenPotential
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, AtomData &a) {}$/;"	f	class:NoMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:EfMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:SimpleChargeDensityMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, AtomData &a)$/;"	f	class:SimplePotentialMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:FrozenPotential
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, std::vector<AtomData> &as) {}$/;"	f	class:NoMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:EfMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:SimpleChargeDensityMixing
updatePotential	Main/mixing.cpp	/^  void updatePotential(LSMSSystemParameters &lsms, std::vector<AtomData> &as)$/;"	f	class:SimplePotentialMixing
updatesPerBin	Main/WangLandau.h	/^  int updatesPerBin;$/;"	m	class:WL1dEvecGenerator
vSpinShift	SingleSite/AtomData.hpp	/^  Real vSpinShift; \/\/ relativ shift of the spin up and spin down potentials$/;"	m	class:AtomData
vSpinShiftFlag	Main/SystemParameters.hpp	/^  int vSpinShiftFlag; \/\/ if !=0 : shift the spin up and down potentials according to atom.vSpinShift$/;"	m	class:LSMSSystemParameters
v_plus_minus	Misc/v_plus_minus.f	/^      subroutine v_plus_minus(/;"	s
val	Main/Graph2d.hpp	/^  std::vector< std::vector<ValueType>* > val;$/;"	m	class:Graph2d
vdif	RadialGrid/Atom.hpp	/^  Real vdif;$/;"	m	class:Atom
vdif	SingleSite/AtomData.hpp	/^  Real vdif, vdifNew;$/;"	m	class:AtomData
vdifNew	SingleSite/AtomData.hpp	/^  Real vdif, vdifNew;$/;"	m	class:AtomData
verbosity	Main/EvecGenerator.h	/^  int verbosity;$/;"	m	class:EvecGenerator
version	Main/lsmsClass.hpp	/^  int version(){return LSMS_version;}$/;"	f	class:LSMS
volumeInterstitial	Main/SystemParameters.hpp	/^  Real volumeInterstitial;     \/\/ Total interstitial volume$/;"	m	class:LSMSSystemParameters
volumeNorm	Main/SystemParameters.hpp	/^  Real volumeNorm;             \/\/ Volume renormalization factor$/;"	m	class:LSMSSystemParameters
volumeTotal	Main/SystemParameters.hpp	/^  Real volumeTotal;            \/\/ Total cell volume$/;"	m	class:LSMSSystemParameters
volvor	VORPOL/volvor.f	/^      subroutine volvor(/;"	s
voronoi	SingleSite/AtomData.hpp	/^  VoronoiPolyhedra voronoi;$/;"	m	class:AtomData
vr	RadialGrid/RadialPotential.hpp	/^  Matrix<Real> vr;$/;"	m	class:RadialPotential
vr	SingleSite/AtomData.hpp	/^  Matrix<Real> vr, rhotot;$/;"	m	class:AtomData
vr0	Potential/PotentialShifter.hpp	/^  std::vector<Matrix<Real> > vr0; \/\/ the unshifted potential$/;"	m	class:PotentialShifter
vrNew	SingleSite/AtomData.hpp	/^  Matrix<Real> vrNew,rhoNew;$/;"	m	class:AtomData
w3j	Misc/Gaunt.hpp	/^R w3j(Int j1, Int j2, Int j3, Int m1, Int m2, Int m3)$/;"	f	namespace:NewGaunt
w3j	Misc/Gaunt_gmp.hpp	/^void w3j(mpf_t w, long j1, long j2, long j3, long m1, long m2, long m3)$/;"	f	namespace:NewGaunt
w3j_Delta	Misc/Gaunt.hpp	/^R w3j_Delta(Int j1, Int j2, Int j3)$/;"	f	namespace:NewGaunt
w3j_Delta_sq	Misc/Gaunt_gmp.hpp	/^void w3j_Delta_sq(mpq_t r, long j1, long j2, long j3)$/;"	f	namespace:NewGaunt
w3j_intterm	Misc/Gaunt.hpp	/^Int w3j_intterm(Int j1, Int j2, Int j3, Int m1, Int m2, Int m3)$/;"	f	namespace:NewGaunt
w3j_intterm	Misc/Gaunt_gmp.hpp	/^void w3j_intterm(mpz_t sum, long j1, long j2, long j3, long m1, long m2, long m3)$/;"	f	namespace:NewGaunt
w3j_sqrt	Misc/Gaunt.hpp	/^R w3j_sqrt(Int j1, Int j2, Int j3, Int m1, Int m2, Int m3)$/;"	f	namespace:NewGaunt
w3j_sqrt_denominator	Misc/Gaunt.hpp	/^Int w3j_sqrt_denominator(Int j1, Int j2, Int j3, Int m1, Int m2, Int m3)$/;"	f	namespace:NewGaunt
w3j_sqrt_numerator	Misc/Gaunt.hpp	/^Int w3j_sqrt_numerator(Int j1, Int j2, Int j3, Int m1, Int m2, Int m3)$/;"	f	namespace:NewGaunt
w3j_sqrt_sq	Misc/Gaunt_gmp.hpp	/^void w3j_sqrt_sq(mpq_t r, long j1, long j2, long j3, long m1, long m2, long m3)$/;"	f	namespace:NewGaunt
walker_step	Main/EvecGenerator.h	/^  std::vector<int> walker_step;$/;"	m	class:ConstantEvecGenerator
width	Main/Graph1d.hpp	/^  KeyType width;$/;"	m	class:Kernel1d
widthX	Main/Graph2d.hpp	/^  KeyType widthX, widthY;$/;"	m	class:Kernel2d
widthY	Main/Graph2d.hpp	/^  KeyType widthX, widthY;$/;"	m	class:Kernel2d
wrapperError	Accelerator/fortran_thunking.c	/^static void wrapperError (const char *funcName, int error)$/;"	f	file:
writeChange	Main/WangLandau.h	/^  void writeChange(int iWalk, int numRet, int ispin, double *ev, double E)$/;"	f	class:StatesWriter
writeChange	Main/WangLandau2d.h	/^  void writeChange(int iWalk, int numRet, int ispin, double *ev, double E)$/;"	f	class:StatesWriter2d
writeDos	Main/WangLandau.h	/^void WL1dEvecGenerator<RNG>::writeDos(const char* name)$/;"	f	class:WL1dEvecGenerator
writeFlag	Main/WangLandau.h	/^  bool writeFlag;$/;"	m	class:StatesWriter
writeFlag	Main/WangLandau2d.h	/^  bool writeFlag;$/;"	m	class:StatesWriter2d
writeHeader	Main/WangLandau.h	/^  void writeHeader(double lnF, int numWalk, int numSpin, double **spins)$/;"	f	class:StatesWriter
writeHeader	Main/WangLandau2d.h	/^  void writeHeader(double lnF, int numWalk, int numSpin, double **spins)$/;"	f	class:StatesWriter2d
writePot	Main/lsmsClass.cpp	/^void LSMS::writePot(char * name)$/;"	f	class:LSMS
writePotentials	Main/PotentialIO.cpp	/^int writePotentials(LSMSCommunication &comm,LSMSSystemParameters &lsms, CrystalParameters &crystal, LocalTypeInfo &local)$/;"	f
writeSingleAtomData_bigcell	SingleSite/writeSingleAtomData_bigcell.cpp	/^int writeSingleAtomData_bigcell(const char *fname, AtomData &atom)$/;"	f
writeSingleAtomData_hdf5	SingleSite/writeSingleAtomData_hdf5.cpp	/^int writeSingleAtomData_hdf5(hid_t loc_id, AtomData &atom)$/;"	f
writeState	Main/EvecGenerator.h	/^  virtual void writeState(const char *name) {;}$/;"	f	class:EvecGenerator
writeState	Main/ExhaustiveIsing.h	/^void ExhaustiveIsing1dEvecGenerator::writeState(const char* name)$/;"	f	class:ExhaustiveIsing1dEvecGenerator
writeState	Main/WangLandau.h	/^void WL1dEvecGenerator<RNG>::writeState(const char* name)$/;"	f	class:WL1dEvecGenerator
writeState	Main/WangLandau2d.h	/^void WL2dEvecGenerator<RNG>::writeState(const char* name)$/;"	f	class:WL2dEvecGenerator
writeSteps	Main/SystemParameters.hpp	/^  int writeSteps;$/;"	m	class:LSMSSystemParameters
write_kkrmat	MultipleScattering/write_kkrmat.f	/^      subroutine write_kkrmat(/;"	s
wrtmtx	Misc/wrtmtx.f	/^      subroutine wrtmtx(/;"	s
wx	SingleSite/AtomData.hpp	/^  Complex wx[4], wy[4], wz[4];$/;"	m	class:AtomData
wy	SingleSite/AtomData.hpp	/^  Complex wx[4], wy[4], wz[4];$/;"	m	class:AtomData
wylm	VORPOL/VORPOL.hpp	/^  Array3d<Complex> wylm;$/;"	m	class:VoronoiPolyhedra
wz	SingleSite/AtomData.hpp	/^  Complex wx[4], wy[4], wz[4];$/;"	m	class:AtomData
xMax	Main/ExhaustiveIsing.h	/^  double xMin, xMax, interval;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
xMin	Main/ExhaustiveIsing.h	/^  double xMin, xMax, interval;$/;"	m	class:ExhaustiveIsing1dEvecGenerator
x_mesh	RadialGrid/RadialGrid.hpp	/^  std::vector<Real> r_mesh,x_mesh; $/;"	m	class:RadialGrid
x_mesh	SingleSite/AtomData.hpp	/^  std::vector<Real> r_mesh, x_mesh;$/;"	m	class:AtomData
xstart	SingleSite/AtomData.hpp	/^  Real xstart,rmt,h;$/;"	m	class:AtomData
xvalmt	SingleSite/AtomData.hpp	/^  Real xvalmt[2];$/;"	m	class:AtomData
xvalws	RadialGrid/Atom.hpp	/^  Real xvalws[2];$/;"	m	class:Atom
xvalws	SingleSite/AtomData.hpp	/^  Real xvalws[2], xvalwsNew[2];$/;"	m	class:AtomData
xvalwsNew	SingleSite/AtomData.hpp	/^  Real xvalws[2], xvalwsNew[2];$/;"	m	class:AtomData
y	Main/Graph1d.hpp	/^  std::vector<ValueType> y;$/;"	m	class:Graph1d
ylag	Misc/ylag.f	/^      function ylag(/;"	f
zblock_lu	MultipleScattering/zblock_lu_CPU.f	/^      subroutine zblock_lu(/;"	s
zblock_lu	MultipleScattering/zblock_lu_CULA.F	/^      subroutine zblock_lu(/;"	s
zblock_lu	MultipleScattering/zblock_lu_LIBSCI.f	/^      subroutine zblock_lu(/;"	s
zblock_lu	MultipleScattering/zblock_lu_cray.f	/^      subroutine zblock_lu(/;"	s
zblock_lu	MultipleScattering/zblock_lu_cuda_c.f	/^      subroutine zblock_lu(/;"	s
zcorss	RadialGrid/Atom.hpp	/^  Real ztotss, zcorss;$/;"	m	class:Atom
zcorss	SingleSite/AtomData.hpp	/^  Real ztotss, zcorss, zsemss, zvalss;$/;"	m	class:AtomData
zeroout	Misc/zeroout.f	/^      subroutine zeroout(/;"	s
zeropt	TotalEnergy/zeropt_c.f	/^      subroutine zeropt(/;"	s
zgemm_acc2_	Accelerator/fortran.c	/^void zgemm_acc2_ (const char *transa, const char *transb, const int *m,$/;"	f
zgetrf_acc2_	Accelerator/fortran.c	/^void zgetrf_acc2_( const int *m, const int *n,$/;"	f
zgetrs_acc2_	Accelerator/fortran.c	/^void zgetrs_acc2_( const char *transa, const int *m, const int *nrhs,$/;"	f
zlr	SingleSite/SingleSiteScattering.hpp	/^  Array3d<Complex> zlr,jlr;$/;"	m	class:NonRelativisticSingleScattererSolution
zsemss	SingleSite/AtomData.hpp	/^  Real ztotss, zcorss, zsemss, zvalss;$/;"	m	class:AtomData
zsphbes	Misc/zsphbes.f	/^      subroutine zsphbes(/;"	s
zsphbesj	Misc/zsphbesj.f	/^      subroutine zsphbesj(/;"	s
zsphbesjh	Misc/zsphbesjh.f	/^      subroutine zsphbesjh(/;"	s
ztotss	RadialGrid/Atom.hpp	/^  Real ztotss, zcorss;$/;"	m	class:Atom
ztotss	SingleSite/AtomData.hpp	/^  Real ztotss, zcorss, zsemss, zvalss;$/;"	m	class:AtomData
zvalss	SingleSite/AtomData.hpp	/^  Real ztotss, zcorss, zsemss, zvalss;$/;"	m	class:AtomData
zvaltss	Main/SystemParameters.hpp	/^  Real zvaltss;                \/\/ Total valence charge$/;"	m	class:LSMSSystemParameters
~AtomData	SingleSite/AtomData.hpp	/^  ~AtomData() {}$/;"	f	class:AtomData
~DeviceArray3d	Accelerator/DeviceArray3d.hpp	/^      __inline__ ~DeviceArray3d() {$/;"	f	class:DeviceArray3d
~DeviceMatrix	Accelerator/DeviceMatrix.hpp	/^      __inline__ ~DeviceMatrix() {$/;"	f	struct:DeviceMatrix
~DeviceVector	Accelerator/DeviceVector.hpp	/^      __inline__ ~DeviceVector() {$/;"	f	class:DeviceVector
~Graph2d	Main/Graph2d.hpp	/^  ~Graph2d() {freeVal(); }$/;"	f	class:Graph2d
~LSMS	Main/lsmsClass.cpp	/^LSMS::~LSMS()$/;"	f	class:LSMS
~StatesWriter	Main/WangLandau.h	/^  ~StatesWriter() {if(writeFlag) of.close();}$/;"	f	class:StatesWriter
~StatesWriter2d	Main/WangLandau2d.h	/^  ~StatesWriter2d() {if(writeFlag) of.close();}$/;"	f	class:StatesWriter2d
